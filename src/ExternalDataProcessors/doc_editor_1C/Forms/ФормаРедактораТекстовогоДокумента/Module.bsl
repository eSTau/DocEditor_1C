#Область ОписаниеПеременных

&НаСервере
Перем мЗаполнитьСтруктуруСПодчиненнымиЭлементами;

&НаКлиенте
Перем мОткрытыеФормы;

&НаКлиенте
Перем мНастройкиТекущегоЭлемента;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПодготовитьКонвертерМаркдаун();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РаспаковатьКонвертер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Не ИмяСобытия = "ПривязкаОткрытойФормыКИнтерактивнойСправке"
		И Не ИмяСобытия = "УдалениеФормыИзИнтерактивнойСправке"
		И Не ИмяСобытия = "ОткрытиеФормыРедактораОбъектов"
		И Не ИмяСобытия = "ОкончаниеРедактированиОбъекта" Тогда
			
		Возврат;
		
	КонецЕсли;

	Если ИмяСобытия = "ОткрытиеФормыРедактораОбъектов" Тогда
		ЗаполнитьТипыМетаданных(Параметр);	
	ИначеЕсли ИмяСобытия = "ОкончаниеРедактированиОбъекта" Тогда
		ДобавитьНовыйОбъектВСтруктуруМетаданных(Параметр);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РедакторТекстовогоДокументаПриИзменении(Элемент)

	ПоказатьСконвертированныйHtmlДокумент();	

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтруктураМетаданных

&НаКлиенте
Процедура СтруктураМетаданныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьДанныеОбъектаВРедактор(ВыбраннаяСтрока, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураМетаданныхПриАктивизацииСтроки(Элемент)
	
	Если СтруктураМетаданных.ПолучитьЭлементы().Количество() Тогда
		ОбъектМетаданных = ТекущийОбъектМетаданных();
		НастроитьКомандыКонтекстногоМеню(ОбъектМетаданных);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область КомандыРедактора

&НаКлиенте
Процедура ДобавитьЖирныйШрифт(Команда)
	
	МаркерФорматирования = Новый Структура("Маркер, Представление", "**%%**", "Жирный шрифт");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНаклонныйШрифт(Команда)

	МаркерФорматирования = Новый Структура("Маркер, Представление", "*%%*", "Наклонный шрифт");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПодчеркнутыйШрифт(Команда)

	МаркерФорматирования = Новый Структура("Маркер, Представление", "__%%__", "Подчеркнутый шрифт");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗачеркнутыйШрифт(Команда)
	
	МаркерФорматирования = Новый Структура("Маркер, Представление", "--%%--", "Зачеркнутый шрифт");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПрограммныйКод(Команда)
	
	МаркерФорматирования = Новый Структура("Маркер, Представление", 
		"```%%
		|```", "Программный код");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЦитату(Команда)
	
	МаркерФорматирования = Новый Структура("Маркер, Представление", "> %%", "Цитата");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПунктСписка(Команда)
	
	МаркерФорматирования = Новый Структура("Маркер, Представление", "- %%", "Пункт списка");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПунктНумеровонногоСписка(Команда)
	
	МаркерФорматирования = Новый Структура("Маркер, Представление", "1. %%", "Пункт нумерованного списка");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКолонкуЗаголовка(Команда)
	
	МаркерФорматирования = Новый Структура("Маркер, Представление", 
		"|%%|--", "Новая колонка заголовка");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);	
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКолонку(Команда)
	
	МаркерФорматирования = Новый Структура("Маркер, Представление", "|%%", "Новая колонка");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСсылку(Команда)

	МаркерФорматирования = Новый Структура("Маркер, Представление", "[Описание ссылки](%%)", "Ссылка");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКартинку(Команда)
	
	ДобавитьКартинкуВТекст();	
	
КонецПроцедуры

#КонецОбласти

#Область КомандыРаботыСоСтруктуройМетаданных

&НаКлиенте
Процедура КомандаПоказатьДеревоМетаданных(Команда)

	Элементы.КнопкаПоказатьДеревоМетаданных.Пометка = Не Элементы.КнопкаПоказатьДеревоМетаданных.Пометка;
	Элементы.ГруппаСтруктураМетаданных.Видимость = Элементы.КнопкаПоказатьДеревоМетаданных.Пометка;

	Если Элементы.КнопкаПоказатьДеревоМетаданных.Пометка Тогда
		ПоказатьСтруктуруМетаданных();
	КонецЕсли;
	 
КонецПроцедуры

&НаКлиенте
Процедура КомандаВывестиСтруктуруМетаданных(Команда)
	
	СтруктураМетаданных.ПолучитьЭлементы().Очистить();
	ЗаполнитьСтруктуруМетаданных();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВывестиСтруктуруСПодчиненнымиЭлементами(Команда)
	
	КомандаВывестиСтруктуруСПодчиненнымиЭлементамиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоказатьСинонимОбъектаМетаданных(Команда)
	
	УстановитьВидимостьКолонкиСиноним();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьНовыйОбъект(Команда)
	
	ДобавитьНовыйОбъектВМенеджерОбъектов();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьРеквизит(Команда)

	ОбъектМетаданных = ТекущийОбъектМетаданных();
			
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИдентификаторВладельца", ОбъектМетаданных.ПолучитьИдентификатор());
	ПараметрыФормы.Вставить("ПолноеИмяВладельца", ОбъектМетаданных.ПолноеИмя);
	ПараметрыФормы.Вставить("Класс", "Реквизит");
	ПараметрыФормы.Вставить("УстановитьТип", Истина);
	
	ОткрытьФормуРедактораОбъекта(ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьТипОбъектаВДокумент(Команда)
	
	ДобавитьДанныеОбъектаВРедактор(Элементы.СтруктураМетаданных.ТекущаяСтрока, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьВИзбранные(Команда)
	
	ОбъектМетаданных = ТекущийОбъектМетаданных();
	СкопироватьДанныеОбъектаМетаданныхВБуфер(ОбъектМетаданных);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьОписаниеОбъекта(Команда)

	ДобавитьОписаниеОбъектаВДокумент();

КонецПроцедуры

&НаКлиенте
Процедура КомандаПоказатьСвойства(Команда)
	
	УзелОбъектМетаданных = ТекущийОбъектМетаданных();
	Если УзелОбъектМетаданных.ПолучитьЭлементы().Количество() Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяМенеджераОбъектов = ИмяМенеджераОбъектов(УзелОбъектМетаданных);
	ИндексЭлемента = УзелОбъектМетаданных.ПолучитьИдентификатор();
	ДобавитьСвойстваОбъектаМетаданных(ИндексЭлемента, ИмяМенеджераОбъектов, УзелОбъектМетаданных.Имя);
	
	ЭлементОбъектМетаданных = СтруктураМетаданных.НайтиПоИдентификатору(ИндексЭлемента);
	Элементы.СтруктураМетаданных.Развернуть(ИндексЭлемента);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПолучитьСтруктуруФормы(Команда)

	ОбъектМетаданных = ТекущийОбъектМетаданных();
	ПолучитьСтруктуруЭлементовФормы(ОбъектМетаданных, Ложь, Истина);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Процедуры_работы_со_структурой_метаданных

&НаКлиенте
Процедура ПоказатьСтруктуруМетаданных()
	
	Если Не СтруктураМетаданных.ПолучитьЭлементы().Количество() Тогда
		
//		ВосстановитьСтруктуруМетаданныхИзКэша();
//		Если Не СтруктураМетаданных.ПолучитьЭлементы().Количество() Тогда
			ЗаполнитьСтруктуруМетаданных();
//		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПоказатьСтруктуруМетаданных()

&НаСервере
Процедура ЗаполнитьСтруктуруМетаданных()
	
	ДобавитьОсновныеСвойстваКонфигурации();
	ДобавитьОбщиеКлассыОбъектовМетаданных();
	ДобавитьКлассыПрикладныхОбъектов();
	
КонецПроцедуры // ЗаполнитьСтруктуруМетаданных()

&НаСервере
Процедура ДобавитьОсновныеСвойстваКонфигурации()
	
	ЭлементыДерева = СтруктураМетаданных.ПолучитьЭлементы();
	
	УзелБуфер = ЭлементыДерева.Добавить();
	УзелБуфер.Класс = "Буфер";
	УзелБуфер.Имя 	 = "ВыбранныеОбъекты";
	УзелБуфер.Синоним = "Выбранные объекты";
	УзелБуфер.ПолноеИмя = "";
	УстановитьИконкуОбъектаМетаданных(УзелБуфер);
	
	УзелРасшериний = УзелБуфер.ПолучитьЭлементы().Добавить();
	УзелРасшериний.Имя = "Расширения";
	УзелРасшериний.Синоним = "Внешние отчеты и обработки";
	УзелРасшериний.Класс   = "Расширения";
	УстановитьИконкуОбъектаМетаданных(УзелРасшериний);
	
	СтрокаКонфигурации = ЭлементыДерева.Добавить();
	
	СтрокаКонфигурации.Класс = "Конфигурация";
	СтрокаКонфигурации.Имя 	 = Метаданные.Имя;
	СтрокаКонфигурации.Синоним = Метаданные.Представление();
	СтрокаКонфигурации.ПолноеИмя = Метаданные.ПолноеИмя();
	СтрокаКонфигурации.МенеджерОбъектов = Истина;
	УстановитьИконкуОбъектаМетаданных(СтрокаКонфигурации);
	
	ДобавитьМодулиКонфигурации(СтрокаКонфигурации);
	
КонецПроцедуры // ДобавитьОсновныеСвойстваКонфигурации()

&НаСервере
Процедура ДобавитьМодулиКонфигурации(ЭлементКонфигурации)
	
	ЭлементыКонфигурации = ЭлементКонфигурации.ПолучитьЭлементы();
	
	ЭлементМодуль = ЭлементыКонфигурации.Добавить();
	ЭлементМодуль.Класс = "МодульОбычногоПриложения";
	ЭлементМодуль.Имя 	 = "МодульОбычногоПриложения";
	ЭлементМодуль.Синоним = "Модуль обычного приложения";
	ЭлементМодуль.ПолноеИмя = "Конфигурация.МодульОбычногоПриложения";
	УстановитьИконкуОбъектаМетаданных(ЭлементМодуль);
	
	ЭлементМодуль = ЭлементыКонфигурации.Добавить();
	ЭлементМодуль.Класс = "МодульУправляемогоПриложения";
	ЭлементМодуль.Имя 	 = "МодульУправляемогоПриложения";
	ЭлементМодуль.Синоним = "Модуль управляемого приложения";
	ЭлементМодуль.ПолноеИмя = "Конфигурация.МодульУправляемогоПриложения";
	УстановитьИконкуОбъектаМетаданных(ЭлементМодуль);
	
	ЭлементМодуль = ЭлементыКонфигурации.Добавить();
	ЭлементМодуль.Класс = "МодульВнешнегоСоединения";
	ЭлементМодуль.Имя 	 = "МодульВнешнегоСоединения";
	ЭлементМодуль.Синоним = "Модуль внешнего соединения";
	ЭлементМодуль.ПолноеИмя = "Конфигурация.МодульВнешнегоСоединения";
	УстановитьИконкуОбъектаМетаданных(ЭлементМодуль);
	
	ЭлементМодуль = ЭлементыКонфигурации.Добавить();
	ЭлементМодуль.Класс = "МодульСеанса";
	ЭлементМодуль.Имя 	 = "МодульСеанса";
	ЭлементМодуль.Синоним = "Модуль сеанса";
	ЭлементМодуль.ПолноеИмя = "Конфигурация.МодульСеанса";
	УстановитьИконкуОбъектаМетаданных(ЭлементМодуль);
	
КонецПроцедуры // ДобавитьМодулиКонфигурации()

&НаСервере
Процедура ДобавитьОбщиеКлассыОбъектовМетаданных()
	
	ЭлементыСтруктуры = СтруктураМетаданных.ПолучитьЭлементы();
	
	ЭлементОбщие = ЭлементыСтруктуры.Добавить();
	ЭлементОбщие.Класс   = "Общие";
	ЭлементОбщие.Имя	 = "Общие";
	ЭлементОбщие.Синоним = "Общие";
	ЭлементОбщие.МенеджерОбъектов = Ложь;
	УстановитьИконкуОбъектаМетаданных(ЭлементОбщие);
		
	ДобавитьКлассыПодсистемы(ЭлементОбщие);
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ОбщиеМодули", "ОбщийМодуль", "Общие модули");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ПараметрыСеанса", "ПараметрСеанса", "Параметры сеанса");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "Роли", "Роль", "Роли");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ОбщиеРеквизиты", "ОбщийРеквизит", "Общие реквизиты");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ПланыОбмена", "ПланОбмена", "Планы обмена");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "КритерииОтбора", "КритерийОтбора", "Критерии отбора");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ПодпискиНаСобытия", "ПодпискаНаСобытие", "Подписки на события");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "РегламентныеЗадания", "РегламентноеЗадание", "Регламентные задания");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ФункциональныеОпции", "ФункциональнаяОпция", "Функциональные опции");
	ДобавитьНовыйКлассОбъектов(
		ЭлементОбщие, "ПараметрыФункциональныхОпций", "ПараметрФункциональнойОпции", "Параметры функциональных опций");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ОпределяемыеТипы", "ОпределяемыйТип", "Определяемые типы");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ХранилищаНастроек", "ХранилищеНастроек", "Хранилища настроек");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ОбщиеФормы", "ОбщаяФорма", "Общие формы");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ОбщиеКоманды", "ОбщаяКоманда", "Общие команды");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ГруппыКоманд", "ГруппаКоманд", "Группы команд");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "Интерфейсы", "Интерфейс", "Интерфейсы");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ОбщиеМакеты", "ОбщийМакет", "Общие макеты");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ОбщиеКартинки", "ОбщаяКартинка", "Общие картинки");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ПакетыXDTO", "ПакетXDTO", "XDTO-пакеты");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "WebСервисы", "WebСервис", "Web-сервисы");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "HTTPСервисы", "HTTPСервис", "HTTP-сервисы");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "WSСсылки", "WSСсылка", "WS-ссылки");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "Стили", "Стиль", "Стили");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "Языки", "Язык", "Языки");
	
КонецПроцедуры // ДобавитьОбщиеКлассыОбъектовМетаданных()

&НаСервере
Процедура ДобавитьКлассыПодсистемы(ЭлементРодитель)
	
	ЭлементПодсистемы = ЭлементРодитель.ПолучитьЭлементы().Добавить();
	ЭлементПодсистемы.Класс = "Подсистема";
	ЭлементПодсистемы.Имя 	= "Подсистемы";
	ЭлементПодсистемы.Синоним = "Подсистемы";
	ЭлементПодсистемы.МенеджерОбъектов = Истина;
	УстановитьИконкуОбъектаМетаданных(ЭлементПодсистемы);
	
	Подсистемы = Метаданные.Подсистемы;
	
	Для Каждого Подсистема Из Подсистемы Цикл
		ДобавитьПодсистему(ЭлементПодсистемы, Подсистема);
	КонецЦикла;
	
КонецПроцедуры // ДобавитьКлассыПодсистемы()

&НаСервере
Процедура ДобавитьПодсистему(ЭлементРодитель, Подсистема)
	
	ЭлементПодсистема = ЭлементРодитель.ПолучитьЭлементы().Добавить();
	ЭлементПодсистема.Класс = "Подсистема";
	ЭлементПодсистема.Имя = Подсистема.Имя;
	ЭлементПодсистема.Синоним = Подсистема.Представление();
	ЭлементПодсистема.ПолноеИмя = Подсистема.ПолноеИмя();
	УстановитьИконкуОбъектаМетаданных(ЭлементПодсистема);
	
	Для Каждого ПодчиненнаяПодсистема Из Подсистема.Подсистемы Цикл
		ДобавитьПодсистему(ЭлементПодсистема, ПодчиненнаяПодсистема);
	КонецЦикла; 
	
КонецПроцедуры // ДобавитьПодсистему()

&НаСервере
Процедура ДобавитьКлассыПрикладныхОбъектов()
	
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "Константы", "Константа", "Константы");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "Справочники", "Справочник", "Справочники");
	ДобавитьКлассДокументы();
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "ЖурналыДокументов", "ЖурналДокументов", "Журналы документов");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "Перечисления", "Перечисление", "Перечисления");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "Отчеты", "Отчет", "Отчеты");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "Обработки", "Обработка", "Обработки");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "ПланыВидовХарактеристик", "ПланВидовХарактеристик", "Планы видов характеристик");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "ПланыСчетов", "ПланСчетов", "Планы счетов");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "ПланыВидовРасчета", "ПланВидовРасчета", "Планы видов расчета");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "РегистрыСведений", "РегистрСведений", "Регистры сведений");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "РегистрыНакопления", "РегистрНакопления", "Регистры накопления");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "РегистрыБухгалтерии", "РегистрБухгалтерии", "Регистры бухгалтерии");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "РегистрыРасчета", "РегистрРасчета", "Регистры расчета");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "БизнесПроцессы", "БизнесПроцесс", "Бизнес-процессы");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "Задачи", "Задача", "Задачи");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "ВнешниеИсточникиДанных", "ВнешнийИсточникДанных", "Внешние источники данных");
	
КонецПроцедуры // ДобавитьКлассыПрикладныхОбъектов()

&НаСервере
Процедура ДобавитьКлассДокументы()
	
	ЭлементУзелМенеджер = СтруктураМетаданных.ПолучитьЭлементы().Добавить();
	ЭлементУзелМенеджер.Класс = "Документ";
	ЭлементУзелМенеджер.Имя = "Документы";
	ЭлементУзелМенеджер.Синоним = "Документы";
	ЭлементУзелМенеджер.МенеджерОбъектов = Истина;
	УстановитьИконкуОбъектаМетаданных(ЭлементУзелМенеджер);
	
	ДобавитьНовыйКлассОбъектов(ЭлементУзелМенеджер, "НумераторыДокументов", "НумераторДокументов", "Нумераторы");
	ДобавитьНовыйКлассОбъектов(ЭлементУзелМенеджер, "Последовательности", "Последовательность", "Последовательности");
	
	ДанныеОбъекта = ДанныеИспользуемыеОбъектомМетаданных("Документы");
	ДобавитьПодчиненныеОбъектыМетаданных(ЭлементУзелМенеджер, "Документы", "Документ", ДанныеОбъекта);
	
КонецПроцедуры // ДобавитьКлассДокументы()

&НаСервере
Процедура ДобавитьНовыйКлассОбъектов(ЭлементРодитель, ИмяМенеджераКласса, ИмяКласса, СинонимКласса)	
	
	ЭлементУзелМенеджер = ЭлементРодитель.ПолучитьЭлементы().Добавить();
	ЭлементУзелМенеджер.Класс = ИмяКласса;
	ЭлементУзелМенеджер.Имя   = ИмяМенеджераКласса;
	ЭлементУзелМенеджер.Синоним = ИмяМенеджераКласса;
	ЭлементУзелМенеджер.МенеджерОбъектов = Истина;
	
	УстановитьИконкуОбъектаМетаданных(ЭлементУзелМенеджер);
	
	ДанныеОбъекта = ДанныеИспользуемыеОбъектомМетаданных(ИмяМенеджераКласса);
	ДобавитьПодчиненныеОбъектыМетаданных(ЭлементУзелМенеджер, ИмяМенеджераКласса, ИмяКласса, ДанныеОбъекта);
	
КонецПроцедуры // ДобавитьНовыйКлассОбъектов()

&НаСервере
Процедура ДобавитьСвойстваОбъектаМетаданных(ИндексЭлемента, ИмяМенеджераКласса, ИмяОбъекта)
	
	ЭлементОбъектМетаданных = СтруктураМетаданных.НайтиПоИдентификатору(ИндексЭлемента);
	
	ОбъектМетаданных = Метаданные[ИмяМенеджераКласса][ИмяОбъекта];
	ДанныеОбъекта = ДанныеИспользуемыеОбъектомМетаданных(ИмяМенеджераКласса);

	Если ДанныеОбъекта.Измерения Тогда
		ДобавитьИзмеренияОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
	КонецЕсли;
	
	Если ДанныеОбъекта.Ресурсы Тогда
		ДобавитьРесурсыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
	КонецЕсли;
	
	Если ДанныеОбъекта.РеквизитыАдресации Тогда
		ДобавитьРеквизитыАдресацииОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
	КонецЕсли; 
	
	Если ДанныеОбъекта.Реквизиты Тогда
		ДобавитьРеквизитыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
	КонецЕсли;
	
	Если ДанныеОбъекта.ЗначенияПеречисления Тогда
		ДобавитьЗначенияОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
	КонецЕсли; 
	
	Если ДанныеОбъекта.ТабличныеЧасти Тогда
		ДобавитьТабличныеЧастиОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
	КонецЕсли; 
	
	Если ДанныеОбъекта.Формы Тогда
		ДобавитьФормуОбъектаМетаданных(ИмяМенеджераКласса, ЭлементОбъектМетаданных, ОбъектМетаданных);
	КонецЕсли; 
	
	Если ДанныеОбъекта.Команды Тогда
		ДобавитьКомандыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
	КонецЕсли; 
	
	Если ДанныеОбъекта.Макеты Тогда
		ДобавитьМакетыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСвойстваОбъектаМетаданных()

&НаСервере
Функция ДанныеИспользуемыеОбъектомМетаданных(ИмяМенеджераКласса)
	
	ДанныеОбъектаМетаданных = Новый Структура();
	ДанныеОбъектаМетаданных.Вставить("Реквизиты",            Истина);
	ДанныеОбъектаМетаданных.Вставить("ЗначенияПеречисления", Истина);
	ДанныеОбъектаМетаданных.Вставить("ТабличныеЧасти",       Истина);
	ДанныеОбъектаМетаданных.Вставить("Измерения",            Истина);
	ДанныеОбъектаМетаданных.Вставить("Ресурсы",              Истина);
	ДанныеОбъектаМетаданных.Вставить("Графы",                Истина);
	ДанныеОбъектаМетаданных.Вставить("Формы",                Истина);
	ДанныеОбъектаМетаданных.Вставить("Команды",              Истина);
	ДанныеОбъектаМетаданных.Вставить("Макеты",               Истина);
	ДанныеОбъектаМетаданных.Вставить("РеквизитыАдресации",   Истина);
	ДанныеОбъектаМетаданных.Вставить("Таблицы",              Истина);
	ДанныеОбъектаМетаданных.Вставить("Кубы",                 Истина);
	ДанныеОбъектаМетаданных.Вставить("Функции",              Истина);
	
	МенеджерОбъектМетаданных = Метаданные[ИмяМенеджераКласса];
	Для Каждого Свойство Из ДанныеОбъектаМетаданных Цикл
		
		Если Не МенеджерОбъектМетаданных.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ПодчиненныйКласс = МенеджерОбъектМетаданных[0][Свойство.Ключ];
		Исключение
			ДанныеОбъектаМетаданных[Свойство.Ключ] = Ложь;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ДанныеОбъектаМетаданных;
	
КонецФункции

&НаСервере
Процедура ДобавитьПодчиненныеОбъектыМетаданных(ЭлементРодитель, ИмяМенеджераКласса, ИмяКласса, СвойстваОбъекта)	
	
	Если ИмяМенеджераКласса = "ОбщиеКартинки" Тогда
		Если Не мЗаполнитьСтруктуруСПодчиненнымиЭлементами = Истина Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	
	ОбъектыМетаданных = Метаданные[ИмяМенеджераКласса];
	ЭлементыРодительскогоУзла = ЭлементРодитель.ПолучитьЭлементы();
	
	Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
		
		ЭлементОбъектМетаданных = ЭлементыРодительскогоУзла.Добавить();
		ЭлементОбъектМетаданных.Класс = ИмяКласса;
		ЭлементОбъектМетаданных.Имя = ОбъектМетаданных.Имя;
		ЭлементОбъектМетаданных.Синоним = ОбъектМетаданных.Представление();
		ЭлементОбъектМетаданных.ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		ЭлементОбъектМетаданных.Описание = ОбъектМетаданных.Комментарий;
		
//		ЭлементОбъектМетаданных.Свойства = СвойстаОбъектаМетаданных(ЭлементОбъектМетаданных.Имя, ИмяКласса);
		
		УстановитьИконкуОбъектаМетаданных(ЭлементОбъектМетаданных);
		
		Если ЭтоОбъектСсылочногоТипа(ЭлементОбъектМетаданных) Тогда
			ЭлементОбъектМетаданных.Тип = ИмяКласса + "Ссылка." + ЭлементОбъектМетаданных.Имя;
		КонецЕсли;
		
		Если ИмяКласса = "Константа" Тогда
			ЗаполнитьТипыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
		КонецЕсли; 
		
		Если мЗаполнитьСтруктуруСПодчиненнымиЭлементами = Истина Тогда
		
			Если СвойстваОбъекта.Измерения Тогда
				ДобавитьИзмеренияОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
			КонецЕсли;
			
			Если СвойстваОбъекта.Ресурсы Тогда
				ДобавитьРесурсыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
			КонецЕсли;
			
			Если СвойстваОбъекта.РеквизитыАдресации Тогда
				ДобавитьРеквизитыАдресацииОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
			КонецЕсли; 
			
			Если СвойстваОбъекта.Реквизиты Тогда
				ДобавитьРеквизитыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
			КонецЕсли;
			
			Если СвойстваОбъекта.ЗначенияПеречисления Тогда
				ДобавитьЗначенияОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
			КонецЕсли; 
			
			Если СвойстваОбъекта.ТабличныеЧасти Тогда
				ДобавитьТабличныеЧастиОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
			КонецЕсли; 
			
			Если СвойстваОбъекта.Формы Тогда
				ДобавитьФормуОбъектаМетаданных(ИмяМенеджераКласса, ЭлементОбъектМетаданных, ОбъектМетаданных);
			КонецЕсли; 
			
			Если СвойстваОбъекта.Команды Тогда
				ДобавитьКомандыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
			КонецЕсли; 
			
			Если СвойстваОбъекта.Макеты Тогда
				ДобавитьМакетыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
			КонецЕсли;
		
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитыАдресацииОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных)
	
	ЭлементРеквизитыАдресации = ДобавитьМенеджерРеквизитовАдресации(ЭлементОбъектМетаданных);
	
	РеквизитыАдресации = ОбъектМетаданных.РеквизитыАдресации;
	Если РеквизитыАдресации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого РеквизитАдресации Из РеквизитыАдресации Цикл
		
		ЭлементРеквизитАдресации = ЭлементРеквизитыАдресации.ПолучитьЭлементы().Добавить();
		ЭлементРеквизитАдресации.Класс = "РеквизитАдресации";
		ЭлементРеквизитАдресации.Имя = РеквизитАдресации.Имя;
		ЭлементРеквизитАдресации.Синоним = РеквизитАдресации.Имя;
		ЭлементРеквизитАдресации.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя + "." + РеквизитАдресации.Имя;
		
		ЗаполнитьТипыОбъектаМетаданных(ЭлементРеквизитАдресации, РеквизитАдресации);
		УстановитьИконкуОбъектаМетаданных(ЭлементРеквизитАдресации);
		
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьМенеджерРеквизитовАдресации(ЭлементОбъектМетаданных)

	ЭлементРеквизитыАдресации = ЭлементОбъектМетаданных.ПолучитьЭлементы().Добавить();
	ЭлементРеквизитыАдресации.Класс = "РеквизитАдресации";
	ЭлементРеквизитыАдресации.Имя = "РеквизитыАдресации";
	ЭлементРеквизитыАдресации.Синоним = "РеквизитыАдресации";
	ЭлементРеквизитыАдресации.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя;
	ЭлементРеквизитыАдресации.МенеджерПодчиненныхЭлементов = Истина;
	
	УстановитьИконкуОбъектаМетаданных(ЭлементРеквизитыАдресации);
	
	Возврат ЭлементРеквизитыАдресации;	
	
КонецФункции

&НаСервере
Процедура ДобавитьИзмеренияОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных)
		
	ЭлементИзмерения = ДобавитьМенеджерИзмерений(ЭлементОбъектМетаданных);
	
	Измерения = ОбъектМетаданных.Измерения;
	Если Измерения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Измерение Из Измерения Цикл
		
		ЭлементИзмерение = ЭлементИзмерения.ПолучитьЭлементы().Добавить();
		ЭлементИзмерение.Класс = "Измерение";
		ЭлементИзмерение.Имя = Измерение.Имя;
		ЭлементИзмерение.Синоним = Измерение.Имя;
		ЭлементИзмерение.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя + "." + Измерение.Имя;
		ЗаполнитьТипыОбъектаМетаданных(ЭлементИзмерение, Измерение);
		
		УстановитьИконкуОбъектаМетаданных(ЭлементИзмерение);
		
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьМенеджерИзмерений(ЭлементОбъектМетаданных)
	
	ЭлементИзмерения = ЭлементОбъектМетаданных.ПолучитьЭлементы().Добавить();
	ЭлементИзмерения.Класс = "Измерение";
	ЭлементИзмерения.Имя = "Измерения";
	ЭлементИзмерения.Синоним = "Измерения";
	ЭлементИзмерения.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя;
	ЭлементИзмерения.МенеджерПодчиненныхЭлементов = Истина;
	
	УстановитьИконкуОбъектаМетаданных(ЭлементИзмерения);

	Возврат ЭлементИзмерения;
	
КонецФункции

&НаСервере
Процедура ДобавитьРесурсыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных)

	ЭлементРесурсы = ДобавитьМенеджерРесурсов(ЭлементОбъектМетаданных);
	
	Ресурсы = ОбъектМетаданных.Ресурсы;
	Если Ресурсы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Ресурс Из Ресурсы Цикл
		
		ЭлементРесурс = ЭлементРесурсы.ПолучитьЭлементы().Добавить();
		ЭлементРесурс.Класс = "Ресурс";
		ЭлементРесурс.Имя = Ресурс.Имя;
		ЭлементРесурс.Синоним = Ресурс.Синоним;
		ЭлементРесурс.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя + "." + Ресурс.Имя;
		
		ЗаполнитьТипыОбъектаМетаданных(ЭлементРесурс, Ресурс);
		УстановитьИконкуОбъектаМетаданных(ЭлементРесурс);
		
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьМенеджерРесурсов(ЭлементОбъектМетаданных)
	
	ЭлементРесурсы = ЭлементОбъектМетаданных.ПолучитьЭлементы().Добавить();
	ЭлементРесурсы.Класс = "Ресурс";
	ЭлементРесурсы.Имя = "Ресурсы";
	ЭлементРесурсы.Синоним = "Ресурсы";
	ЭлементРесурсы.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя;
	ЭлементРесурсы.МенеджерПодчиненныхЭлементов = Истина;
	
	УстановитьИконкуОбъектаМетаданных(ЭлементРесурсы);
	
	Возврат ЭлементРесурсы;
	
КонецФункции

&НаСервере
Процедура ДобавитьЗначенияОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных)
	
	ЭлементЗначения = ДобавитьМенеджерЗначений(ЭлементОбъектМетаданных);
	
	Значения = ОбъектМетаданных.ЗначенияПеречисления;
	Если Значения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Значение Из Значения Цикл
		
		ЭлементЗначение = ЭлементЗначения.ПолучитьЭлементы().Добавить();
		ЭлементЗначение.Класс = "Значение";
		ЭлементЗначение.Имя = Значение.Имя;
		ЭлементЗначение.Синоним = Значение.Синоним;
		ЭлементЗначение.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя + "." + Значение.Имя;
		
		УстановитьИконкуОбъектаМетаданных(ЭлементЗначение);
		
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьМенеджерЗначений(ЭлементОбъектМетаданных)
	
	ЭлементЗначения = ЭлементОбъектМетаданных.ПолучитьЭлементы().Добавить();
	ЭлементЗначения.Класс = "Значение";
	ЭлементЗначения.Имя = "Значения";
	ЭлементЗначения.Синоним = "Значения";
	ЭлементЗначения.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя;
	ЭлементЗначения.МенеджерПодчиненныхЭлементов = Истина;
	
	УстановитьИконкуОбъектаМетаданных(ЭлементЗначения);
	
	Возврат ЭлементЗначения;
	
КонецФункции

&НаСервере
Процедура ДобавитьТабличныеЧастиОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных)
		
	ЭлементТабличныеЧасти = ДобавитьМенеджерТабличныхЧастей(ЭлементОбъектМетаданных);
	
	ТабличныеЧасти = ОбъектМетаданных.ТабличныеЧасти;
	Если ТабличныеЧасти.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		
		ЭлементТабличнаяЧасть = ЭлементТабличныеЧасти.ПолучитьЭлементы().Добавить();
		ЭлементТабличнаяЧасть.Класс = "ТабличнаяЧасть";
		ЭлементТабличнаяЧасть.Имя = ТабличнаяЧасть.Имя;
		ЭлементТабличнаяЧасть.Синоним = ТабличнаяЧасть.Синоним;
		ЭлементТабличнаяЧасть.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя + "." + ТабличнаяЧасть.Имя;
		ЭлементТабличнаяЧасть.ТабличнаяЧасть = Истина;
	
		УстановитьИконкуОбъектаМетаданных(ЭлементТабличнаяЧасть);	
		ДобавитьРеквизитыОбъектаМетаданных(ЭлементТабличнаяЧасть, ТабличнаяЧасть);
		
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьМенеджерТабличныхЧастей(ЭлементОбъектМетаданных)
	
	ЭлементТабличныеЧасти = ЭлементОбъектМетаданных.ПолучитьЭлементы().Добавить();
	ЭлементТабличныеЧасти.Класс = "ТабличнаяЧасть";
	ЭлементТабличныеЧасти.Имя = "ТабличныеЧасти";
	ЭлементТабличныеЧасти.Синоним = "ТабличныеЧасти";
	ЭлементТабличныеЧасти.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя;
	ЭлементТабличныеЧасти.МенеджерПодчиненныхЭлементов = Истина;
	
	УстановитьИконкуОбъектаМетаданных(ЭлементТабличныеЧасти);
	
	Возврат ЭлементТабличныеЧасти;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьМенеджерРеквизитов(ЭлементОбъектМетаданных)
	
	Если Не ЭлементОбъектМетаданных.ТабличнаяЧасть Тогда
		
		ЭлементРеквизиты = ЭлементОбъектМетаданных.ПолучитьЭлементы().Добавить();
		ЭлементРеквизиты.Класс = "Реквизит";
		ЭлементРеквизиты.Имя = "Реквизиты";
		ЭлементРеквизиты.Синоним = "Реквизиты";
		ЭлементРеквизиты.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя;
		ЭлементРеквизиты.МенеджерПодчиненныхЭлементов = Истина;
		
	Иначе
		ЭлементРеквизиты = ЭлементОбъектМетаданных;
	КонецЕсли;
	
	УстановитьИконкуОбъектаМетаданных(ЭлементРеквизиты);
	
	Возврат ЭлементРеквизиты;
	
КонецФункции

&НаСервере
Процедура ДобавитьРеквизитыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных)

	ЭлементРеквизиты = ДобавитьМенеджерРеквизитов(ЭлементОбъектМетаданных);
	
	РеквизитыОбъекта = ОбъектМетаданных.Реквизиты;
	Если РеквизитыОбъекта.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	// TODO: Добавить вывод стандартных реквизитов
	Для Каждого Реквизит Из РеквизитыОбъекта Цикл
		
		ЭлементРеквизит = ЭлементРеквизиты.ПолучитьЭлементы().Добавить();
		ЭлементРеквизит.Класс = "Реквизит";
		ЭлементРеквизит.Имя = Реквизит.Имя;
		ЭлементРеквизит.Синоним = Реквизит.Имя;
		ЭлементРеквизит.Описание = Реквизит.Комментарий;
		ЭлементРеквизит.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя + "." + Реквизит.Имя;
		ЗаполнитьТипыОбъектаМетаданных(ЭлементРеквизит, Реквизит);
		
		УстановитьИконкуОбъектаМетаданных(ЭлементРеквизит);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТипыОбъектаМетаданных(ЭлементОбъектаМетаданных, ОбъектМетаданных)
	
	ОписаниеТипов = ОбъектМетаданных.Тип;
	ЭлементОбъектаМетаданных.Тип = ТипыОбъектаМетаданных(ОписаниеТипов.Типы());
	
	Если ЭлементОбъектаМетаданных.Тип = "Строка" Тогда
		ЭлементОбъектаМетаданных.Тип = ЭлементОбъектаМетаданных.Тип 
			+ "(" + ОписаниеТипов.КвалификаторыСтроки.Длина + ")";
	ИначеЕсли ЭлементОбъектаМетаданных.Тип = "Число" Тогда
		ЭлементОбъектаМетаданных.Тип = ЭлементОбъектаМетаданных.Тип  
			+ "(" + ОписаниеТипов.КвалификаторыЧисла.Разрядность + "," 
			+ ОписаниеТипов.КвалификаторыЧисла.РазрядностьДробнойЧасти + ")"; 
	ИначеЕсли ЭлементОбъектаМетаданных.Тип = "Дата" Тогда
		ЭлементОбъектаМетаданных.Тип = ЭлементОбъектаМетаданных.Тип  
			+ "(" + ОписаниеТипов.КвалификаторыДаты.ЧастиДаты + ")"; 
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТипыОбъектаМетаданных()

&НаСервере
Процедура ДобавитьФормуОбъектаМетаданных(ИмяМенеджераКласса, ЭлементРодитель, ОбъектМетаданных)	
	
	ОбъектыСФормами = Новый СписокЗначений();
	ОбъектыСФормами.Добавить("Справочники");
	ОбъектыСФормами.Добавить("Документы");
	ОбъектыСФормами.Добавить("ЖурналыДокументов");
	ОбъектыСФормами.Добавить("Перечисления");
	ОбъектыСФормами.Добавить("Отчеты");
	ОбъектыСФормами.Добавить("Обработки");
	ОбъектыСФормами.Добавить("ПланыВидовХарактеристик");
	ОбъектыСФормами.Добавить("ПланыСчетов");
	ОбъектыСФормами.Добавить("ПланыВидовРасчета");
	ОбъектыСФормами.Добавить("РегистрыСведений");
	ОбъектыСФормами.Добавить("РегистрыНакопления");
	ОбъектыСФормами.Добавить("РегистрыБухгалтерии");
	ОбъектыСФормами.Добавить("БизнесПроцессы");
	ОбъектыСФормами.Добавить("Задачи");
	
	Если Не ОбъектыСФормами.НайтиПоЗначению(ИмяМенеджераКласса) = Неопределено Тогда
		
		ЭлементФормы = ДобавитьМенеджерФорм(ЭлементРодитель);
		
		Для Каждого ОбъектМетаданныхФорма Из ОбъектМетаданных.Формы Цикл
			
			ЭлементФорма = ЭлементФормы.ПолучитьЭлементы().Добавить();
			ЭлементФорма.Класс = "Форма";
			ЭлементФорма.Имя   = ОбъектМетаданныхФорма.Имя;
			ЭлементФорма.Синоним = ОбъектМетаданныхФорма.Представление();
			ЭлементФорма.ПолноеИмя = ОбъектМетаданныхФорма.ПолноеИмя();
			ЭлементФорма.Тип = ОбъектМетаданныхФорма.ТипФормы;
			
//			ДобавитьОписаниеФормы(ОбъектМетаданных, ИмяМенеджераКласса, ОбъектМетаданныхФорма, ЭлементФорма);			
						
			УстановитьИконкуОбъектаМетаданных(ЭлементФорма);
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьМенеджерФорм(ЭлементОбъект)
	
	ЭлементФормы = ЭлементОбъект.ПолучитьЭлементы().Добавить();
	ЭлементФормы.Класс = "Форма";
	ЭлементФормы.Имя = "Формы";
	ЭлементФормы.Синоним = "Формы";
	ЭлементФормы.МенеджерПодчиненныхЭлементов = Истина;
	
	УстановитьИконкуОбъектаМетаданных(ЭлементФормы);
		
	Возврат ЭлементФормы;		
		
КонецФункции

&НаСервере
Процедура ДобавитьКомандыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных)
	
	ЭлементКоманды = ДобавитьМенеджерКоманд(ЭлементОбъектМетаданных);

	КомандыОбъекта = ОбъектМетаданных.Команды;
	Если КомандыОбъекта.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Команда Из КомандыОбъекта Цикл
		
		ЭлементКоманда = ЭлементКоманды.ПолучитьЭлементы().Добавить();
		ЭлементКоманда.Класс = "Команда";
		ЭлементКоманда.Имя = Команда.Имя;
		ЭлементКоманда.Синоним = Команда.Синоним;
		ЭлементКоманда.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя + "." + Команда.Имя;
		УстановитьИконкуОбъектаМетаданных(ЭлементКоманда);
		
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьМенеджерКоманд(ЭлементОбъектМетаданных)
	
	ЭлементКоманды = ЭлементОбъектМетаданных.ПолучитьЭлементы().Добавить();
	ЭлементКоманды.Класс = "Команда";
	ЭлементКоманды.Имя = "Команды";
	ЭлементКоманды.Синоним = "Команды";
	ЭлементКоманды.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя;
	ЭлементКоманды.МенеджерПодчиненныхЭлементов = Истина;
	
	УстановитьИконкуОбъектаМетаданных(ЭлементКоманды);

	Возврат ЭлементКоманды;	
	
КонецФункции

&НаСервере
Процедура ДобавитьМакетыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных)
	
	ЭлементМакеты = ДобавитьМенеджерМакетов(ЭлементОбъектМетаданных);
		
	Макеты = ОбъектМетаданных.Макеты;
	Если Макеты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Макет Из Макеты Цикл
		
		ЭлементМакет = ЭлементМакеты.ПолучитьЭлементы().Добавить();
		ЭлементМакет.Класс = "Макет";
		ЭлементМакет.Имя = Макет.Имя;
		ЭлементМакет.Синоним = Макет.Синоним;
		ЭлементМакет.ПолноеИмя = ОбъектМетаданных.ПолноеИмя() + "." + Макет.Имя;
		ЭлементМакет.Тип = Макет.ТипМакета;
		ЭлементМакет.ИндексКартинки = 23;
		
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьМенеджерМакетов(ЭлементОбъектМетаданных)
		
	ЭлементМакеты = ЭлементОбъектМетаданных.ПолучитьЭлементы().Добавить();
	ЭлементМакеты.Класс = "Макет";
	ЭлементМакеты.Имя = "Макеты";
	ЭлементМакеты.Синоним = "Макеты";
	ЭлементМакеты.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя;
	ЭлементМакеты.МенеджерПодчиненныхЭлементов = Истина;
	
	УстановитьИконкуОбъектаМетаданных(ЭлементМакеты);
	
	Возврат ЭлементМакеты;
	
КонецФункции

&НаКлиенте
Функция ТекущийОбъектМетаданных()
	
	Возврат СтруктураМетаданных.НайтиПоИдентификатору(Элементы.СтруктураМетаданных.ТекущаяСтрока);
	
КонецФункции // ТекущийОбъектМетаданных()

&НаКлиенте
Процедура ВосстановитьСтруктуруМетаданныхИзКэша()
	 
//	ИмяФайлаКэша = КаталогВременныхФайлов() + "edit_structurebase.xml";
//	НайденныеФайлы = НайтиФайлы(ИмяФайлаКэша);
//	Если НайденныеФайлы.Количество() Тогда
//		
//		ПотокЧтения = Новый ЧтениеXML();
//		ПотокЧтения.ОткрытьФайл(ИмяФайлаКэша);
//		
//		СтруктураБазы = СериализаторXDTO.ПрочитатьXML(ПотокЧтения);
//		
//		ЗначениеВДанныеФормы(СтруктураБазы, СтруктураМетаданных);
//		
//	Иначе
//		
//	КонецЕсли;
//	
КонецПроцедуры // ВосстановитьСтруктуруМетаданныхИзКэша()

&НаКлиенте
Процедура СохранитьСтруктуруМетаданныхВКэш()
//	
//	ИмяФайлаКэша = КаталогВременныхФайлов() + "edit_structurebase.xml";
//	
//	СтруктураБазы = ДанныеФормыВЗначение(СтруктураМетаданных, Тип("ДеревоЗначений"));
//	Если СтруктураБазы.Строки.Количество() Тогда
//		СтруктураБазы.Строки[0].Строки.Очистить();
//	КонецЕсли; 
//
//	ПотокЗаписи = Новый ЗаписьXML();
//	ПотокЗаписи.ОткрытьФайл(ИмяФайлаКэша, "UTF-8");
//	
//	СериализаторXDTO.ЗаписатьXML(ПотокЗаписи, СтруктураБазы);
//	ПотокЗаписи.Закрыть();
//	
КонецПроцедуры // СохранитьСтруктуруМетаданныхВКэш()

&НаКлиенте
Функция ИмяМенеджераОбъектов(УзелОбъектаМетаданных)
	
	ИмяМенеджераОбъектов = "";
	Если Не УзелОбъектаМетаданных.МенеджерОбъектов Тогда
		ИмяМенеджераОбъектов = ИмяМенеджераОбъектов(УзелОбъектаМетаданных.ПолучитьРодителя());
	Иначе
		ИмяМенеджераОбъектов = УзелОбъектаМетаданных.Имя;
		
	КонецЕсли; 
	
	Возврат ИмяМенеджераОбъектов;
	
КонецФункции // ИмяМенеджераОбъектов()

&НаСервере
Процедура КомандаВывестиСтруктуруСПодчиненнымиЭлементамиНаСервере()

	мЗаполнитьСтруктуруСПодчиненнымиЭлементами = Истина;
	СтруктураМетаданных.ПолучитьЭлементы().Очистить();
	ЗаполнитьСтруктуруМетаданных();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРасширениеВСтруктуруМетаданных()
	
//	Фильтр = "Файл обработки, отчета (*.epf;*.erf)|*.epf;*.erf";
//
//	Режим = РежимДиалогаВыбораФайла.Открытие;
//	ДиалогЗагрузкиФайла = Новый ДиалогВыбораФайла(Режим);
//	
//	ДиалогЗагрузкиФайла.Фильтр = Фильтр;
//	ДиалогЗагрузкиФайла.Заголовок = "Выбирите файл внешней обработки или внешнего отчета.";
//	
//	Если ДиалогЗагрузкиФайла.Выбрать() Тогда
//		
//		АдресХранилища = "";
//		ПоместитьФайл(АдресХранилища, ДиалогЗагрузкиФайла.ПолноеИмяФайла,, Ложь);
//		ДобавитьМетаданныеРасширенияВСтруктуруМетаданных(АдресХранилища, ДиалогЗагрузкиФайла.ПолноеИмяФайла);
//		
//	КонецЕсли;
//	
КонецПроцедуры // ДобавитьРасширениеВСтруктуруМетаданных()

&НаСервере
Процедура ДобавитьМетаданныеРасширенияВСтруктуруМетаданных(АдресХранилища, ФайлРасширения)
	
	РасширениеФайла = Прав(ФайлРасширения, 3);
	Если НРег(РасширениеФайла) = "epf" Тогда
		КлассРасширения = "Обработка";
		ИмяМенеджераКласса = "Обработки";
	ИначеЕсли НРег(РасширениеФайла) = "erf" Тогда
		КлассРасширения = "Отчет";
		ИмяМенеджераКласса = "Отчеты";
	КонецЕсли;
	
	ОбъектРасширения = Неопределено;
	Если КлассРасширения = "Обработка" Тогда
		ИмяРасширения = ВнешниеОбработки.Подключить(АдресХранилища);
		ОбъектРасширения = ВнешниеОбработки.Создать(ИмяРасширения);
	Иначе
		ИмяРасширения = ВнешниеОтчеты.Подключить(АдресХранилища);
		ОбъектРасширения = ВнешниеОтчеты.Создать(ИмяРасширения);
	КонецЕсли; 
	
	УзелРасшериний = Неопределено;
	УзелВыбранныеОбъекты = СтруктураМетаданных.ПолучитьЭлементы()[0];
	Для Каждого УзелМенеджеров Из УзелВыбранныеОбъекты.ПолучитьЭлементы() Цикл
		
		Если УзелМенеджеров.Имя = "Расширения" Тогда
			УзелРасшериний = УзелМенеджеров;
			Прервать;
		КонецЕсли; 
		
	КонецЦикла;
	
	Если УзелРасшериний = Неопределено Тогда
		
		УзелРасшериний = УзелВыбранныеОбъекты.ПолучитьЭлементы().Добавить();
		УзелРасшериний.Имя = "Расширения";
		УзелРасшериний.Синоним = "Расширения";
		УзелРасшериний.Класс   = "Расширения";
		УзелРасшериний.ИндексКартинки = 59;
		
	КонецЕсли;
	
	ОбъектМетаданных = ОбъектРасширения.Метаданные();
	
	ЭлементОбъектМетаданных = УзелРасшериний.ПолучитьЭлементы().Добавить();
	ЭлементОбъектМетаданных.Класс = КлассРасширения;
	ЭлементОбъектМетаданных.Имя = ОбъектМетаданных.Имя;
	ЭлементОбъектМетаданных.Синоним = ОбъектМетаданных.Синоним;
	ЭлементОбъектМетаданных.ИндексКартинки = ?(КлассРасширения = "Обработка", 41, 39);
	ЭлементОбъектМетаданных.АдресХранилищаОбработки = АдресХранилища;
	ЭлементОбъектМетаданных.ФайлРасширения = ФайлРасширения;
	ЭлементОбъектМетаданных.ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
	
	ДобавитьРеквизитыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
	ДобавитьТабличныеЧастиОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
	ДобавитьФормуОбъектаМетаданных(ИмяМенеджераКласса, ЭлементОбъектМетаданных, ОбъектМетаданных);
	ДобавитьМакетыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
	
КонецПроцедуры // ДобавитьМетаданныеРасширенияВСтруктуруМетаданных()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьИконкуОбъектаМетаданных(ЭлементОбъектаМетаданных)
	
	Если (ЭлементОбъектаМетаданных.Класс = "Конфигурация") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 0;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "МодульОбычногоПриложения"
		Или ЭлементОбъектаМетаданных.Класс = "МодульУправляемогоПриложения"
		Или ЭлементОбъектаМетаданных.Класс = "МодульВнешнегоСоединения"
		Или ЭлементОбъектаМетаданных.Класс = "МодульСеанса") Тогда
	
		ЭлементОбъектаМетаданных.ИндексКартинки = 1;
		
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Общие") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 5;	
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Буфер") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 58;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Расширения") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 59;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Подсистема") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 6;	
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ОбщийМодуль") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 7;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ПараметрСеанса") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 8;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Роль") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 9;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ОбщийРеквизит") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 10;	
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ПланОбмена") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 11;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "КритерийОтбора") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 12;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ПодпискаНаСобытие") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 13;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "РегламентноеЗадание") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 14;			
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ФункциональнаяОпция") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 15;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ПараметрФункциональнойОпции") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 16;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ОпределяемыйТип") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 17;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ХранилищеНастроек") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 18;	
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ОбщаяФорма" 
		Или ЭлементОбъектаМетаданных.Класс = "Форма") Тогда	
		ЭлементОбъектаМетаданных.ИндексКартинки = 19;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ОбщаяКоманда" 
		Или ЭлементОбъектаМетаданных.Класс = "Команда") Тогда

		ЭлементОбъектаМетаданных.ИндексКартинки = 20;
			
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ГруппаКоманд") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 21;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Интерфейс") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 22;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ОбщийМакет" 
		Или ЭлементОбъектаМетаданных.Класс = "Макет") Тогда
		
		ЭлементОбъектаМетаданных.ИндексКартинки = 23;
		
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ОбщаяКартинка") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 24;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ПакетXDTO") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 25;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "WebСервис") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 26;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "HTTPСервис") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 27;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "WSСсылка") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 28;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ЭлементСтиля") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 29;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Стиль") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 30;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Язык") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 31;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Константа") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 32;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Справочник") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 33;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "НумераторДокументов") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 34;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Последовательность") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 35;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Документ") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 36;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ЖурналДокументов") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 37;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Перечисление") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 38;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Отчет") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 39;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Обработка") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 41;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ПланВидовХарактеристик") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 43;		
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ПланСчетов") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 44;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ПланВидовРасчета") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 45;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "РегистрСведений") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 46;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "РегистрНакопления") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 47;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "РегистрБухгалтерии") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 48;	
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "РегистрРасчета") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 49;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "БизнесПроцесс") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 50;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Задача") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 51;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ВнешнийИсточникДанных") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 52;
	
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Реквизит"
		Или ЭлементОбъектаМетаданных.Класс = "Значение") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 53;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ТабличнаяЧасть") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 54;
		
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Измерение") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 55;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Ресурс"
		Или ЭлементОбъектаМетаданных.Класс = "РеквизитАдресации") Тогда
			
		ЭлементОбъектаМетаданных.ИндексКартинки = 56;
	
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "РегистрНакопления") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 47;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "РегистрБухгалтерии") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 48;	
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "РегистрРасчета") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 49;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "БизнесПроцесс") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 50;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Задача") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 51;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ВнешнийИсточникДанных") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 52;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКомандыКонтекстногоМеню(ОбъектМетаданных)
	
	Меню = Элементы.СтруктураМетаданных.КонтекстноеМеню;
	УстановитьВидимостьКнопокКонтекстногоМеню(Меню);
	
	Если Не (ЭтоСлужебныйЭлемент(ОбъектМетаданных)
		Или ЭтоОбщийУзелКонфигурации(ОбъектМетаданных)) Тогда
	
		Элементы.ДобавитьНовыйОбъект.Заголовок = ПредставлениеКнопкиДобавитьОбъект(ОбъектМетаданных);
		Элементы.ДобавитьНовыйОбъект.Видимость = Истина;
		
	КонецЕсли;

	Если ОбъектМетаданных.ТабличнаяЧасть Тогда
		Элементы.ДобавитьРеквизит.Видимость = Истина;
	КонецЕсли;
		
	Если ОбъектМетаданных.МенеджерОбъектов = Ложь 
		И (ЭтоЭлементУзлаОбщие(ОбъектМетаданных)
		Или ЭтоПрикладнойОбъект(ОбъектМетаданных)) Тогда
		
		Если Не (ОбъектМетаданных.Класс = "КритерийОтбора"
		Или ОбъектМетаданных.Класс = "ПакетXDTO"
		Или ОбъектМетаданных.Класс = "WebСервис"
		Или ОбъектМетаданных.Класс = "HTTPСервис"
		Или ОбъектМетаданных.Класс = "РегистрСведений"
		Или ОбъектМетаданных.Класс = "РегистрНакопления"
		Или ОбъектМетаданных.Класс = "РегистрБухгалтерии"
		Или ОбъектМетаданных.Класс = "РегистрРасчета") Тогда
			
			Элементы.ДобавитьОбъектВВидеТипа.Видимость = Истина;
			
		КонецЕсли;
						
		Если Не ОбъектМетаданных.Класс = "Константа" Тогда						
			Элементы.ПоказатьСвойстваОбъекта.Видимость = Истина;
		КонецЕсли;
				
	КонецЕсли;

	Если Не ОбъектМетаданных.МенеджерОбъектов И ЭтоПрикладнойОбъект(ОбъектМетаданных) Тогда
	
		Элементы.ДобавитьОписаниеОбъекта.Видимость = Истина;
		
	КонецЕсли;
	
	Если Не (ОбъектМетаданных.МенеджерОбъектов
		Или  ЭтоСлужебныйЭлемент(ОбъектМетаданных)) Тогда
			
		Элементы.ДобавитьВИзбранные.Видимость = Истина;
		
	КонецЕсли;
	
	Если (ОбъектМетаданных.Класс = "ОбщаяКартинка" И ОбъектМетаданных.МенеджерОбъектов) Тогда
		Элементы.ПоказатьСвойстваОбъекта.Видимость = Истина;
	КонецЕсли;
	
	Если ОбъектМетаданных.Класс = "Форма" И Не ПустаяСтрока(ОбъектМетаданных.ПолноеИмя) Тогда
		
//		Элементы.КнопкаПолучитьСтруктуруФормы.Видимость = Истина;
//		Элементы.КнопкаОткрытьНовуюИнтерактивнуюФорму.Видимость = Истина;
//		Элементы.КнопкаОткрытьФормуЗаписанногоОбъекта.Видимость = Истина;
//		Элементы.КнопкаДобавитьСсылкуНаОткрытуюФорму.Видимость = Истина;
//		Элементы.КнопкаОткрытьИнтерактивнуюФормуСоСкриптом.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПредставлениеКнопкиДобавитьОбъект(ОбъектМетаданных)
	
	КлассОбъекта = ОбъектМетаданных.Класс; 
		
	СложноеПредставлениеКласса = Новый Структура();
	СложноеПредставлениеКласса.Вставить("Подсистема", "подсистему");
	СложноеПредставлениеКласса.Вставить("ПодпискаНаСобытие", "Подписку на событие");
	СложноеПредставлениеКласса.Вставить("ФункциональнаяОпция", "Функциональную опцию");
	СложноеПредставлениеКласса.Вставить("ОбщаяФорма", "Общую форму");
	СложноеПредставлениеКласса.Вставить("ОбщаяКоманда", "Общую команду");
	СложноеПредставлениеКласса.Вставить("ГруппаКоманд", "Группу команд");
	СложноеПредставлениеКласса.Вставить("ОбщаяКартинка", "Общую картинку");
	СложноеПредставлениеКласса.Вставить("ПакетXDTO", "Пакет XDTO");
	СложноеПредставлениеКласса.Вставить("HTTPСервис", "HTTP сервис");
	СложноеПредставлениеКласса.Вставить("WSСсылка", "WS ссылку");
	СложноеПредставлениеКласса.Вставить("Константа", "Константу");
	СложноеПредставлениеКласса.Вставить("Константа", "Константу");
	СложноеПредставлениеКласса.Вставить("Обработка", "Обработку");
	СложноеПредставлениеКласса.Вставить("Задача", "Задачу");
	СложноеПредставлениеКласса.Вставить("ТабличнаяЧасть", "Табличную часть");
	СложноеПредставлениеКласса.Вставить("Форма", "Форму");
	СложноеПредставлениеКласса.Вставить("Команда", "Команду");
	
	Если СложноеПредставлениеКласса.Свойство(КлассОбъекта) Тогда
		Возврат "Добавить " + СложноеПредставлениеКласса[КлассОбъекта];
	КонецЕсли;
	
	ПредставлениеКласса = Лев(КлассОбъекта, 1);
	Для НомерСимвола = 2 По СтрДлина(КлассОбъекта) Цикл
		
		СимволСтроки = Сред(КлассОбъекта, НомерСимвола, 1); 
		Если СимволСтроки = ВРег(СимволСтроки) Тогда 
			ПредставлениеКласса = ПредставлениеКласса + " ";
		КонецЕсли;
		
		ПредставлениеКласса = ПредставлениеКласса + НРег(СимволСтроки);
		
	КонецЦикла;
	
	Возврат "Добавить " + ПредставлениеКласса;
	
КонецФункции // НастроитьКомандыКонтекстногоМеню()

&НаКлиенте
Процедура УстановитьВидимостьКнопокКонтекстногоМеню(Меню)
	
	Для Каждого КнопкаМеню Из Меню.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(КнопкаМеню) = Тип("КнопкаФормы") Тогда
			КнопкаМеню.Видимость = Ложь;
		Иначе
			
			УстановитьВидимостьКнопокКонтекстногоМеню(КнопкаМеню);
				
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоЭлементУзлаОбщие(ОбъектМетаданных)
	Возврат ОбъектМетаданных.Класс = "ПланОбмена"
		Или ОбъектМетаданных.Класс = "КритерийОтбора"
		Или ОбъектМетаданных.Класс = "ПакетXDTO"
		Или ОбъектМетаданных.Класс = "WebСервис"
		Или ОбъектМетаданных.Класс = "HTTPСервис";
КонецФункции

&НаКлиенте
Функция ЭтоОбщийУзелКонфигурации(ОбъектМетаданных)
	
	Возврат ОбъектМетаданных.Класс = "Конфигурация"
		Или ОбъектМетаданных.Класс = "МодульОбычногоПриложения"
		Или ОбъектМетаданных.Класс = "МодульУправляемогоПриложения"
		Или ОбъектМетаданных.Класс = "МодульВнешнегоСоединения"
		Или ОбъектМетаданных.Класс = "МодульСеанса"
		Или ОбъектМетаданных.Класс = "Общие";
		
КонецФункции

&НаКлиенте
Функция ЭтоСлужебныйЭлемент(ОбъектМетаданных)
	
	Возврат ОбъектМетаданных.Класс = "Буфер"
		Или  ОбъектМетаданных.Класс = "Расширения";
		
КонецФункции

&НаКлиенте
Функция ЭтоПрикладнойОбъект(ОбъектМетаданных)
	
	Возврат ОбъектМетаданных.Класс = "Справочник"
		Или ОбъектМетаданных.Класс = "Константа"
		Или ОбъектМетаданных.Класс = "Документ"
		Или ОбъектМетаданных.Класс = "ЖурналДокументов"
		Или ОбъектМетаданных.Класс = "Перечисление"
		Или ОбъектМетаданных.Класс = "Отчет"
		Или ОбъектМетаданных.Класс = "Обработка"
		Или ОбъектМетаданных.Класс = "ПланВидовХарактеристик"
		Или ОбъектМетаданных.Класс = "ПланСчетов"
		Или ОбъектМетаданных.Класс = "ПланВидовРасчета"
		Или ОбъектМетаданных.Класс = "РегистрСведений"
		Или ОбъектМетаданных.Класс = "РегистрНакопления"
		Или ОбъектМетаданных.Класс = "РегистрБухгалтерии"
		Или ОбъектМетаданных.Класс = "РегистрРасчета"
		Или ОбъектМетаданных.Класс = "БизнесПроцесс"
		Или ОбъектМетаданных.Класс = "Задача"
		Или ОбъектМетаданных.Класс = "ВнешнийИсточникДанных";
	
КонецФункции

&НаСервере
Функция ЭтоОбъектСсылочногоТипа(ОбъектМетаданных)
	
	Возврат ОбъектМетаданных.Класс = "ПланОбмена"
		Или ОбъектМетаданных.Класс = "Справочник"
		Или ОбъектМетаданных.Класс = "Документ"
		Или ОбъектМетаданных.Класс = "Перечисление"
		Или ОбъектМетаданных.Класс = "ПланВидовХарактеристик"
		Или ОбъектМетаданных.Класс = "ПланСчетов"
		Или ОбъектМетаданных.Класс = "ПланВидовРасчета"
		Или ОбъектМетаданных.Класс = "БизнесПроцесс"
		Или ОбъектМетаданных.Класс = "Задача";
	
КонецФункции

#КонецОбласти // Процедуры_работы_со_структурой_метаданных

#Область ДобавлениеКонтекстаВДокумент

&НаКлиенте
Процедура ДобавитьДанныеОбъектаВРедактор(СтрокаЭлементаВыборка, ВВидеТипа)
	
	ОбъектМетаданных = СтруктураМетаданных.НайтиПоИдентификатору(СтрокаЭлементаВыборка);
	СкопироватьДанныеОбъектаМетаданныхВБуфер(ОбъектМетаданных);
	
	ПредставлениеОбъекта = МаркированноеПредставлениеОбъектаМетаданных(ОбъектМетаданных, ВВидеТипа);
	
	МаркерФорматирования = Новый Структура("Маркер, Представление, Объект", ПредставлениеОбъекта.Текст, 
		ПредставлениеОбъекта.ВыделяемыйФрагмент, ОбъектМетаданных);
		
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);
	
КонецПроцедуры // ДобавитьДанныеОбъектаВРедактор()

&НаКлиенте
Функция МаркированноеПредставлениеОбъектаМетаданных(ОбъектМетаданных, ВВидеТипа, ВыделятьЖирнымШрифтом = Ложь,
	 Условие = "", 
	ВыводитьБлокСкрипта = Ложь)
		
	МаркированныйТекст = Новый Структура("Текст, ВыделяемыйФрагмент");
	МаркированныйТекст.ВыделяемыйФрагмент = "";
	
	Если ОбъектМетаданных.Класс = "Форма" Тогда
		
		ОбъектВладелецФормы = ОбъектМетаданных.ПолучитьРодителя().ПолучитьРодителя();
		Если Не ОбъектВладелецФормы = Неопределено Тогда
			ПредставлениеОбъетка = ОбъектВладелецФормы.Синоним;
		Иначе
			ПредставлениеОбъетка = "";
		КонецЕсли; 
		
		Если Условие = "ПереходитьТолькоНаОткрытыеФормы" Тогда
			МаркированныйТекст.Текст = "ФормаОткрыта=[" + ОбъектМетаданных.ПолноеИмя + "; %%" 
				+ ?(ВыводитьБлокСкрипта, " {Сообщить(""Это блок для скрипат"")}", "") + "]";
		Иначе
			МаркированныйТекст.Текст = "Форма=[" + ОбъектМетаданных.ПолноеИмя + "; %%" 
				+ ?(ВыводитьБлокСкрипта, " {Сообщить(""Это блок для скрипат"")}", "") + "]";
		КонецЕсли;
		
		МаркированныйТекст.ВыделяемыйФрагмент = ПредставлениеОбъетка;
		
	Иначе
		
		МаркированныйТекст.Текст = ОбъектМетаданных.ПолноеИмя;
		Если ОбъектМетаданных.Класс = "Реквизит"
			Или ОбъектМетаданных.Класс = "Измерение"
			Или ОбъектМетаданных.Класс = "Ресурс" Тогда
			
			Если ТипЗнч(ОбъектМетаданных.Тип) = Тип("Строка") Тогда
				МаркированныйТекст.Текст = МаркированныйТекст.Текст + ":{" + ОбъектМетаданных.Тип + "}"
			ИначеЕсли ТипЗнч(ОбъектМетаданных.Тип) = Тип("СписокЗначений") Тогда
				
				КоличествоТипов = ОбъектМетаданных.Тип.Количество();
				ИндексТипа = 1;
				
				МаркированныйТекст.Текст = МаркированныйТекст.Текст + ":{";
				Для Каждого Тип Из ОбъектМетаданных.Тип Цикл
					МаркированныйТекст.Текст = МаркированныйТекст.Текст + Тип.Значение 
						+ ?(КоличествоТипов = ИндексТипа, "", "; ");
					ИндексТипа = ИндексТипа + 1;
				КонецЦикла;
				
				МаркированныйТекст.Текст = МаркированныйТекст.Текст + "}";
				
			КонецЕсли;
			
		Иначе
			
			Если ВВидеТипа Тогда
				Если ЗначениеЗаполнено(ОбъектМетаданных.Тип) Тогда
					МаркированныйТекст.Текст = ":{" + ОбъектМетаданных.Тип + "}"
				Иначе
					МаркированныйТекст.Текст = ":{" + МаркированныйТекст.Текст + "}"
				КонецЕсли;	
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВыделятьЖирнымШрифтом Тогда
			МаркированныйТекст.Текст = "**" + МаркированныйТекст.Текст + "**%%";
		Иначе
			МаркированныйТекст.Текст = МаркированныйТекст.Текст + "%%";
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат МаркированныйТекст;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьМаркерВТекст(СтруктураМаркера, ВыделятьДобавленныйТекст)
	
	МаркерТекста = СтруктураМаркера.Маркер;
	ПредставлениеМаркера = СтруктураМаркера.Представление;
	
	Если ПредставлениеМаркера = "Объект метаданных" Тогда
		ПредставлениеМаркера = ИмяОбъектаМетаданных(СтруктураМаркера.Объект);
	КонецЕсли; 
	
	ПолеРедактора = Элементы.РедакторТекстовогоДокумента;
	
	// Определяем выделенный кусок кода
	ВыделенныйТекст = ПолеРедактора.ВыделенныйТекст;
	
	Если ПустаяСтрока(ВыделенныйТекст) Тогда
		
		// Получаем позцию курсора
		НачалоСтроки  = 0;
		НачалоКолонки = 0;
		КонецСтроки  = 0;
		КонецКолонки = 0;
		
		ПолеРедактора.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
		
		// Добавляем новый текст
		НачалоМаркированногоТекста = Найти(МаркерТекста, "%%"); 
		ДлинаТекстаПредставления   = СтрДлина(ПредставлениеМаркера);
		
		МаркированныйТекст = СтрЗаменить(МаркерТекста, "%%", ПредставлениеМаркера);
		РедактируемыйДокумент = РедактируемыйДокумент + МаркированныйТекст;
		
		ЭтаФорма.ТекущийЭлемент = ПолеРедактора;
		ПолеРедактора.ВыделенныйТекст = МаркированныйТекст;
		Если ВыделятьДобавленныйТекст Тогда
			
			// Выделяем текст для быстрой замены
			НачалоВыделенияТекста = НачалоКолонки + НачалоМаркированногоТекста - 1;
			ПолеРедактора.УстановитьГраницыВыделения(НачалоСтроки, НачалоВыделенияТекста, 
				КонецСтроки, НачалоВыделенияТекста + ДлинаТекстаПредставления);
				
		КонецЕсли;
			
	Иначе
		
		ТекстОбрамленныйМаркерами = СтрЗаменить(МаркерТекста, "%%", ВыделенныйТекст);
		ПолеРедактора.ВыделенныйТекст = ТекстОбрамленныйМаркерами;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Функция ИмяОбъектаМетаданных(ОбъектМетаданных)
	
	ИмяОбъекта = ИмяКлассаОбъекта(ОбъектМетаданных);
	
	Возврат ИмяОбъекта;
	
КонецФункции // ИмяОбъектаМетаданных()

&НаСервереБезКонтекста
Функция ИмяКлассаОбъекта(ОбъектМетаданных)
	
	КлассОбъекта = ОбъектМетаданных.Тип;
	Если Не ЗначениеЗаполнено(КлассОбъекта) Тогда
		Если ЗначениеЗаполнено(ОбъектМетаданных.Родитель.Тип) Тогда
			КлассОбъекта = ОбъектМетаданных.Родитель.Тип;
		Иначе
			Возврат "." + ОбъектМетаданных.Имя;
		КонецЕсли;		
	КонецЕсли; 
	
	ИндексЗначения = Перечисления.иид_ТипыОбъектовМетаданных.Индекс(КлассОбъекта);
	ИмяКласса = Метаданные.Перечисления.иид_ТипыОбъектовМетаданных.ЗначенияПеречисления[ИндексЗначения].Имя;
	
	Возврат ИмяКласса + "." + ОбъектМетаданных.Имя;
	
КонецФункции // ИмяКлассаОбъекта()

#КонецОбласти

#Область РаботаСБуферомСтруктуры

&НаКлиенте
Процедура СкопироватьДанныеОбъектаМетаданныхВБуфер(УзелЭлементаВыборка)
	
	УзелБуфераОбъектов = СтруктураМетаданных.ПолучитьЭлементы().Получить(0);
	
	РодительОбъекта = УзелЭлементаВыборка.ПолучитьРодителя();
	ОбъектМетаданныхИсточник = ОпределитьОбъектМетаданныхВыбранногоЭлемента(УзелЭлементаВыборка, РодительОбъекта);
	Если РодительОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяМенеджера = РодительОбъекта.Класс;
	
	ЭлементыБуфера = УзелБуфераОбъектов.ПолучитьЭлементы();
	УзелРазмещенияОбъектаВБуфере = УзелРазмещенияОбъектаВБуфере(ЭлементыБуфера, ИмяМенеджера, РодительОбъекта);
	СкопироватьВыбранныйОбъектВБуфер(УзелРазмещенияОбъектаВБуфере, ОбъектМетаданныхИсточник);
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьОбъектМетаданныхВыбранногоЭлемента(УзелЭлементаВыборка, РодительОбъекта)
	
	ВыбранныйОбъект = УзелЭлементаВыборка;
	РодительОбъекта = УзелЭлементаВыборка.ПолучитьРодителя();
	Пока Не РодительОбъекта = Неопределено И Не РодительОбъекта.МенеджерОбъектов Цикл
		ВыбранныйОбъект = РодительОбъекта;
		РодительОбъекта = РодительОбъекта.ПолучитьРодителя();
	КонецЦикла;
	
	Возврат ВыбранныйОбъект;
	
КонецФункции

&НаКлиенте
Функция УзелРазмещенияОбъектаВБуфере(ЭлементыБуфера, ИмяМенеджера, РодительОбъекта)
	
	УзелРазмещенияВБуфере = Неопределено;
	Для Каждого ЭлементБуфера Из ЭлементыБуфера Цикл
		Если ЭлементБуфера.Класс = ИмяМенеджера Тогда
			УзелРазмещенияВБуфере = ЭлементБуфера;
		КонецЕсли;
	КонецЦикла;
	
	Если УзелРазмещенияВБуфере = Неопределено Тогда
		УзелРазмещенияВБуфере = ЭлементыБуфера.Добавить();
		ЗаполнитьЗначенияСвойств(УзелРазмещенияВБуфере, РодительОбъекта);
	КонецЕсли;
	
	Возврат УзелРазмещенияВБуфере;
	
КонецФункции

&НаКлиенте
Процедура СкопироватьВыбранныйОбъектВБуфер(УзелРазмещенияВБуфере, ВыбранныйОбъект)
	
	ОбъектыУзлаБуфера = УзелРазмещенияВБуфере.ПолучитьЭлементы();
	Для Каждого ОбъектУзлаБуфера Из ОбъектыУзлаБуфера Цикл
		Если ОбъектУзлаБуфера.Имя = ВыбранныйОбъект.Имя Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	КопияОбъектаВБуфере = ОбъектыУзлаБуфера.Добавить();
	ЗаполнитьЗначенияСвойств(КопияОбъектаВБуфере, ВыбранныйОбъект);
	
	СкопироватьПодчиненныеЭлементыОбъекта(КопияОбъектаВБуфере, ВыбранныйОбъект.ПолучитьЭлементы());
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПодчиненныеЭлементыОбъекта(ОбъектПриемник, ПодчиненныеЭлементыИсходника)
	
	Если ПодчиненныеЭлементыИсходника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ПодчиненныйЭлементИсходника Из ПодчиненныеЭлементыИсходника Цикл
		
		ПодчиненыйЭлементПриемника = ОбъектПриемник.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(ПодчиненыйЭлементПриемника, ПодчиненныйЭлементИсходника);
		
		СкопироватьПодчиненныеЭлементыОбъекта(ПодчиненыйЭлементПриемника, 
		ПодчиненныйЭлементИсходника.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура УстановитьВидимостьКолонкиСиноним()
	Элементы.ПоказатьСинонимОбъектаМетаданных.Пометка = Не Элементы.ПоказатьСинонимОбъектаМетаданных.Пометка;
	Элементы.СтруктураМетаданныхСиноним.Видимость = Элементы.ПоказатьСинонимОбъектаМетаданных.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовыйОбъектВМенеджерОбъектов()
	
	ОбъектМетаданных = ТекущийОбъектМетаданных();
	УзелРазмещенияНовогоОбъекта = УзелРазмещенияНовогоОбъекта(ОбъектМетаданных);
		
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИдентификаторВладельца", УзелРазмещенияНовогоОбъекта.ПолучитьИдентификатор());
	Если Не ПустаяСтрока(ОбъектМетаданных.ПолноеИмя) Тогда
		ПараметрыФормы.Вставить("ПолноеИмяВладельца", ОбъектМетаданных.ПолноеИмя);
	Иначе
		ПараметрыФормы.Вставить("ПолноеИмяВладельца", ОбъектМетаданных.Класс);
	КонецЕсли;	
	
	ПараметрыФормы.Вставить("Класс", ОбъектМетаданных.Класс);
	ПараметрыФормы.Вставить("УстановитьТип", ТребуетсяУстановитьТип(ОбъектМетаданных));
	
	ОткрытьФормуРедактораОбъекта(ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Функция УзелРазмещенияНовогоОбъекта(ОбъектМетаданных)
	
	Если ОбъектМетаданных.Класс = "Подсистема" Тогда
		Возврат ОбъектМетаданных;
	КонецЕсли;
	
	РодительОбъекта = ОбъектМетаданных.ПолучитьРодителя();
	Если ОбъектМетаданных.МенеджерОбъектов Тогда
		Возврат ОбъектМетаданных;
	ИначеЕсли РодительОбъекта.МенеджерОбъектов Тогда
		Возврат РодительОбъекта;	
	ИначеЕсли ОбъектМетаданных.МенеджерПодчиненныхЭлементов Тогда
		Возврат ОбъектМетаданных;
	ИначеЕсли РодительОбъекта.МенеджерПодчиненныхЭлементов Тогда
		Возврат РодительОбъекта;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ТребуетсяУстановитьТип(ОбъектМетаданных)
	
	ТипизированныеОбъекты = Новый СписокЗначений();
	ТипизированныеОбъекты.Добавить("ПараметрСеанса");
	ТипизированныеОбъекты.Добавить("ОбщийРеквизит");
	ТипизированныеОбъекты.Добавить("Константа");
	ТипизированныеОбъекты.Добавить("Реквизит");
	ТипизированныеОбъекты.Добавить("РеквизитАдресации");
	ТипизированныеОбъекты.Добавить("Измерение");
	ТипизированныеОбъекты.Добавить("Ресурс");
	
	ТипизированныйОбъект = ТипизированныеОбъекты.НайтиПоЗначению(ОбъектМетаданных.Класс);
	Если ТипизированныйОбъект = Неопределено Тогда 
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
	  
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуРедактораОбъекта(ПараметрыФормы)
	
    ОткрытьФорму("ВнешняяОбработка.doc_editor_1C.Форма.РедакторОбъектов", ПараметрыФормы);
	
КонецПроцедуры

// Функционал добавления нового объекта в структуру
&НаКлиенте
Процедура ДобавитьНовыйОбъектВСтруктуруМетаданных(ДанныеНовогоОбъекта)
		
	ОбъектМетаданных = СтруктураМетаданных.НайтиПоИдентификатору(ДанныеНовогоОбъекта.ИдентификаторВладельца);
	НовыйОбъект = ОбъектМетаданных.ПолучитьЭлементы().Добавить();
	НовыйОбъект.Класс = ДанныеНовогоОбъекта.Класс;
	НовыйОбъект.Имя = ДанныеНовогоОбъекта.Имя;
	НовыйОбъект.Синоним = ДанныеНовогоОбъекта.Имя;
	НовыйОбъект.ПолноеИмя = ДанныеНовогоОбъекта.ПолноеИмя;
	НовыйОбъект.Новый = Истина;
			
	НастроитьСвойстваНовогоОбъекта(НовыйОбъект, ДанныеНовогоОбъекта);			
			
	ПереместитьВИзбранное(НовыйОбъект);			
	Элементы.СтруктураМетаданных.Развернуть(НовыйОбъект.ПолучитьИдентификатор());
			
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСвойстваНовогоОбъекта(НовыйОбъект, ДанныеНовогоОбъекта)
	
	Если (НовыйОбъект.Класс = "ПараметрСеанса" 
		Или НовыйОбъект.Класс = "ОбщийРеквизит"
		Или НовыйОбъект.Класс = "Реквизит") 
		Или (НовыйОбъект.Класс = "Константа") Тогда
		
		НовыйОбъект.Тип = ДанныеНовогоОбъекта.Типы;
		
	ИначеЕсли (НовыйОбъект.Класс = "Справочник" 
		Или НовыйОбъект.Класс = "Документ"
		Или НовыйОбъект.Класс = "Отчет"
		Или НовыйОбъект.Класс = "Обработка"
		Или НовыйОбъект.Класс = "ПланВидовХарактеристик"
		Или НовыйОбъект.Класс = "ПланСчетов"
		Или НовыйОбъект.Класс = "ПланВидовРасчета"
		Или НовыйОбъект.Класс = "БизнесПроцесс"
		Или НовыйОбъект.Класс = "Задача") Тогда
		
		Если (НовыйОбъект.Класс = "Задача") Тогда
			ДобавитьМенеджерРеквизитовАдресации(НовыйОбъект);
		КонецЕсли;
			
		ДобавитьМенеджерРеквизитов(НовыйОбъект);
		ДобавитьМенеджерТабличныхЧастей(НовыйОбъект);
		ДобавитьМенеджерФорм(НовыйОбъект);
		ДобавитьМенеджерКоманд(НовыйОбъект);
		ДобавитьМенеджерМакетов(НовыйОбъект);
		
	ИначеЕсли (НовыйОбъект.Класс = "Перечисление") Тогда
		
		ДобавитьМенеджерЗначений(НовыйОбъект);
		ДобавитьМенеджерФорм(НовыйОбъект);
		ДобавитьМенеджерКоманд(НовыйОбъект);
		ДобавитьМенеджерМакетов(НовыйОбъект);
		
	ИначеЕсли (НовыйОбъект.Класс = "РегистрСведений"
		Или НовыйОбъект.Класс = "РегистрНакопления"
		Или НовыйОбъект.Класс = "РегистрБухгалтерии"
		Или НовыйОбъект.Класс = "РегистрРасчета") Тогда
		
		ДобавитьМенеджерИзмерений(НовыйОбъект);
		ДобавитьМенеджерРесурсов(НовыйОбъект);
		ДобавитьМенеджерРеквизитов(НовыйОбъект);
		ДобавитьМенеджерФорм(НовыйОбъект);
		ДобавитьМенеджерКоманд(НовыйОбъект);
		ДобавитьМенеджерМакетов(НовыйОбъект);
		
	ИначеЕсли НовыйОбъект.Класс = "Реквизит" Тогда
		НовыйОбъект.Тип = ДанныеНовогоОбъекта.Типы;
	КонецЕсли;
	
	УстановитьИконкуОбъектаМетаданных(НовыйОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВИзбранное(НовыйОбъект)
	
	СкопироватьДанныеОбъектаМетаданныхВБуфер(НовыйОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТипыМетаданных(ФормаРедактор)
	
	ФормаРедактор.ЗаполнитьТипыДанных(СтруктураМетаданных);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСИнтерактивнойФормой

&НаКлиенте
Процедура ПолучитьСтруктуруЭлементовФормы(ОбъектМетаданныхФорма, ОткрытьФорму, ОткрытьФормуНовогоОбъекта)
	
	Если Не ОбъектМетаданныхФорма.Класс = "Форма" Или ПустаяСтрока(ОбъектМетаданныхФорма.ПолноеИмя) Тогда
		Возврат;
	КонецЕсли; 
		
	СтруктураЭлементовИнтерактивнойФормы.ПолучитьЭлементы().Очистить();
		
	Если ОбъектМетаданныхФорма.СтруктураЭлементовФормы = Неопределено Тогда
		
		ВременнаяФормаИсточник = ПолучитьИнтерактивнуюФорму(ОбъектМетаданныхФорма, Истина);
		Если ВременнаяФормаИсточник = Неопределено Тогда
			Сообщить("Не удалось получить доступ к форме объекта");
			Возврат;
		КонецЕсли;
		
//		УстановитьВременныеОбработчикиСобытийФормы(ВременнаяФормаИсточник);
		ЗаполнитьСтруктуруЭлементовИнтерактивнойФормы(ВременнаяФормаИсточник);
		ВременнаяФормаИсточник = Неопределено;
		
		ФормаИсточник = ИнтерактивнаяФорма(
			ОбъектМетаданныхФорма, ОткрытьФорму, ОткрытьФормуНовогоОбъекта, Истина);
			
		ОбработатьПодчиненныеЭлементыФормы(ФормаИсточник);
		
//		ОбъектМетаданныхФорма.СтруктураЭлементовФормы = 
//		СохранитьСтруктуруЭлементовФормы(ОбъектМетаданныхФорма.ПолучитьИдентификатор());	
		
	Иначе
		ФормаИсточник = ИнтерактивнаяФорма(
			ОбъектМетаданныхФорма, ОткрытьФорму, ОткрытьФормуНовогоОбъекта, Истина);	
	КонецЕсли; 
	
//	ПоказатьСтруктуруЭлементовФормы(ОбъектМетаданныхФорма);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьСтруктуруЭлементовФормы(ИдентификаторОбъекта)
	
	ОбъектМетаданныхФорма = СтруктураМетаданных.НайтиПоИдентификатору(ИдентификаторОбъекта);
	
	ДеревоЗначений = РеквизитФормыВЗначение("СтруктураЭлементовИнтерактивнойФормы", Тип("ДеревоЗначений"));
	ОбъектМетаданныхФорма.СтруктураЭлементовФормы = ДеревоЗначений;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИнтерактивнуюФорму(ОбъектМетаданныхФорма, ФормаНовогоОбъекта)
	
	ИнтерактивнаяФорма = Неопределено;
	//Попытка
	//	ИнтерактивнаяФорма = ПолучитьФорму(ОбъектМетаданныхФорма.ПолноеИмя);
	//Исключение
	//	
	//	Если (Найти(ОбъектМетаданныхФорма.ПолноеИмя, "ВнешняяОбработка") > 0 
	//		Или Найти(ОбъектМетаданныхФорма.ПолноеИмя, "ВнешнийОтчет") > 0) Тогда
	//		
	//		Сообщить("Не удалось найти форму, расширения. Убедитель что расширение добавлено в редактор");
	//		
	//	КонецЕсли;
	//	
	//КонецПопытки;
	
	//Возврат ИнтерактивнаяФорма;

	Если (Найти(ОбъектМетаданныхФорма.ПолноеИмя, "ВнешняяОбработка") > 0 
		Или Найти(ОбъектМетаданныхФорма.ПолноеИмя, "ВнешнийОтчет") > 0) Тогда
		
		Если Не ОбъектМетаданныхФорма.Свойство("ФайлРасширения") Тогда
			
			ОбъектМетаданныхФорма = ПолучитьУзелРасширенияПоПолномуИмени(ОбъектМетаданныхФорма.ПолноеИмя);
			Если ОбъектМетаданныхФорма = Неопределено  Тогда
				
				Сообщить("Не удалось найти форму, убедитесь что расширение зарегистрировано в редакторе
				|Добавьте расширение в соствав редактора");
				
				Возврат Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОбъектМетаданныхФорма.Тип = "Обычная" Тогда
			
#Если ТолстыйКлиентОбычноеПриложение Тогда
				
			ИмяФайла = ОбъектМетаданныхФорма.ПолучитьРодителя().ПолучитьРодителя().ФайлРасширения;
			
			Если Найти(ОбъектМетаданныхФорма.ПолноеИмя, "ВнешняяОбработка") > 0 Тогда
				ИнтерактивнаяФорма = ВнешниеОбработки.ПолучитьФорму(ИмяФайла, ОбъектМетаданныхФорма.Имя);
			ИначеЕсли Найти(ОбъектМетаданныхФорма.ПолноеИмя, "ВнешнийОтчет") > 0 Тогда
				ИнтерактивнаяФорма = ВнешниеОтчеты.ПолучитьФорму(ИмяФайла, ОбъектМетаданныхФорма.Имя);
			КонецЕсли;
			
#ИначеЕсли Не ТолстыйКлиентОбычноеПриложение Тогда
			
			Возврат Неопределено;
			
#КонецЕсли
		
		Иначе

#Если ТолстыйКлиентУправляемоеПриложение Тогда
			
		ИнтерактивнаяФорма = ПолучитьФорму(ОбъектМетаданныхФорма.ПолноеИмя);
			
#ИначеЕсли Не ТолстыйКлиентУправляемоеПриложение  Тогда
			
		Возврат Неопределено;
			
#КонецЕсли

		КонецЕсли;
		
	Иначе
						
		ПараметрыФормы = Новый Структура();
		Если (ФормаНовогоОбъекта = Ложь) Тогда
			
			ИмяОбъекта = ПолноеИмяОбъектаФормы(ОбъектМетаданныхФорма);
			ОбъектСсылка = ОткрытьФормуМодально(ИмяОбъекта + ".ФормаВыбора", Новый Структура("РежимВыбора", Истина));
			
			ПараметрыФормы.Вставить("Ключ", ОбъектСсылка);
			
		КонецЕсли;
		
		ИнтерактивнаяФорма = ПолучитьФорму(ОбъектМетаданныхФорма.ПолноеИмя, ПараметрыФормы);
		
	КонецЕсли;
	
	Возврат ИнтерактивнаяФорма;
	
КонецФункции

&НаКлиенте
Функция ПолучитьУзелРасширенияПоПолномуИмени(ПолноеИмяФормыРасширения)
	
	КонецИмени = Найти(ПолноеИмяФормыРасширения, ".Форма") - 1;
	ПолноеИмяРасширения = Лев(ПолноеИмяФормыРасширения, КонецИмени);
	
	УзелВыбранныеОбъекты = СтруктураМетаданных.НайтиПоИдентификатору(0);
	Если Не УзелВыбранныеОбъекты = Неопределено Тогда
		Для Каждого УзелМенеджер Из УзелВыбранныеОбъекты.ПолучитьЭлементы() Цикл
			Если УзелМенеджер.Имя = "Расширения" Тогда
				Для Каждого УзелОбъекта Из УзелМенеджер.ПолучитьЭлементы() Цикл
					Если УзелОбъекта.ПолноеИмя = ПолноеИмяРасширения Тогда
						Для Каждого УзелГруппыСвойств Из УзелОбъекта.ПолучитьЭлементы() Цикл
							Если УзелГруппыСвойств.Имя = "Формы" Тогда
								Для Каждого УзелФормы Из УзелГруппыСвойств.ПолучитьЭлементы() Цикл
									Если УзелФормы.ПолноеИмя = ПолноеИмяФормыРасширения Тогда
										Возврат УзелФормы;
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Возврат Неопределено;
			
КонецФункции

&НаКлиенте
Функция ПолноеИмяОбъектаФормы(ОбъектМетаданныхФорма)
	
	Если Не ОбъектМетаданныхФорма.Класс = "Форма" И Не ПустаяСтрока(ОбъектМетаданныхФорма.ПолноеИмя) Тогда
		Возврат "";
	КонецЕсли; 
	
	Возврат ОбъектМетаданныхФорма.ПолучитьРодителя().ПолучитьРодителя().ПолноеИмя;
	
КонецФункции 

&НаКлиенте
Процедура УстановитьВременныеОбработчикиСобытийФормы(Форма)
	
	СобытияФорм = Новый Структура();
	
	СобытияФорм.Вставить("ВнешнееСобытие",               "Маркер_Форма_ВнешнееСобытие");
	СобытияФорм.Вставить("ПередОткрытием",               "Маркер_Форма_ПередОткрытием");
	СобытияФорм.Вставить("ПриОткрытии",                  "Маркер_Форма_ПриОткрытии");
	СобытияФорм.Вставить("ПриПовторномОткрытии",         "Маркер_Форма_ПриПовторномОткрытии");
	СобытияФорм.Вставить("ОбработкаВыбора",              "Маркер_Форма_ОбработкаВыбора");
	СобытияФорм.Вставить("ОбработкаОповещения",          "Маркер_Форма_ОбработкаОповещения");
	СобытияФорм.Вставить("ОбработкаПроверкиЗаполнения",  "Маркер_Форма_ОбработкаПроверкиЗаполнения");
	СобытияФорм.Вставить("ОбновлениеОтображения",        "Маркер_Форма_ОбновлениеОтображения");
	СобытияФорм.Вставить("ОбработкаАктивизацииОбъекта",  "Маркер_Форма_ОбработкаАктивизацииОбъекта");
	СобытияФорм.Вставить("ПриСменеСтраницы",             "Маркер_Форма_ПриСменеСтраницы");
	СобытияФорм.Вставить("ПриИзмененииДанных",           "Маркер_Форма_ПриИзмененииДанных");
	СобытияФорм.Вставить("ОбработкаЗаписиНовогоОбъекта", "Маркер_Форма_ОбработкаЗаписиНовогоОбъекта");
	СобытияФорм.Вставить("ПередЗаписью",                 "Маркер_Форма_ПередЗаписью");
	СобытияФорм.Вставить("ПриЗаписи",                    "Маркер_Форма_ПриЗаписи");
	СобытияФорм.Вставить("ПослеЗаписи",                  "Маркер_Форма_ПослеЗаписи");
	СобытияФорм.Вставить("ПередЗакрытием",               "Маркер_Форма_ПередЗакрытием");
	СобытияФорм.Вставить("ПриЗакрытии",                  "Маркер_Форма_ПриЗакрытии");
	
	// Собираем список событий формы
	Для Каждого Событие Из СобытияФорм Цикл
		
		Попытка
			
			Форма.УстановитьДействие(Событие.Ключи, Неопределено);
			
		Исключение
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ИнтерактивнаяФорма(ОбъектМетаданныхФорма, ОткрытьФорму, 
	ОткрытьФормуНовогоОбъекта = Неопределено, АктивизироватьФорму = Истина)
	
	Если Не ОбъектМетаданныхФорма.Класс = "Форма" И Не ПустаяСтрока(ОбъектМетаданныхФорма.ПолноеИмя) Тогда
		Возврат Неопределено;
	КонецЕсли; 

// TODO: Разобраться с функционалом открытых форм
//	СсылкаНаФорму = мОткрытыеФормы.Найти(НРег(ОбъектМетаданныхФорма.ПолноеИмя), "ИмяФормы");
	СсылкаНаФорму = Неопределено;
	ИнтерактивнаяФорма = Неопределено;

	Если СсылкаНаФорму = Неопределено Тогда
		
		Если ТипЗнч(ОбъектМетаданныхФорма) = Тип("Структура") Тогда
			Если (ОбъектМетаданныхФорма.Форма.УсловияРаботыСФормой = "ФормаДолжнаБытьОткрыта") Тогда

				Сообщить("Перед продолжением работы необходмо выполнить предыдущие действия.");
				Возврат Неопределено;

			КонецЕсли;
		КонецЕсли;
		
		ИнтерактивнаяФорма = ПолучитьИнтерактивнуюФорму(ОбъектМетаданныхФорма, ОткрытьФормуНовогоОбъекта);
		Если ИнтерактивнаяФорма = Неопределено Тогда
			Возврат ИнтерактивнаяФорма;
		КонецЕсли;
		
		Если ОткрытьФорму Тогда
			
			СсылкаНаФорму = мОткрытыеФормы.Добавить();
			СсылкаНаФорму.ИмяФормы = НРег(ОбъектМетаданныхФорма.ПолноеИмя);
			СсылкаНаФорму.Форма    = ИнтерактивнаяФорма;
			СсылкаНаФорму.НомерСтроки = мОткрытыеФормы.Количество();
			
			ИнтерактивнаяФорма.Открыть();
			СсылкаНаФорму.ФормаОткрытаИнтерактивно = Истина;
		
		КонецЕсли;
		
	Иначе
		
		ИнтерактивнаяФорма = СсылкаНаФорму.Форма;
		Если СсылкаНаФорму.ФормаОткрытаИнтерактивно И Не ИнтерактивнаяФорма.Открыта() Тогда
			
			Если ТипЗнч(ОбъектМетаданныхФорма) = Тип("Структура") Тогда
				Если (ОбъектМетаданныхФорма.Форма.УсловияРаботыСФормой = "ФормаДолжнаБытьОткрыта") Тогда

					Сообщить("Перед продолжением работы необходмо выполнить предыдущие действия.");
					Возврат Неопределено;

				КонецЕсли;
			КонецЕсли; 
			
			// Создаем новую форму
			СсылкаНаФорму.Форма = Неопределено;
			//ИнтерактивнаяФорма = ПолучитьФорму(ОбъектМетаданныхФорма.ПолноеИмя);
			ИнтерактивнаяФорма = ПолучитьИнтерактивнуюФорму(ОбъектМетаданныхФорма, ОткрытьФормуНовогоОбъекта);
			Если ИнтерактивнаяФорма = Неопределено Тогда
				Возврат ИнтерактивнаяФорма;
			КонецЕсли;
		
			СсылкаНаФорму.ИмяФормы = НРег(ОбъектМетаданныхФорма.ПолноеИмя);
			СсылкаНаФорму.Форма    = ИнтерактивнаяФорма;
			СсылкаНаФорму.НастройкиТекущегоЭлемента = Неопределено;
			мНастройкиТекущегоЭлемента = Неопределено;
			
			Если ОткрытьФорму Тогда
				ИнтерактивнаяФорма.Открыть();
				СсылкаНаФорму.ФормаОткрытаИнтерактивно = Истина;
			КонецЕсли;
			
		Иначе
			Если АктивизироватьФорму Тогда
				ИнтерактивнаяФорма.Активизировать();
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат ИнтерактивнаяФорма;
	
КонецФункции

&НаКлиенте
Функция СтруктураЭлементовФормы(ФормаИсходник)
	
//	Если ТипЗнч(ФормаИсходник) = Тип("УправляемаяФорма") Тогда
//		ЭлементыИнтерактивнойФормы = ФормаИсходник.Элементы;
//	Иначе
//		ЭлементыИнтерактивнойФормы = ФормаИсходник.ЭлементыФормы;
//	КонецЕсли; 
//	
//	КоличествоЭлементовНаФорме = ЭлементыИнтерактивнойФормы.Количество();
//	
//	СтруктураЭлементовФормы = Новый ДеревоЗначений();
//	
//	СтруктураЭлементовФормы.Колонки.Добавить("ЭлементФормы");
//	СтруктураЭлементовФормы.Колонки.Добавить("Представление");
//	СтруктураЭлементовФормы.Колонки.Добавить("Тип", Новый ОписаниеТипов("Строка"));
//	СтруктураЭлементовФормы.Колонки.Добавить("ПорядокОбхода");
//	СтруктураЭлементовФормы.Колонки.Добавить("Доступность");
//	СтруктураЭлементовФормы.Колонки.Добавить("ПолныйПутьКЭлементуФормы");
//	СтруктураЭлементовФормы.Колонки.Добавить("ИндексКартинки");
//	СтруктураЭлементовФормы.Колонки.Добавить("ЭлементУправляемойФормы");
//	СтруктураЭлементовФормы.Колонки.Добавить("ВидГруппыФормы");
//	
//	Если ТипЗнч(ФормаИсходник) = Тип("УправляемаяФорма") Тогда
//		
//		ЗаполнитьСтруктуруЭлементовУправляемойФормы(ФормаИсходник, ЭлементыИнтерактивнойФормы, СтруктураЭлементовФормы);
//		СтруктураЭлементовФормы.Колонки.Удалить(СтруктураЭлементовФормы.Колонки.ВидГруппыФормы);
//		
//	Иначе
//		
//		КоличествоОбработаныхЭлементов = 
//			РаспределитьЭлементыПоПанелям(СтруктураПанелейФормы(ФормаИсходник).Строки, ФормаИсходник, СтруктураЭлементовФормы);
//	
//	КонецЕсли; 
//	
//	СтруктураЭлементовФормы.Строки.Сортировать("ПорядокОбхода", Истина);
//	
//	Возврат СтруктураЭлементовФормы;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСтруктуруЭлементовИнтерактивнойФормы(ФормаИсходник)
	
	СтруктураЭлементовИнтерактивнойФормы.ПолучитьЭлементы().Очистить();
	
	Если ТипЗнч(ФормаИсходник) = Тип("УправляемаяФорма") Тогда
		ЭлементыИнтерактивнойФормы = ФормаИсходник.Элементы;
	Иначе
		ЭлементыИнтерактивнойФормы = ФормаИсходник.ЭлементыФормы;
	КонецЕсли; 
	
	Если ТипЗнч(ФормаИсходник) = Тип("УправляемаяФорма") Тогда
		
		ЗаполнитьСтруктуруЭлементовУправляемойФормы(ФормаИсходник, ЭлементыИнтерактивнойФормы);
//		СтруктураЭлементовФормы.Колонки.Удалить(СтруктураЭлементовФормы.Колонки.ВидГруппыФормы);
		
	Иначе
		
//		КоличествоОбработаныхЭлементов = 
//			РаспределитьЭлементыПоПанелям(СтруктураПанелейФормы(ФормаИсходник).Строки, ФормаИсходник, СтруктураЭлементовФормы);
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтруктуруЭлементовУправляемойФормы(ФормаИсходник, ЭлементыИнтерактивнойФормы)
	
	Для Каждого ЭлементФормы Из ЭлементыИнтерактивнойФормы Цикл
		
		Если Не ЭлементФормы.Родитель = Неопределено Тогда
			ЭлементРодитель = ЭлементРодитель(ФормаИсходник, ЭлементФормы.Родитель);
		Иначе
			ЭлементРодитель = СтруктураЭлементовИнтерактивнойФормы.ПолучитьЭлементы();
		КонецЕсли;
		
		УзелЭлементаФормы = НайтиЭлементФормыВСтруктуре(ЭлементФормы);
		Если УзелЭлементаФормы = Неопределено Тогда
			ДобавитьЭлементФормыВСтруктуруЭлементов(ФормаИсходник, ЭлементФормы, ЭлементРодитель);
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЭлементРодитель(ФормаИсходник, ЭлементФормыРодитель)
	
	ЭлементРодитель = НайтиЭлементФормыВСтруктуре(ЭлементФормыРодитель);
	Если Не ЭлементРодитель = Неопределено Тогда
		Возврат ЭлементРодитель;
	КонецЕсли;
	
	Если ТипЗнч(ЭлементФормыРодитель) = Тип("УправляемаяФорма") Тогда
		
		НовыйЭлементРодитель = СтруктураЭлементовИнтерактивнойФормы.ПолучитьЭлементы().Добавить();
		НовыйЭлементРодитель.ЭлементФормы  = ЭлементФормыРодитель.ИмяФормы;
		НовыйЭлементРодитель.Представление = "Управляемая форма";
		НовыйЭлементРодитель.ПорядокОбхода = 0;
		НовыйЭлементРодитель.ИндексКартинки = 0;
		НовыйЭлементРодитель.ЭлементУправляемойФормы = Истина;
		
		ЭлементПоиска = СписокЭлементовФормы.Добавить();
		ЭлементПоиска.ЭлементФормы = ЭлементФормыРодитель.ИмяФормы;
		ЭлементПоиска.ИдентификаторЭлементаВСтруктуре = НовыйЭлементРодитель.ПолучитьИдентификатор();
	
		Возврат НовыйЭлементРодитель;
		
	КонецЕсли;
	
//	Если Не ЭлементФормыРодитель.Родитель = Неопределено Тогда
//		
//		ЭлементРодитель = ЭлементРодитель(ФормаИсходник, ЭлементФормыРодитель.Родитель);
//		
//	КонецЕсли;
	
	НовыйЭлементРодитель = ДобавитьЭлементФормыВСтруктуруЭлементов(
		ФормаИсходник, ЭлементФормыРодитель, СтруктураЭлементовИнтерактивнойФормы);
	
//	НовыйЭлементРодитель = СтруктураЭлементовИнтерактивнойФормы.ПолучитьЭлементы().Добавить();
//	НовыйЭлементРодитель.ЭлементФормы  = ЭлементФормыРодитель.Имя;
//	НовыйЭлементРодитель.Представление = ЭлементФормыРодитель.Заголовок;
//	НовыйЭлементРодитель.ПорядокОбхода = ФормаИсходник.ПодчиненныеЭлементы.Индекс(ЭлементФормыРодитель);
//	НовыйЭлементРодитель.Тип = ТипЗнч(ЭлементФормыРодитель);
//	НовыйЭлементРодитель.ЭлементУправляемойФормы = Истина;
//	
//	ЭлементПоиска = СписокЭлементовФормы.Добавить();
//	ЭлементПоиска.ЭлементФормы = ЭлементФормыРодитель.Имя;
//	ЭлементПоиска.ИдентификаторЭлементаВСтруктуре = НовыйЭлементРодитель.ПолучитьИдентификатор();
	
	УстановитьИндексКартинки(НовыйЭлементРодитель);
	
	Возврат НовыйЭлементРодитель;
	
КонецФункции

&НаКлиенте
Функция НайтиЭлементФормыВСтруктуре(ЭлементФормы)
	
	Если ТипЗнч(ЭлементФормы) = Тип("УправляемаяФорма") Тогда
		ИмяЭлемента = ЭлементФормы.ИмяФормы;
	Иначе
		ИмяЭлемента = ЭлементФормы.Имя;
	КонецЕсли; 
	
	Отбор = Новый Структура("ЭлементФормы", ИмяЭлемента);
	НайденыеСтроки = СписокЭлементовФормы.НайтиСтроки(Отбор);
	Если НайденыеСтроки.Количество() Тогда
	
		ИдентификаторЭлемента = НайденыеСтроки[0].ИдентификаторЭлементаВСтруктуре;
		УзелЭлементаФормы = СтруктураЭлементовИнтерактивнойФормы.НайтиПоИдентификатору(ИдентификаторЭлемента);
		
		Если Не УзелЭлементаФормы = Неопределено Тогда
			Возврат УзелЭлементаФормы;
		КонецЕсли;		
			
	КонецЕсли;
		
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ДобавитьЭлементФормыВСтруктуруЭлементов(ФормаИсходник, ЭлементФормы, ЭлементРодитель)
	
	Если Прав(ЭлементФормы.Имя, 20) = "РасширеннаяПодсказка"
		//Или Прав(ЭлементФормы.Имя, 15) = "КонтекстноеМеню" 
		Тогда
			
		Возврат Неопределено;
		
	КонецЕсли;
	
	НовыйЭлемент = ЭлементРодитель.ПолучитьЭлементы().Добавить();
	НовыйЭлемент.ЭлементФормы  = ЭлементФормы.Имя;
	НовыйЭлемент.Представление = ЭлементФормы.Заголовок;
	НовыйЭлемент.ПорядокОбхода = ФормаИсходник.ПодчиненныеЭлементы.Индекс(ЭлементФормы);
	НовыйЭлемент.Тип = ТипЗнч(ЭлементФормы);
	НовыйЭлемент.ЭлементУправляемойФормы = Истина;
	
	ЭлементПоиска = СписокЭлементовФормы.Добавить();
	ЭлементПоиска.ЭлементФормы = ЭлементФормы.Имя;
	ЭлементПоиска.ИдентификаторЭлементаВСтруктуре = НовыйЭлемент.ПолучитьИдентификатор();

	Если ТипЗнч(ЭлементФормы) = Тип("ГруппаФормы") Тогда
		НовыйЭлемент.ВидГруппыФормы = ЭлементФормы.Вид;
	КонецЕсли;
	
	УстановитьИндексКартинки(НовыйЭлемент);
	
	Возврат НовыйЭлемент;
	
КонецФункции

&НаКлиенте
Процедура УстановитьИндексКартинки(ЭлементФормы)
	
	Если ЭлементФормы.Тип = "Поле формы" Тогда
		ЭлементФормы.ИндексКартинки = 4;
	ИначеЕсли ЭлементФормы.Тип = "Кнопка формы" Тогда
		ЭлементФормы.ИндексКартинки = 28;
	ИначеЕсли ЭлементФормы.Тип = "Таблица формы" Тогда
		ЭлементФормы.ИндексКартинки = 3;
	ИначеЕсли ЭлементФормы.Тип = "Группа формы" Тогда
		
		ЭлементФормы.ИндексКартинки = 26;
		
		Если ЭлементФормы.ВидГруппыФормы = ВидГруппыФормы.ГруппаКнопок
			Или ЭлементФормы.ВидГруппыФормы = ВидГруппыФормы.КонтекстноеМеню
			Или ЭлементФормы.ВидГруппыФормы = ВидГруппыФормы.Подменю Тогда
			
			ЭлементФормы.ИндексКартинки = 11;
			
		ИначеЕсли ЭлементФормы.ВидГруппыФормы = ВидГруппыФормы.КоманднаяПанель Тогда
			ЭлементФормы.ИндексКартинки = 27;
		ИначеЕсли ЭлементФормы.ВидГруппыФормы = ВидГруппыФормы.Страницы 
			Или ЭлементФормы.ВидГруппыФормы = ВидГруппыФормы.Страница Тогда
			ЭлементФормы.ИндексКартинки = 12;
		КонецЕсли;
		
	ИначеЕсли ЭлементФормы.Тип = "ДополнениеЭлементаФормы" Тогда
		ЭлементФормы.ИндексКартинки = 29;
	КонецЕсли; 
	
КонецПроцедуры

// Функция распределяет элементы формы по иерархии вложения элементов в элементы контейнеры
//  возвращает количество элементов формы собранных в структуру
&НаКлиенте
Функция РаспределитьЭлементыПоПанелям(Панели, ФормаИсходник, СтруктураЭлементовФормы, ЭлементРодитель = Неопределено)
	
	КоличествоЭлементовФормы = 0;
	
	Для Каждого ЭлементПанель Из Панели Цикл
		
		Если ЭлементПанель.Панель.Имя = Неопределено Тогда
			ИмяПанели = "ПанельФормы";
		Иначе
			ИмяПанели = ЭлементПанель.Панель.Имя;    
		КонецЕсли;                  
		
		// Добавляем панель
		Если ЭлементРодитель = Неопределено Тогда
			
			СтрокаЭлементаФорм = СтруктураЭлементовФормы.Строки.Добавить();
			СтрокаЭлементаФорм.ЭлементФормы  = ИмяПанели;
			СтрокаЭлементаФорм.Представление = ИмяПанели;
			СтрокаЭлементаФорм.ПорядокОбхода = 0;
			СтрокаЭлементаФорм.ИндексКартинки = 12;

		Иначе
			
			СтрокаЭлементаФорм = ЭлементРодитель.Строки.Добавить();
			СтрокаЭлементаФорм.ЭлементФормы  = ИмяПанели;
			СтрокаЭлементаФорм.Представление = ИмяПанели;
			СтрокаЭлементаФорм.ПорядокОбхода = ЭлементПанель.Панель.ПорядокОбхода;
			
			// Считаем количество элементов
			КоличествоЭлементовФормы = КоличествоЭлементовФормы + 1;
			
		КонецЕсли; 
		
		СтрокаЭлементаФорм.Тип = ТипЗнч(ЭлементПанель.Панель);
		
		Если ЭлементПанель.Строки.Количество() Тогда
			
			КоличествоЭлементовФормы = КоличествоЭлементовФормы + 
			РаспределитьЭлементыПоПанелям(ЭлементПанель.Строки, ФормаИсходник, 
			СтруктураЭлементовФормы, СтрокаЭлементаФорм);
			
		КонецЕсли; 
		
		НомерСтраницы = 0;
		КоличествоСтраниц = ЭлементПанель.Панель.Страницы.Количество();
		
		// Удаляем страницы панели по очереди
		Пока НомерСтраницы < КоличествоСтраниц Цикл
			
			НомерСтраницы = НомерСтраницы + 1;
			Страница = ЭлементПанель.Панель.Страницы[0];
			
			Если ЭлементПанель.Панель = ФормаИсходник.Панель И КоличествоСтраниц = 1 Тогда
				СтрокаСтраницы = СтрокаЭлементаФорм;
			Иначе
				
				СтрокаСтраницы = СтрокаЭлементаФорм.Строки.Добавить();
				СтрокаСтраницы.ЭлементФормы  = Страница.Имя;
				СтрокаСтраницы.Представление = Страница.Заголовок;
				СтрокаСтраницы.Тип           = ТипЗнч(Страница);
				СтрокаСтраницы.ПорядокОбхода = НомерСтраницы;
				СтрокаСтраницы.ИндексКартинки = 12;
				
			КонецЕсли; 
			
			// Перед удалением получаем список элементов формы
			СписокЭлементовДоУдаления = СписокЭлементовФормы(ФормаИсходник);
			ЭлементПанель.Панель.Страницы.Удалить(Страница);
			
			Для Каждого ЭлементФормы Из СписокЭлементовДоУдаления Цикл
				
				НайденныйЭлемент = ФормаИсходник.ЭлементыФормы.Найти(ЭлементФормы.Имя);
				Если НайденныйЭлемент = Неопределено Тогда
					
					Если ЭлементПанель.Панель = ФормаИсходник.Панель Тогда
						СтрокаПанели = СтрокаСтраницы.Строки.Найти(ЭлементФормы.Имя, "ЭлементФормы");
					Иначе
						СтрокаПанели = СтрокаСтраницы.Родитель.Строки.Найти(ЭлементФормы.Имя, "ЭлементФормы");
					КонецЕсли;
					
					// Добавляем строку элемента
					СтрокаЭлемента = СтрокаСтраницы.Строки.Добавить();
					СтрокаЭлемента.ЭлементФормы  = ЭлементФормы.Имя;    
					СтрокаЭлемента.Тип           = ЭлементФормы.Тип;
					СтрокаЭлемента.ПорядокОбхода = ЭлементФормы.ПорядокОбхода;
					
					Если (НЕ СтрокаПанели = Неопределено) И ЭлементФормы.Тип = Строка(Тип("Панель")) Тогда
						ЗаполнитьСоставПанели(СтрокаЭлемента, СтрокаПанели);
						СтрокаПанели.Родитель.Строки.Удалить(СтрокаПанели);
					Иначе
						КоличествоЭлементовФормы = КоличествоЭлементовФормы + 1;
					КонецЕсли; 
					
				КонецЕсли; 
				
			КонецЦикла;
			
		КонецЦикла; 
		
	КонецЦикла;
	
	Возврат КоличествоЭлементовФормы;
	
КонецФункции

&НаКлиенте
Функция СписокЭлементовФормы(ФормаИсходник, СохрянатьНастройкиПривязок = Ложь)
	
//	СписокЭлементовФормы = Новый ТаблицаЗначений();
//	
//	СписокЭлементовФормы.Колонки.Добавить("Имя");
//	СписокЭлементовФормы.Колонки.Добавить("Тип");
//	СписокЭлементовФормы.Колонки.Добавить("ПорядокОбхода");
//	
//	Для Каждого ЭлементФормы Из ФормаИсходник.ЭлементыФормы Цикл
//		
//		НоваяСтрока = СписокЭлементовФормы.Добавить();
//		НоваяСтрока.Имя           = ЭлементФормы.Имя;
//		НоваяСтрока.Тип           = ТипЗнч(ЭлементФормы);
//		НоваяСтрока.ПорядокОбхода = ЭлементФормы.ПорядокОбхода;
//		
//	КонецЦикла;
//	
//	Возврат СписокЭлементовФормы;
	
КонецФункции // СписокЭлементовФормы()

&НаКлиенте
Процедура ЗаполнитьСоставПанели(Панель, Состав)
	
	Для Каждого ВложенныйЭлемент Из Состав.Строки Цикл
		
		СтрокаЭлемента = Панель.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЭлемента, ВложенныйЭлемент);
		//СтрокаЭлемента.ЭлементФормы = ВложенныйЭлемент.ЭлементФормы;  
		//СтрокаЭлемента.Тип          = ВложенныйЭлемент.Тип;  
		Если  ВложенныйЭлемент.Строки.Количество() Тогда
			ЗаполнитьСоставПанели(СтрокаЭлемента, ВложенныйЭлемент); 
		КонецЕсли; 
		
	КонецЦикла;  
	
КонецПроцедуры

&НаКлиенте
Процедура ПостроитьСтруктуруПанелейФормы(СписокПанелейФормы, ЭлеменФормыПанель, 
	РодительскаяПанель = Неопределено, СтруктураПанелейФормы)
	
	Если РодительскаяПанель = Неопределено Тогда
		УзелПанели        = СтруктураПанелейФормы.Строки.Добавить();
		УзелПанели.Панель = ЭлеменФормыПанель;    
	Иначе
		УзелПанлиРодителя = СтруктураПанелейФормы.Строки.Найти(РодительскаяПанель, "Панель", Истина);    
		УзелПанели        = УзелПанлиРодителя.Строки.Добавить();
		УзелПанели.Панель = ЭлеменФормыПанель;    
	КонецЕсли; 
	
	ВложенныеПанели = СписокПанелейФормы.НайтиСтроки(Новый Структура("Родитель", ЭлеменФормыПанель));
	Для Каждого ВложеннаяПанель Из ВложенныеПанели Цикл
		ПостроитьСтруктуруПанелейФормы(СписокПанелейФормы, ВложеннаяПанель.Панель, ЭлеменФормыПанель, СтруктураПанелейФормы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтруктуруЭлементовФормы(ОбъектМетаданныхФорма)
	
	СтруктураЭлементовИнтерактивнойФормы.ПолучитьЭлементы().Очистить();
	Если Не ОбъектМетаданныхФорма.Класс = "Форма" Тогда
		//Элементы.СтруктураЭлементовИнтеративнойФормы.Видимость = Ложь;
		Возврат;
	Иначе
		//Элементы.СтруктураЭлементовИнтеративнойФормы.Видимость = Истина;
	КонецЕсли;
	
	Если ОбъектМетаданныхФорма.СтруктураЭлементовФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
//	ЗначениеВДанныеФормы(ОбъектМетаданныхФорма.СтруктураЭлементовФормы, СтруктураЭлементовИнтерактивнойФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПодчиненныеЭлементыФормы(ФормаИсточник)
	
	Если Не ТипЗнч(ФормаИсточник) = Тип("УправляемаяФорма") Тогда
		УстановитьНастройкиЭлементовФормы(ФормаИсточник, СтруктураЭлементовИнтерактивнойФормы.ПолучитьЭлементы());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНастройкиЭлементовФормы(ФормаИсточник, СтруктураЭлементов)
	
	Для Каждого ЭлементФормы Из СтруктураЭлементов Цикл
				
		ЭлементыПодчиненные = ЭлементФормы.ПолучитьЭлементы();
		Если ЭлементыПодчиненные.Количество() Тогда
			УстановитьНастройкиЭлементовФормы(ФормаИсточник, ЭлементыПодчиненные);
		КонецЕсли;
		
		Если ЭлементФормы.Тип = Строка(Тип("КоманднаяПанель")) Тогда
						
			ИнтерактивныйЭлементФормы = ФормаИсточник.ЭлементыФормы.Найти(ЭлементФормы.ЭлементФормы);
			ЭлементФормы.Представление = ИнтерактивныйЭлементФормы.Имя;
			ЭлементФормы.ИндексКартинки = 11;
			ДобавитьКнопкиВСтруктуруЭлементов(ФормаИсточник, ЭлементФормы);
			
		ИначеЕсли ЭлементФормы.Тип = Строка(Тип("Кнопка")) Тогда
			
			ИнтерактивныйЭлементФормы = ФормаИсточник.ЭлементыФормы.Найти(ЭлементФормы.ЭлементФормы);
			ЭлементФормы.Представление = ИнтерактивныйЭлементФормы.Заголовок;
			ЭлементФормы.ИндексКартинки = 1;
			
			Если ИнтерактивныйЭлементФормы.РежимМеню = ПредопределенноеЗначение("ИспользованиеРежимаМеню.Использовать") Тогда
				ДобавитьКнопкиВСтруктуруЭлементов(ФормаИсточник, ЭлементФормы, ИнтерактивныйЭлементФормы);
			КонецЕсли;
			
		ИначеЕсли ЭлементФормы.Тип = Строка(Тип("Панель")) И Не ЭлементФормы.Родитель = Неопределено Тогда
			
			ИнтерактивныйЭлементФормы = ФормаИсточник.ЭлементыФормы.Найти(ЭлементФормы.ЭлементФормы);
			ИнтерактивныйЭлементФормы.Доступность = Истина;
			ИнтерактивныйЭлементФормы.УстановитьДействие("ПриСменеСтраницы", Неопределено);
			
			ЭлементФормы.Доступность = Истина;
			ЭлементФормы.ИндексКартинки = 12;
			
		ИначеЕсли ЭлементФормы.Тип = Строка(Тип("ПолеВвода")) Тогда
			
			ИнтерактивныйЭлементФормы = ФормаИсточник.ЭлементыФормы.Найти(ЭлементФормы.ЭлементФормы);
			ЭлементФормы.Представление = ИнтерактивныйЭлементФормы.Имя;
			ИнтерактивныйЭлементФормы.Доступность = Истина;
			ИнтерактивныйЭлементФормы.ТолькоПросмотр = Ложь;
			ЭлементФормы.Доступность = Истина;
			ЭлементФормы.ИндексКартинки = 4;
			
		ИначеЕсли ЭлементФормы.Тип = Строка(Тип("Надпись")) Тогда
			
			ИнтерактивныйЭлементФормы = ФормаИсточник.ЭлементыФормы.Найти(ЭлементФормы.ЭлементФормы);
			Если ПустаяСтрока(СокрЛП(ИнтерактивныйЭлементФормы.Заголовок)) Тогда
				ЭлементФормы.Представление = ИнтерактивныйЭлементФормы.Имя;
			Иначе	
				ЭлементФормы.Представление = ИнтерактивныйЭлементФормы.Заголовок;
			КонецЕсли; 
			
			ИнтерактивныйЭлементФормы.Доступность = Истина;
			ЭлементФормы.Доступность = Истина;
			ЭлементФормы.ИндексКартинки = 2;
			
		ИначеЕсли ЭлементФормы.Тип = Строка(Тип("Флажок")) Тогда
			
			ИнтерактивныйЭлементФормы = ФормаИсточник.ЭлементыФормы.Найти(ЭлементФормы.ЭлементФормы);
			ЭлементФормы.Представление = ИнтерактивныйЭлементФормы.Заголовок;
			ИнтерактивныйЭлементФормы.Доступность = Истина;
			ЭлементФормы.Доступность = Истина;
			ЭлементФормы.ИндексКартинки = 5;
			
		ИначеЕсли ЭлементФормы.Тип = Строка(Тип("ТабличноеПоле")) Тогда
			
			ИнтерактивныйЭлементФормы = ФормаИсточник.ЭлементыФормы.Найти(ЭлементФормы.ЭлементФормы);
			ЭлементФормы.Представление = ИнтерактивныйЭлементФормы.Имя;
			ЭлементФормы.ИндексКартинки = 3;
			
		ИначеЕсли ЭлементФормы.Тип = Строка(Тип("ПолеТабличногоДокумента")) Тогда
			
			ИнтерактивныйЭлементФормы = ФормаИсточник.ЭлементыФормы.Найти(ЭлементФормы.ЭлементФормы);
			ЭлементФормы.Представление = ИнтерактивныйЭлементФормы.Имя;
			ЭлементФормы.ИндексКартинки = 14;
			
		ИначеЕсли ЭлементФормы.Тип = Строка(Тип("ПолеТекстовогоДокумента")) Тогда
			
			ИнтерактивныйЭлементФормы = ФормаИсточник.ЭлементыФормы.Найти(ЭлементФормы.ЭлементФормы);
			ЭлементФормы.Представление = ИнтерактивныйЭлементФормы.Имя;
			ЭлементФормы.ИндексКартинки = 19;

		ИначеЕсли ЭлементФормы.Тип = Строка(Тип("ПолеHtmlДокумента")) Тогда
			
			ИнтерактивныйЭлементФормы = ФормаИсточник.ЭлементыФормы.Найти(ЭлементФормы.ЭлементФормы);
			ЭлементФормы.Представление = ИнтерактивныйЭлементФормы.Имя;
			ЭлементФормы.ИндексКартинки = 21;
			
		ИначеЕсли ЭлементФормы.Тип = Строка(Тип("Разделитель")) Тогда
			
			ИнтерактивныйЭлементФормы = ФормаИсточник.ЭлементыФормы.Найти(ЭлементФормы.ЭлементФормы);
			ЭлементФормы.Представление = ИнтерактивныйЭлементФормы.Имя;
			ЭлементФормы.ИндексКартинки = 13;
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКнопкиВСтруктуруЭлементов(ФормаИсточник, КоманднаяПанель, ИсходныйЭлемент = Неопределено)
	
	Если ИсходныйЭлемент = Неопределено Тогда
		ИсходныйЭлемент = ФормаИсточник.ЭлементыФормы.Найти(КоманднаяПанель.ЭлементФормы);
	КонецЕсли; 
	
	Для Каждого КнопкаПанели Из ИсходныйЭлемент.Кнопки Цикл
		
		Если КнопкаПанели.ТипКнопки = ПредопределенноеЗначение("ТипКнопкиКоманднойПанели.Разделитель") Тогда
			Продолжить;	
		КонецЕсли;
		
		СтрокаКнопки = КоманднаяПанель.Строки.Добавить();
		СтрокаКнопки.ЭлементФормы = КнопкаПанели.Имя;
		СтрокаКнопки.Тип = ТипЗнч(КнопкаПанели);
		СтрокаКнопки.Представление = КнопкаПанели.Текст;
		СтрокаКнопки.ИндексКартинки = 1;
		
		Если КнопкаПанели.ТипКнопки = ПредопределенноеЗначение("ТипКнопкиКоманднойПанели.Подменю") Тогда
			
			ДобавитьКнопкиВСтруктуруЭлементов(ФормаИсточник, СтрокаКнопки, КнопкаПанели);
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеОписанияОбъекта

&НаКлиенте
Процедура ДобавитьОписаниеОбъектаВДокумент()
	
	ОбъектМетаданныхСтруктуры = ТекущийОбъектМетаданных();
	ПредставлениеОбъекта = МаркированноеПредставлениеОбъектаМетаданных(ОбъектМетаданныхСтруктуры, Ложь, Истина);
	
	МаркерФорматирования = Новый Структура("Маркер, Представление, Объект", 
		ПредставлениеОбъекта.Текст, ПредставлениеОбъекта.ВыделяемыйФрагмент, ОбъектМетаданныхСтруктуры);
		
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);
	ДобавитьСвойстваОбъектаВОписание(ОбъектМетаданныхСтруктуры);
	ДобавитьОписаниеПодчиненныхОбъектов(ОбъектМетаданныхСтруктуры);
	ПоказатьСконвертированныйHtmlДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСвойстваОбъектаВОписание(ОбъектМетаданныхСтруктуры)
	
	Если Не ЗначениеЗаполнено(ОбъектМетаданныхСтруктуры.Свойства) Тогда
		ЗаполнитьСвойстваОбъектаМетаданных(ОбъектМетаданныхСтруктуры);	
	КонецЕсли;
	
	СвойстваОбъекта = ОбъектМетаданныхСтруктуры.Свойства;
	
	ДокументДобавитьБлокНазначение(СвойстваОбъекта);
	ДокументДобавитьБлокСвойтОбъекта();	
	
	ФорматируемаяТабилица = ФорматируемаяТаблица("| Свойство | Значение свойства |");
	ДанныеКолонок = Новый Массив();
	Для Каждого Свойство Из СвойстваОбъекта Цикл
		
		ДанныеКолонок.Очистить();
		Если Свойство.Ключ = "Описание" Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(Свойство.Ключ, "Группа") Тогда
			ДанныеКолонок.Добавить("***" + Свойство.Значение + "***"); 
		Иначе
			ДанныеКолонок.Добавить(Свойство.Ключ);
			ДанныеКолонок.Добавить(Свойство.Значение);
		КонецЕсли;
		
		ДобавитьСтрокуВФорматировануТаблицу(ФорматируемаяТабилица, ДанныеКолонок);	
		
	КонецЦикла;
		
	ОтформатироватьТаблицу(ФорматируемаяТабилица);
	ДокументВывестиФорматируемуюТаблицу(ФорматируемаяТабилица);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСвойстваОбъектаМетаданных(ОбъектМетаданныхСтруктуры)
	ОбъектМетаданныхСтруктуры.Свойства = 
		СвойстаОбъектаМетаданных(ОбъектМетаданныхСтруктуры.Имя, ОбъектМетаданныхСтруктуры.Класс);	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СвойстаОбъектаМетаданных(ИмяОбъекта, КлассОбъекта)
	
	Если КлассОбъекта = "Справочник" Тогда
		Возврат СвойстваСправочника(ИмяОбъекта);
	ИначеЕсли КлассОбъекта = "Документ" Тогда
		Возврат СвойстваДокумента(ИмяОбъекта);
	ИначеЕсли КлассОбъекта = "ЖурналДокументов" Тогда
		Возврат СвойстваЖурналаДокумента(ИмяОбъекта);
	КонецЕсли;
		
КонецФункции

&НаСервереБезКонтекста
Функция СвойстваСправочника(ИмяСправочника)
	
	СвойстваСправочника = Новый Структура();
	
	ОбъектМетаданных = Метаданные.Справочники[ИмяСправочника];
	
	СвойстваСправочника.Вставить("Описание", Новый Структура());
	СвойстваСправочника.Описание.Вставить("Комментарий", ОбъектМетаданных.Комментарий);
	СвойстваСправочника.Описание.Вставить("Пояснение", ОбъектМетаданных.Пояснение);
	
	СвойстваСправочника.Вставить("ГруппаОсновные", "Основные");
	СвойстваСправочника.Вставить("ДлинаКода", ОбъектМетаданных.ДлинаКода);
	СвойстваСправочника.Вставить("ДлинаНаименования", ОбъектМетаданных.ДлинаНаименования);
	СвойстваСправочника.Вставить("ТипКода", ОбъектМетаданных.ТипКода);
	СвойстваСправочника.Вставить("ОсновноеПредставление", ОбъектМетаданных.ОсновноеПредставление);
	
	СвойстваСправочника.Вставить("ГруппаНумерация", "Нумерация");
	СвойстваСправочника.Вставить("Автонумерация", ОбъектМетаданных.Автонумерация);
	СвойстваСправочника.Вставить("КонтрольУникальности", ОбъектМетаданных.КонтрольУникальности);
	СвойстваСправочника.Вставить("СерииКодов", ОбъектМетаданных.СерииКодов);
	
	СвойстваСправочника.Вставить("ГруппаИерархия", "Иерархия");
	СвойстваСправочника.Вставить("Иерархический", ОбъектМетаданных.Иерархический);
	Если СвойстваСправочника.Иерархический Тогда
		СвойстваСправочника.Вставить("ВидИерархии", ОбъектМетаданных.ВидИерархии);
		СвойстваСправочника.Вставить("КоличествоУровней", ОбъектМетаданных.КоличествоУровней);
	КонецЕсли;
	
	СвойстваСправочника.Вставить("ГруппаПолеВвода", "Поле ввода");
	СвойстваСправочника.Вставить("БыстрыйВыбор", ОбъектМетаданных.БыстрыйВыбор);
	СвойстваСправочника.Вставить("СпособВыбора", ОбъектМетаданных.СпособВыбора);
	СвойстваСправочника.Вставить("ВводПоСтроке", ОбъектМетаданных.ВводПоСтроке);
	
	СвойстваСправочника.Вставить("ГруппаОснованиеВладельцы", "Связь с объектами");
	СвойстваСправочника.Вставить("Владельцы", ОбъектМетаданных.Владельцы);
	СвойстваСправочника.Вставить("ВводитсяНаОсновании", ОбъектМетаданных.ВводитсяНаОсновании);
	
	СвойстваСправочника.Вставить("ГруппаПредставление", "Представление");
	СвойстваСправочника.Вставить("ПредставлениеОбъекта", ОбъектМетаданных.ПредставлениеОбъекта);
	СвойстваСправочника.Вставить("РасширенноеПредставлениеОбъекта", ОбъектМетаданных.РасширенноеПредставлениеОбъекта);
	СвойстваСправочника.Вставить("ПредставлениеСписка", ОбъектМетаданных.ПредставлениеСписка);
	СвойстваСправочника.Вставить("РасширенноеПредставлениеСписка", ОбъектМетаданных.РасширенноеПредставлениеСписка);
	
	СвойстваСправочника.Вставить("ГруппаПрочее", "Прочее");
	СвойстваСправочника.Вставить("ПоляБлокировкиДанных", ОбъектМетаданных.ПоляБлокировкиДанных);
	СвойстваСправочника.Вставить("ПолнотекстовыйПоиск", ОбъектМетаданных.ПолнотекстовыйПоиск);
	СвойстваСправочника.Вставить("ИсторияДанных", ОбъектМетаданных.ИсторияДанных);
	
	ЗаполнитьФормыОбъекта(ОбъектМетаданных, "Справочник", СвойстваСправочника);
	
	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваСправочника);

	Возврат СвойстваСправочника;
	
КонецФункции

&НаСервереБезКонтекста
Функция СвойстваДокумента(ИмяДокумента)
	
	СвойстваДокумента = Новый Структура();
	
	ОбъектМетаданных = Метаданные.Документы[ИмяДокумента];
	
	СвойстваДокумента.Вставить("Описание", Новый Структура());
	СвойстваДокумента.Описание.Вставить("Комментарий", ОбъектМетаданных.Комментарий);
	СвойстваДокумента.Описание.Вставить("Пояснение", ОбъектМетаданных.Пояснение);
	
	СвойстваДокумента.Вставить("ГруппаНумерация", "Нумерация");
	СвойстваДокумента.Вставить("ТипНомера", ОбъектМетаданных.ТипНомера);
	СвойстваДокумента.Вставить("ДлинаНомера", ОбъектМетаданных.ДлинаНомера);
	СвойстваДокумента.Вставить("Автонумерация", ОбъектМетаданных.Автонумерация);
	СвойстваДокумента.Вставить("КонтрольУникальности", ОбъектМетаданных.КонтрольУникальности);
	СвойстваДокумента.Вставить("ПериодичностьНомера", ОбъектМетаданных.ПериодичностьНомера);
	СвойстваДокумента.Вставить("Нумератор", ОбъектМетаданных.Нумератор);
	
	СвойстваДокумента.Вставить("ГруппаПоляВвода", "ПоляВвода");
	СвойстваДокумента.Вставить("СозданиеПриВводе", ОбъектМетаданных.СозданиеПриВводе);
	СвойстваДокумента.Вставить("ВводПоСтроке", ОбъектМетаданных.ВводПоСтроке);
	
	СвойстваДокумента.Вставить("ГруппаОснованиеВладельцы", "Связь с объектами");
	СвойстваДокумента.Вставить("ВводитсяНаОсновании", ОбъектМетаданных.ВводитсяНаОсновании);
	
	СвойстваДокумента.Вставить("ГруппаДвижения", "Движения");
	СвойстваДокумента.Вставить("Проведение", ОбъектМетаданных.Проведение);
	СвойстваДокумента.Вставить("ОперативноеПроведение", ОбъектМетаданных.ОперативноеПроведение);
	СвойстваДокумента.Вставить("УдалениеДвижений", ОбъектМетаданных.УдалениеДвижений);
	СвойстваДокумента.Вставить("ЗаписьДвиженийПриПроведении", ОбъектМетаданных.ЗаписьДвиженийПриПроведении);
	СвойстваДокумента.Вставить("Движения", ОбъектМетаданных.Движения);
	
	СвойстваДокумента.Вставить("ГруппаПредставление", "Представление");
	СвойстваДокумента.Вставить("ПредставлениеОбъекта", ОбъектМетаданных.ПредставлениеОбъекта);
	СвойстваДокумента.Вставить("РасширенноеПредставлениеОбъекта", ОбъектМетаданных.РасширенноеПредставлениеОбъекта);
	СвойстваДокумента.Вставить("ПредставлениеСписка", ОбъектМетаданных.ПредставлениеСписка);
	СвойстваДокумента.Вставить("РасширенноеПредставлениеСписка", ОбъектМетаданных.РасширенноеПредставлениеСписка);
	
	СвойстваДокумента.Вставить("ГруппаПрочее", "Прочее");
	СвойстваДокумента.Вставить("ПоляБлокировкиДанных", ОбъектМетаданных.ПоляБлокировкиДанных);
	СвойстваДокумента.Вставить("ПолнотекстовыйПоиск", ОбъектМетаданных.ПолнотекстовыйПоиск);
	СвойстваДокумента.Вставить("ИсторияДанных", ОбъектМетаданных.ИсторияДанных);
	
	ЗаполнитьФормыОбъекта(ОбъектМетаданных, "Документ", СвойстваДокумента);
	
	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваДокумента);

	Возврат СвойстваДокумента;
	
КонецФункции

&НаСервереБезКонтекста
Функция СвойстваЖурналаДокумента(ИмяЖурналаДокумента)

	СвойстваДокумента = Новый Структура();
	
	ОбъектМетаданных = Метаданные.ЖурналыДокументов[ИмяЖурналаДокумента];
	
	СвойстваДокумента.Вставить("Описание", Новый Структура());
	СвойстваДокумента.Описание.Вставить("Комментарий", ОбъектМетаданных.Комментарий);
	СвойстваДокумента.Описание.Вставить("Пояснение", ОбъектМетаданных.Пояснение);
	
	СвойстваДокумента.Вставить("ГруппаДанные", "Данные");
	СвойстваДокумента.Вставить("РегистрируемыеДокументы", ОбъектМетаданных.РегистрируемыеДокументы);
		
	СвойстваДокумента.Вставить("ГруппаПредставление", "Представление");
	СвойстваДокумента.Вставить("ПредставлениеСписка", ОбъектМетаданных.ПредставлениеСписка);
	СвойстваДокумента.Вставить("РасширенноеПредставлениеСписка", ОбъектМетаданных.РасширенноеПредставлениеСписка);
	
	ЗаполнитьФормыОбъекта(ОбъектМетаданных, "ЖурналДокументов", СвойстваДокумента);
	
	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваДокумента);

	Возврат СвойстваДокумента;
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьФормыОбъекта(ОбъектМетаданных, КлассаМенеджераОбъекта, СвойстваОбъетка)
	
	СвойстваОбъетка.Вставить("ГруппаОсновныеФормы", "Основные формы");
	ВидыПредназначенияФорм = ВидыПредназначенияФормОбъекта(КлассаМенеджераОбъекта);
	Для Каждого ВидПрезназначенияФормы Из ВидыПредназначенияФорм Цикл
		ФормаОбъекта = ОбъектМетаданных[ВидПрезназначенияФормы.Значение];
		Если Не ФормаОбъекта = Неопределено Тогда
			СвойстваОбъетка.Вставить(ВидПрезназначенияФормы.Значение, ФормаОбъекта.Имя);
		КонецЕсли;
		
//		Если ФормаОбъеОбъектМетаданных[ВидПрезназначенияФормы.Значение] Тогда
//			ЭлементФорма.Описание = ?(ПустаяСтрока(ЭлементФорма.Описание), "", ", ")
//				+ ВидПрезназначенияФормы.Представление + ".";
//		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидыПредназначенияФормОбъекта(КлассаМенеджераОбъекта)
	
	ВидыПредназначенияФорм = Новый СписокЗначений();
	
	Если КлассаМенеджераОбъекта = "Справочник" Тогда
	
		ВидыПредназначенияФорм.Добавить("ОсновнаяФормаГруппы", "Основная форма группы");
		ВидыПредназначенияФорм.Добавить("ОсновнаяФормаДляВыбора", "Основная форма для выбора");
		ВидыПредназначенияФорм.Добавить("ОсновнаяФормаДляВыбораГруппы", "Основная форма для выбора группы");
		ВидыПредназначенияФорм.Добавить("ОсновнаяФормаОбъекта", "Основная форма объекта");
		ВидыПредназначенияФорм.Добавить("ОсновнаяФормаСписка", "Основная форма списка");
		ВидыПредназначенияФорм.Добавить("ДополнительнаяФормаГруппы", "Дополнительная форма группы");
		ВидыПредназначенияФорм.Добавить("ДополнительнаяФормаДляВыбора", "Дополнительная форма для выбора");
		ВидыПредназначенияФорм.Добавить("ДополнительнаяФормаДляВыбораГруппы", "Дополнительная форма для выбора группы");
		ВидыПредназначенияФорм.Добавить("ДополнительнаяФормаОбъекта", "Дополнительная форма объекта");
		ВидыПредназначенияФорм.Добавить("ДополнительнаяФормаСписка", "Дополнительная форма списка");
		
	ИначеЕсли КлассаМенеджераОбъекта = "Документ" Тогда

		ВидыПредназначенияФорм.Добавить("ОсновнаяФормаДляВыбора", "Основная форма для выбора");
		ВидыПредназначенияФорм.Добавить("ОсновнаяФормаОбъекта", "Основная форма объекта");
		ВидыПредназначенияФорм.Добавить("ОсновнаяФормаСписка", "Основная форма списка");
		ВидыПредназначенияФорм.Добавить("ДополнительнаяФормаДляВыбора", "Дополнительная форма для выбора");
		ВидыПредназначенияФорм.Добавить("ДополнительнаяФормаОбъекта", "Дополнительная форма объекта");
		ВидыПредназначенияФорм.Добавить("ДополнительнаяФормаСписка", "Дополнительная форма списка");
		
	ИначеЕсли КлассаМенеджераОбъекта = "ЖурналДокументов" Тогда
		
		ВидыПредназначенияФорм.Добавить("ОсновнаяФорма", "Основная форма");
		
	КонецЕсли;
	
	Возврат ВидыПредназначенияФорм;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваОбъекта)
	
	Для Каждого СвойствоОбъекта Из СвойстваОбъекта Цикл
		Если СвойствоОбъекта.Ключ = "Описание" Или СтрНайти(СвойствоОбъекта.Ключ, "Группа") Тогда
			Продолжить;
		КонецЕсли;
		
		СвойстваОбъекта[СвойствоОбъекта.Ключ] = ПредставлениеСвойстваОбъекта(СвойствоОбъекта.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеСвойстваОбъекта(ЗначениеСвойства)
	
	Представление = "";
	Если ТипЗнч(ЗначениеСвойства) = Тип("Булево") Тогда
		Представление = ?(ЗначениеСвойства, "Да", "Нет");
	ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("СписокПолей") Тогда
		Для Каждого Поле Из ЗначениеСвойства Цикл
			Представление = Представление 
				+ ?(ПустаяСтрока(Представление), "", ", ") + Поле.Имя;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("КоллекцияЗначенийСвойстваОбъектаМетаданных") Тогда
		Для Каждого ОбъектМетаданных Из ЗначениеСвойства Цикл
			Представление = Представление + ?(ПустаяСтрока(Представление), "", ", ") 
				+ СтрЗаменить(ОбъектМетаданных.Имя, "_", "\_") + "{" + ТипОбъектаМетаданных(ОбъектМетаданных) + "}";
		КонецЦикла;
	ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("ОписаниеТипов") Тогда
		ТипыЗначенияСвоства = ТипыОбъектаМетаданных(ЗначениеСвойства.Типы());
		Для Каждого ТипаЗначенияСвойства Из ТипыЗначенияСвоства Цикл
			Представление = Представление + ?(ПустаяСтрока(Представление), "", ", ") 
				+ ТипаЗначенияСвойства.Значение; 
				
		КонецЦикла;
	Иначе
		Представление = Строка(ЗначениеСвойства);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТипОбъектаМетаданных(ОбъектМетаданных)
	
	Если Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных) Тогда
		Возврат "ПланОбмена";
	ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		Возврат "Справочник";
	ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		Возврат "Документ";
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) Тогда
		Возврат "РегистрыБухгалтерии";
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
		Возврат "РегистрыНакопления";
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных) Тогда
		Возврат "РегистрыРасчета";
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
		Возврат "РегистрыСведений";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьОписаниеПодчиненныхОбъектов(ОбъектМетаданныхСтруктуры)
	
	Для Каждого ПодчиненныйЭлемент Из ОбъектМетаданныхСтруктуры.ПолучитьЭлементы() Цикл
			
		Если ЭтоПодчиненныеЭлементыОбъекта(ПодчиненныйЭлемент) Тогда
			
			ДокументДобавитьНачалоПараграфа();
			ДокументДобавитьНаименованиеРаздела("**" + ПодчиненныйЭлемент.Синоним + ":**");
			ДобавитьОписаниеПодчиненныхОбъектовВДокумент(ОбъектМетаданныхСтруктуры, ПодчиненныйЭлемент);
				
		ИначеЕсли (ПодчиненныйЭлемент.Класс = "ТабличнаяЧасть" 
			И ПодчиненныйЭлемент.МенеджерПодчиненныхЭлементов) Тогда	 
			
			Для Каждого ТабличнаяЧастьОбъекта Из ПодчиненныйЭлемент.ПолучитьЭлементы() Цикл

				ДокументДобавитьНачалоПараграфа();
				ДокументДобавитьНаименованиеРаздела("**Табличная часть:** " + ТабличнаяЧастьОбъекта.Имя);
				ДобавитьОписаниеПодчиненныхОбъектовВДокумент(ОбъектМетаданныхСтруктуры, ТабличнаяЧастьОбъекта);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоПодчиненныеЭлементыОбъекта(ПодчиненныйЭлемент)
	
	Возврат ПодчиненныйЭлемент.Класс = "Измерение" 
			Или ПодчиненныйЭлемент.Класс = "Ресурс" 
			Или ПодчиненныйЭлемент.Класс = "Реквизит"
			Или ПодчиненныйЭлемент.Класс = "Значение"
			Или ПодчиненныйЭлемент.Класс = "Форма"
			Или ПодчиненныйЭлемент.Класс = "Команда"
			Или ПодчиненныйЭлемент.Класс = "Макет"
			
КонецФункции

&НаКлиенте
Процедура ДобавитьОписаниеПодчиненныхОбъектовВДокумент(ОбъектМетаданныхСтруктуры, МенеджерЭлементов)
	
	Если МенеджерЭлементов.Класс = "Команда" Тогда
		ЗаголовокТаблицы = "|Имя|Свойства|Описание|";
	ИначеЕсли МенеджерЭлементов.Класс = "Макет" Тогда 	
		ЗаголовокТаблицы = "|Имя|Тип|Описание|";
	Иначе
		ЗаголовокТаблицы = "|Имя|Тип|Свойства|Описание|";
	КонецЕсли;
	ФорматируемаяТаблица = ФорматируемаяТаблица(ЗаголовокТаблицы);
	ДанныеНовойСтроки = Новый Массив(); 
	
	Для Каждого Элемент Из МенеджерЭлементов.ПолучитьЭлементы() Цикл
		
		ДанныеНовойСтроки.Очистить();
		Если Не ЗначениеЗаполнено(Элемент.Свойства) Тогда
			ЗаполнитьСвойстваПодчиненногоЭлемента(ОбъектМетаданныхСтруктуры, МенеджерЭлементов, Элемент);
		КонецЕсли;

		ПредставлениеТипа = ПредставлениеТипаЭлемента(Элемент);
		Если ЗначениеЗаполнено(Элемент.Свойства) Тогда
			
			ПредставлениеСвойств = "";
			Для Каждого Свойство Из Элемент.Свойства Цикл
				Если Свойство.Ключ = "Описание" Тогда
					Продолжить;
				КонецЕсли;
								
				Если СтрНайти(Свойство.Ключ, "Группа") Тогда
					ПредставлениеСвойств = ПредставлениеСвойств + ?(ПустаяСтрока(ПредставлениеСвойств), "", " ") 
						+ "***" + Свойство.Значение + "***";
				Иначе
					ПредставлениеСвойств = ПредставлениеСвойств + ?(ПустаяСтрока(ПредставлениеСвойств), "", " ") 
						+ Свойство.Ключ + ": " + Свойство.Значение;
				КонецЕсли;
			КонецЦикла;

			ОписаниеЭлемента = "";
			Если ЗначениеЗаполнено(Элемент.Свойства.Описание.Комментарий) Тогда
				ОписаниеЭлемента = ОписаниеЭлемента + Элемент.Свойства.Описание.Комментарий;
			КонецЕсли;
			
			Если Элемент.Свойства.Описание.Свойство("Пояснение")
				И ЗначениеЗаполнено(Элемент.Свойства.Описание.Пояснение) Тогда
				ОписаниеЭлемента = ОписаниеЭлемента + " " + Элемент.Свойства.Описание.Пояснение;
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеНовойСтроки.Добавить(Элемент.Имя);
		Если Не МенеджерЭлементов.Класс = "Команда" Тогда
			ДанныеНовойСтроки.Добавить(ПредставлениеТипа);
		КонецЕсли;
		
		Если Не МенеджерЭлементов.Класс = "Макет" Тогда
			ДанныеНовойСтроки.Добавить(ПредставлениеСвойств);
		КонецЕсли;
		
		ДанныеНовойСтроки.Добавить(ОписаниеЭлемента);	
		
		ДобавитьСтрокуВФорматировануТаблицу(ФорматируемаяТаблица, ДанныеНовойСтроки);
		
	КонецЦикла;
	
	ОтформатироватьТаблицу(ФорматируемаяТаблица);
	ДокументВывестиФорматируемуюТаблицу(ФорматируемаяТаблица);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСвойстваПодчиненногоЭлемента(ОбъектМетаданныхСтруктуры, МенеджерЭлементовОбъекта, ЭлементОбъекта)
	
	ИмяМенеджераОбъекта = ИмяМенеджераОбъектов(ОбъектМетаданныхСтруктуры);
	Если ЭлементОбъекта.Класс = "Реквизит" Тогда
		
		ИмяТабличнойЧасти = "";
		Если МенеджерЭлементовОбъекта.Класс = "ТабличнаяЧасть" Тогда
			ИмяТабличнойЧасти = МенеджерЭлементовОбъекта.Имя;
		КонецЕсли;
		
		ЭлементОбъекта.Свойства = СвойстваРеквизита(
			ИмяМенеджераОбъекта, ОбъектМетаданныхСтруктуры.Имя, ЭлементОбъекта.Имя, ИмяТабличнойЧасти);
	ИначеЕсли ЭлементОбъекта.Класс = "Форма" Тогда 
			
		ЭлементОбъекта.Свойства = СвойстваФормы(
			ИмяМенеджераОбъекта, ОбъектМетаданныхСтруктуры.Имя, ОбъектМетаданныхСтруктуры.Класс, ЭлементОбъекта.Имя);	
	
	ИначеЕсли ЭлементОбъекта.Класс = "Команда" Тогда
	
		ЭлементОбъекта.Свойства = СвойстваКоманды(
			ИмяМенеджераОбъекта, ОбъектМетаданныхСтруктуры.Имя, ЭлементОбъекта.Имя);
				
	ИначеЕсли ЭлементОбъекта.Класс = "Макет" Тогда
		
		ЭлементОбъекта.Свойства = СвойстваМакета(
			ИмяМенеджераОбъекта, ОбъектМетаданныхСтруктуры.Имя, ЭлементОбъекта.Имя);
								
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция СвойстваРеквизита(ИмяМенеджераОбъекта, ИмяОбъектаРодителя, ИмяРеквизита, ИмяТабличнойЧасти = "")
	
	ЭтоРеквизитОбъекта = Ложь;
	Если ПустаяСтрока(ИмяТабличнойЧасти) Тогда
		ОбъектМетаданных = Метаданные[ИмяМенеджераОбъекта][ИмяОбъектаРодителя];
		ЭтоРеквизитОбъекта = Ложь;
	Иначе
		ОбъектМетаданных = Метаданные[ИмяМенеджераОбъекта][ИмяОбъектаРодителя].ТабличныеЧасти[ИмяТабличнойЧасти];
	КонецЕсли;
	
	РеквизитОбъекта = ОбъектМетаданных.Реквизиты[ИмяРеквизита];
	
	СвойстваРеквизита = Новый Структура();
	
	СвойстваРеквизита.Вставить("Описание", Новый Структура());
	СвойстваРеквизита.Описание.Вставить("Комментарий", РеквизитОбъекта.Комментарий);
	СвойстваРеквизита.Описание.Вставить("Пояснение", РеквизитОбъекта.Подсказка);
	
	СвойстваРеквизита.Вставить("ГруппаИспользование", "Использование");
	Если ЭтоРеквизитОбъекта Тогда
		СвойстваРеквизита.Вставить("Использование", РеквизитОбъекта.Использование);
	КонецЕсли;
	СвойстваРеквизита.Вставить("Индексирование", РеквизитОбъекта.Индексирование);
	СвойстваРеквизита.Вставить("ПолнотекстовыйПоиск", РеквизитОбъекта.ПолнотекстовыйПоиск);
	СвойстваРеквизита.Вставить("ИсторияДанных", РеквизитОбъекта.ИсторияДанных);
	
	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваРеквизита);
	
	Возврат СвойстваРеквизита;
	
КонецФункции

&НаСервереБезКонтекста
Функция СвойстваФормы(ИмяМенеджераОбъекта, ИмяОбъектаРодителя, КлассаМенеджераОбъекта, ИмяФормы)

	ОбъектМетаданных = Метаданные[ИмяМенеджераОбъекта][ИмяОбъектаРодителя];
	ФормаОбъекта = ОбъектМетаданных.Формы[ИмяФормы];
	
	СвойстваФормы = Новый Структура();
	
	СвойстваФормы.Вставить("Описание", Новый Структура());
	СвойстваФормы.Описание.Вставить("Комментарий", ФормаОбъекта.Комментарий);
		
	ВидыПредназначенияФорм = ВидыПредназначенияФормОбъекта(КлассаМенеджераОбъекта);
	Для Каждого ВидПрезназначенияФормы Из ВидыПредназначенияФорм Цикл
		Если ФормаОбъекта = ОбъектМетаданных[ВидПрезназначенияФормы.Значение] Тогда
			СвойстваФормы.Вставить(ВидПрезназначенияФормы.Значение, "Да");
		КонецЕсли;
	КонецЦикла;
	
	Возврат СвойстваФормы;
	
КонецФункции

&НаСервереБезКонтекста
Функция СвойстваКоманды(ИмяМенеджераОбъекта, ИмяОбъектаРодителя, ИмяКоманды)
	
	ОбъектМетаданныхКоманда = Метаданные[ИмяМенеджераОбъекта][ИмяОбъектаРодителя].Команды[ИмяКоманды];
	
	СвойстваКоманды = Новый Структура();
	
	СвойстваКоманды.Вставить("Описание", Новый Структура());
	СвойстваКоманды.Описание.Вставить("Комментарий", ОбъектМетаданныхКоманда.Комментарий);
	СвойстваКоманды.Описание.Вставить("Пояснение", ОбъектМетаданныхКоманда.Подсказка);
	
	СвойстваКоманды.Вставить("Группа", "Группа");
	СвойстваКоманды.Вставить("РасположениеКоманды", ОбъектМетаданныхКоманда.Группа);
	СвойстваКоманды.Вставить("ТипПараметраКоманды", ОбъектМетаданныхКоманда.ТипПараметраКоманды);
	СвойстваКоманды.Вставить("РежимИспользованияПараметра", ОбъектМетаданныхКоманда.РежимИспользованияПараметра);
	СвойстваКоманды.Вставить("ИзменяетДанные", ОбъектМетаданныхКоманда.ИзменяетДанные);
	
	СвойстваКоманды.Вставить("ГруппаПредставление", "Представление");
	СвойстваКоманды.Вставить("Отображение", ОбъектМетаданныхКоманда.Отображение);
	
	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваКоманды);
	
	Возврат СвойстваКоманды;
	
КонецФункции

&НаСервереБезКонтекста
Функция СвойстваМакета(ИмяМенеджераОбъекта, ИмяОбъектаРодителя, ИмяМакета)
	
	ОбъектМетаданныхМакет = Метаданные[ИмяМенеджераОбъекта][ИмяОбъектаРодителя].Макеты[ИмяМакета];
	
	СвойстваКоманды = Новый Структура();
	
	СвойстваКоманды.Вставить("Описание", Новый Структура());
	СвойстваКоманды.Описание.Вставить("Комментарий", ОбъектМетаданныхМакет.Комментарий);
	
	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваКоманды);
	
	Возврат СвойстваКоманды;
	
КонецФункции

&НаКлиенте
Функция ПредставлениеТипаЭлемента(Элемент)

	ПредставлениеТипа = "";
	Если ТипЗнч(Элемент.Тип) = Тип("Строка") Тогда
		ПредставлениеТипа = Элемент.Тип;
	ИначеЕсли ТипЗнч(Элемент.Тип) = Тип("СписокЗначений") Тогда

		Для Каждого Тип Из Элемент.Тип Цикл
			ПредставлениеТипа = ПредставлениеТипа 
				+ ?(ПустаяСтрока(ПредставлениеТипа), "", "; ") + Тип.Значение;
		КонецЦикла;

	КонецЕсли;
	
	Возврат ПредставлениеТипа;

КонецФункции

&НаСервереБезКонтекста
Функция ТипыОбъектаМетаданных(ОписаниеТиповОбъекта)
	
	Если ОписаниеТиповОбъекта.Количество() = 1 Тогда
		
		ТипРеквизита = ОписаниеТиповОбъекта[0];
		Возврат ТипЗначения(ТипРеквизита);
		
	Иначе
		
		СписокТипов = Новый СписокЗначений();
		Для Каждого ТипОбъекта Из ОписаниеТиповОбъекта Цикл
			СписокТипов.Добавить(ТипЗначения(ТипОбъекта));
		КонецЦикла;
		
		Возврат СписокТипов;
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТипЗначения(ТипМетаданных)
	
	Если ТипМетаданных = Тип("Число") Или ТипМетаданных = Тип("Строка") 
		Или ТипМетаданных = Тип("Булево") Или ТипМетаданных = Тип("Дата")
		Или ТипМетаданных = Тип("ХранилищеЗначения")
		Или ТипМетаданных = Тип("ПостроительОтчета")
		Или ТипМетаданных = Тип("ВидСравнения")
		Или ТипМетаданных = Тип("Отбор")
		Или ТипМетаданных = Тип("ПоляНастройки")
		Или ТипМетаданных = Тип("НаправлениеСортировки")Тогда
		
		ПредставлениеТипа = Строка(ТипМетаданных);
		
	Иначе 
		СсылкаТипа = Новый (ТипМетаданных);
		Если Перечисления.ТипВсеСсылки().СодержитТип(ТипМетаданных) Тогда
			ПредставлениеТипа = "ПеречислениеСсылка." + СсылкаТипа.Метаданные().Имя;
		ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипМетаданных) Тогда
			ПредставлениеТипа = "СправочникСсылка." + СсылкаТипа.Метаданные().Имя;
		ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипМетаданных) Тогда
			ПредставлениеТипа = "ДокументСсылка." + СсылкаТипа.Метаданные().Имя;
		ИначеЕсли ПланыОбмена.ТипВсеСсылки().СодержитТип(ТипМетаданных) Тогда
			ПредставлениеТипа = "ПланОбменаСсылка." + СсылкаТипа.Метаданные().Имя;
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат ПредставлениеТипа;
	
КонецФункции



#КонецОбласти

#Область ПодключениеКонвертераMarkDown

&НаСервере
Процедура ПодготовитьКонвертерМаркдаун()
	
	Конвертер = Новый Структура();
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Конвертер.Вставить("ОболочкаHtml", 
		ОбработкаОбъект.ПолучитьМакет("Converter").ПолучитьТекст());
		
	Конвертер.Вставить("Showdown_Style",
		ОбработкаОбъект.ПолучитьМакет("Showdown_Style").ПолучитьТекст());
	
	// Конвертор MarkDown
	ФайлShowdown = ОбработкаОбъект.ПолучитьМакет("Showdown");
	Конвертер.Вставить("ShowDown", 
		ПоместитьВоВременноеХранилище(ФайлShowdown, УникальныйИдентификатор));
	
	// Библиотека для конвертора
	ФайлShowdon_map = ОбработкаОбъект.ПолучитьМакет("ShowDownMap");
	Конвертер.Вставить("ShowDownMap", 
		ПоместитьВоВременноеХранилище(ФайлShowdon_map, УникальныйИдентификатор));
	
КонецПроцедуры

&НаКлиенте
Процедура РаспаковатьКонвертер()
	
	КаталогКонвертера = КаталогДляРаспаковкиКонвертера();
	
	ДанныеФайла = ПолучитьИзВременногоХранилища(Конвертер.ShowDownMap);
	ДанныеФайла.Записать(КаталогКонвертера + "\showdown.js.map");
	
	ДанныеФайла = ПолучитьИзВременногоХранилища(Конвертер.ShowDown);
	ПолноеИмяФайлаJS = КаталогКонвертера + "\showdown.js";
	ДанныеФайла.Записать(ПолноеИмяФайлаJS);
	
	КонтекстОболочкиHtml = Конвертер.ОболочкаHtml;
	ПодключитьКомпонетуККконвертеру("%%Showdown%%", ПолноеИмяФайлаJS, КонтекстОболочкиHtml);
	
	ПолноеИмяФайлаСтией = КаталогКонвертера + "\Showdown_Style.css";
	ФайлСтилей = Новый ТекстовыйДокумент();
	ФайлСтилей.УстановитьТекст(Конвертер.Showdown_Style);
	ФайлСтилей.Записать(ПолноеИмяФайлаСтией);
	
	ПодключитьКомпонетуККконвертеру("%%Styles%%", ПолноеИмяФайлаСтией, КонтекстОболочкиHtml);
	
	ДокументРезультат = КонтекстОболочкиHtml;				
				
КонецПроцедуры

&НаКлиенте
Функция КаталогДляРаспаковкиКонвертера()
	
	ИмяКаталога = КаталогВременныхФайлов() + "Converter";
	СоздатьКаталог(ИмяКаталога);
	
	Возврат ИмяКаталога;
	
КонецФункции

&НаКлиенте
Процедура ПодключитьКомпонетуККконвертеру(ИмяКомпонеты, ПолноеИмяФайлаКомпоненты, КонтекстОболочкиHtml)
	
	АдресПодключенияКомпоненты = ПолноеИмяФайлаВВидеURL(ПолноеИмяФайлаКомпоненты);
	КонтекстОболочкиHtml = СтрЗаменить(КонтекстОболочкиHtml, ИмяКомпонеты, АдресПодключенияКомпоненты);
	
КонецПроцедуры

&НаКлиенте
Функция ПолноеИмяФайлаВВидеURL(ПолноеИмяФайла)
	
	Возврат "file:///" + СокрЛП(СтрЗаменить(ПолноеИмяФайла, "\", "/"));
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСконвертированныйHtmlДокумент()
	
	ДокументHtml = Элементы.ДокументРезультат.Документ;
	ДокументHtml.parentWindow.converterMarkDownToHtml(РедактируемыйДокумент);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФорматируемойТаблицей

&НаКлиенте
Функция ФорматируемаяТаблица(ЗаголовокТаблицы)
	
	ФорматируемаяТаблица = Новый Структура("КоличествоКолонок, ШиринаКолонок, СтрокиТаблицы");
	ФорматируемаяТаблица.СтрокиТаблицы = Новый Массив();
	
	ОбрезальГраницыЗаголовкаТаблицы(ЗаголовокТаблицы);
	
	ЗначенияКолонокЗаголовка = СтрРазделить(ЗаголовокТаблицы, "|");
	ФорматируемаяТаблица.КоличествоКолонок = ЗначенияКолонокЗаголовка.Количество();
	ФорматируемаяТаблица.СтрокиТаблицы.Добавить(ЗначенияКолонокЗаголовка);
	СтрокаРазделительЗаголовка = Новый Массив(ФорматируемаяТаблица.КоличествоКолонок);
	ФорматируемаяТаблица.СтрокиТаблицы.Добавить(СтрокаРазделительЗаголовка);
		
	ФорматируемаяТаблица.ШиринаКолонок = Новый Массив(ФорматируемаяТаблица.КоличествоКолонок);
	
	Для ИндексКолонки = 0 По ФорматируемаяТаблица.КоличествоКолонок - 1 Цикл
		ФорматируемаяТаблица.ШиринаКолонок[ИндексКолонки] = 
			Макс(0, СтрДлина(" " + СокрЛП(ЗначенияКолонокЗаголовка[ИндексКолонки] + " ")));
	КонецЦикла;
	
	Возврат ФорматируемаяТаблица;

КонецФункции

&НаКлиенте
Процедура ОбрезальГраницыЗаголовкаТаблицы(ЗаголовокТаблицы)

	Если Лев(ЗаголовокТаблицы, 1) = "|" Тогда
		ЗаголовокТаблицы = Прав(ЗаголовокТаблицы, СтрДлина(ЗаголовокТаблицы) - 1);
	КонецЕсли;
	
	Если Прав(ЗаголовокТаблицы, 1) = "|" Тогда
		ЗаголовокТаблицы = Лев(ЗаголовокТаблицы, СтрДлина(ЗаголовокТаблицы) - 1);
	КонецЕсли;
	
КонецПроцедуры

// Создает новую строку форматированой таблицы.
// 
// Параметры:
//  ФорматируемаяТаблица - ФорматируемаяТаблица - Форматируемая таблица (см. ФорматируемаяТаблица()).
//  ДанныеСтроки - Массив - Содержит значения колонок новой строки.
&НаКлиенте
Процедура ДобавитьСтрокуВФорматировануТаблицу(ФорматируемаяТаблица, ДанныеСтроки);
	
	СтрокаТаблицы = Новый Массив(ФорматируемаяТаблица.КоличествоКолонок);
	Для ИндексКолонки = 0 По ФорматируемаяТаблица.КоличествоКолонок - 1 Цикл
		Если ИндексКолонки > ДанныеСтроки.ВГраница() Тогда
			ЗначениеКолонки = "";
		Иначе 
			ЗначениеКолонки = ДанныеСтроки[ИндексКолонки];
		КонецЕсли;
		
		ЗначениеКолонки = СокрЛП(ЗначениеКолонки);
		СтрокаТаблицы[ИндексКолонки] = ЗначениеКолонки;	
		ФорматируемаяТаблица.ШиринаКолонок[ИндексКолонки] = 
			Макс(ФорматируемаяТаблица.ШиринаКолонок[ИндексКолонки], СтрДлина(" " + ЗначениеКолонки + " "));
				
	КонецЦикла;
	
	ФорматируемаяТаблица.СтрокиТаблицы.Добавить(СтрокаТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтформатироватьТаблицу(ФорматируемаяТаблица)
	
	ИндексСтрокиРазделителяЗаголовка = 1;
	СтрокиТаблицы = ФорматируемаяТаблица.СтрокиТаблицы;
	Для ИндексСтроки = 0 По СтрокиТаблицы.Количество() - 1 Цикл
		Для индексКолонки = 0 По ФорматируемаяТаблица.КоличествоКолонок - 1 Цикл
			
			ЗначениеКолонки = СтрокиТаблицы[ИндексСтроки][ИндексКолонки];
			ЗначениеКолонки = " " + СокрЛП(ЗначениеКолонки);
			
			ДлинаЗначения = СтрДлина(ЗначениеКолонки);
			Если ДлинаЗначения < ФорматируемаяТаблица.ШиринаКолонок[ИндексКолонки] Тогда
				Если ИндексСтроки = ИндексСтрокиРазделителяЗаголовка Тогда
					СимволНаполнения = "-";
				Иначе
					СимволНаполнения = " ";
				КонецЕсли;
				
				Для КоличествоСимволов = 1 По ФорматируемаяТаблица.ШиринаКолонок[ИндексКолонки] - ДлинаЗначения Цикл
					ЗначениеКолонки = ЗначениеКолонки + СимволНаполнения;
				КонецЦикла;
				
			КонецЕсли;
			
			СтрокиТаблицы[ИндексСтроки][ИндексКолонки] = ЗначениеКолонки;
						
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаДокументомРезультат

&НаКлиенте
Процедура ДокументДобавитьНаименованиеРаздела(ЗаголовокРаздела)
	
	РедактируемыйДокумент = РедактируемыйДокумент  + ЗаголовокРаздела;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументДобавитьБлокСвойтОбъекта()
	
	ДокументДобавитьПолосуРазделитель();
	ДокументДобавитьНачалоПараграфа();
	РедактируемыйДокумент = РедактируемыйДокумент + "**Свойства:**";
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументВывестиФорматируемуюТаблицу(ФорматируемаяТаблица)
	
	Для ИндексСтроки = 0 По ФорматируемаяТаблица.СтрокиТаблицы.Количество() - 1 Цикл
		
		ДокументДобавитьНовуюСтрокуТаблицы();
		РедактируемыйДокумент = РедактируемыйДокумент + "|";
		
		Для индексКолонки = 0 По ФорматируемаяТаблица.КоличествоКолонок - 1 Цикл
			РедактируемыйДокумент = РедактируемыйДокумент 
				+ ФорматируемаяТаблица.СтрокиТаблицы[ИндексСтроки][ИндексКолонки] + "|"; 
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументДобавитьЗаголовокТаблицыСвойств()
	
	ДокументДобавитьНачалоПараграфа();
	РедактируемыйДокумент = РедактируемыйДокумент + "|Свойство | Значение свойства| "
		+ Символ(10) + "|---|---|";
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументДобавитьВТаблицуСтрокуОписанияСвойства(ИмяСвойства, ЗначениеСвойства)
	
	Если СтрНайти(ИмяСвойства, "Группа") Тогда
		РедактируемыйДокумент = РедактируемыйДокумент + "***" + ЗначениеСвойства + "*** | ";
	Иначе
		РедактируемыйДокумент = РедактируемыйДокумент + ИмяСвойства + " | " +  ЗначениеСвойства;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументДобавитьНачалоПараграфа()
	
	РедактируемыйДокумент = РедактируемыйДокумент + Символ(10) + Символ(10);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументДобавитьЗаголовокТаблицы()
	
	ДокументДобавитьНачалоПараграфа();
	РедактируемыйДокумент = РедактируемыйДокумент + "Имя | Тип | Свойства | Описание"
		+ Символ(10) + "---------|----------|----------|---------";
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументДобавитьПереносСтроки()

	РедактируемыйДокумент = РедактируемыйДокумент + "  " + Символ(10);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументДобавитьНовуюСтрокуТаблицы()
	
	РедактируемыйДокумент = РедактируемыйДокумент + Символ(10);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВТаблицуСтрокуОписанияДанных(Имя, Тип, Описание, Поле = Неопределено)
	
	ПредставлениеСвойств = "";
	Если ЗначениеЗаполнено(Поле.Свойства) Тогда
		Для Каждого Свойство Из Поле.Свойства Цикл
			Если СтрНайти(Свойство, "Группа") Тогда
				ПредставлениеСвойств = ПредставлениеСвойств	+ "***" + Свойство.Значение + "***";
			Иначе
				ПредставлениеСвойств = ПредставлениеСвойств	+ Свойство.Ключ + ": " + Свойство.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РедактируемыйДокумент = РедактируемыйДокумент 
		+ Имя + " | " +  Тип + " | " +  ПредставлениеСвойств + " | " + Описание;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументДобавитьБлокНазначение(СвойстваОбъекта)
	
	Если Не ЗначениеЗаполнено(СвойстваОбъекта.Описание.Комментарий) 
		И Не ЗначениеЗаполнено(СвойстваОбъекта.Описание.Пояснение) Тогда
		Возврат;
	КонецЕсли;

	ДокументДобавитьНачалоПараграфа();
	РедактируемыйДокумент = РедактируемыйДокумент + "**Назначение:**";
		
	Если ЗначениеЗаполнено(СвойстваОбъекта.Описание.Комментарий) Тогда
		ДокументДобавитьПереносСтроки();
		РедактируемыйДокумент = РедактируемыйДокумент + СвойстваОбъекта.Описание.Комментарий;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СвойстваОбъекта.Описание.Пояснение) Тогда
		ДокументДобавитьПереносСтроки();
		РедактируемыйДокумент = РедактируемыйДокумент + СвойстваОбъекта.Описание.Пояснение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументДобавитьПолосуРазделитель()
	
	ДокументДобавитьНачалоПараграфа();
	РедактируемыйДокумент = РедактируемыйДокумент + "---";
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ДобавитьКартинкуВТекст()
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Фильтр = НСтр("ru = 'Картинка'; en = 'Image'")
		+ "(*.png)|*.png|(*.jpg)|*.jpg|(*.bmp)|*.bmp|(*.gif)|*.gif";
	
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выберите файлы";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		
		МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
		ИмяФайла = МассивФайлов[0];
		
	Иначе
        
        Предупреждение(НСтр("ru = 'Файл не выбран!'; en = 'File not selected!'"));
        
        Возврат;
        
	КонецЕсли;
    
	МаркерФорматирования = Новый Структура("Маркер, Представление", "![%%](" + ИмяФайла + ")", "Описание картинки");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);	

КонецПроцедуры

&НаКлиенте
Процедура СтруктураМетаданныхПередРазворачиванием(Элемент, Строка, Отказ)
	//TODO: Вставить содержимое обработчика
КонецПроцедуры


