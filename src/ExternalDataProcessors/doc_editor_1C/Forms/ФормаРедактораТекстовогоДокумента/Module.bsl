#Область ОписаниеПеременных

&НаСервере
Перем мЗаполнитьСтруктуруСПодчиненнымиЭлементами;

&НаКлиенте
Перем мОткрытыеФормы;

&НаКлиенте
Перем мНастройкиТекущегоЭлемента;

&НаКлиенте
Перем мКаталогФайловИсходников;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ПодготовитьКонвертерМаркдаун();
	ЗаполнитьСтруктуруМетаданных();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	РаспаковатьКонвертер();
//	мКаталогФайловИсходников = "G:\Git_repositorys\1C_editor\ConfigDump\";

КонецПроцедуры

// TODO: Метод не используется
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если Не ИмяСобытия = "ПривязкаОткрытойФормыКИнтерактивнойСправке" И Не ИмяСобытия = "УдалениеФормыИзИнтерактивнойСправке"
		И Не ИмяСобытия = "ОткрытиеФормыРедактораОбъектов" И Не ИмяСобытия = "ОкончаниеРедактированиОбъекта" Тогда

		Возврат;

	КонецЕсли;

	Если ИмяСобытия = "ОткрытиеФормыРедактораОбъектов" Тогда
		ЗаполнитьТипыМетаданных(Параметр);
	ИначеЕсли ИмяСобытия = "ОкончаниеРедактированиОбъекта" Тогда
		ДобавитьНовыйОбъектВСтруктуруМетаданных(Параметр);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РедакторТекстовогоДокументаПриИзменении(Элемент)

	ПоказатьСконвертированныйHtmlДокумент();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтруктураМетаданных

&НаКлиенте
Процедура СтруктураМетаданныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ДобавитьДанныеОбъектаВРедактор(ВыбраннаяСтрока, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура СтруктураМетаданныхПриАктивизацииСтроки(Элемент)

	Если СтруктураМетаданных.ПолучитьЭлементы().Количество() Тогда
		ОбъектМетаданных = ТекущийОбъектМетаданных();
		НастроитьКомандыКонтекстногоМеню(ОбъектМетаданных);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтруктураМетаданныхПередРазворачиванием(Элемент, Строка, Отказ)

	ТекущийОбъектМетаданных = СтруктураМетаданных.НайтиПоИдентификатору(Строка);
	ПодчиненныеЭлементыОбъекта = ТекущийОбъектМетаданных.ПолучитьЭлементы();
	Если ПодчиненныеЭлементыОбъекта.Количество() = 1 Тогда
		Если ПодчиненныеЭлементыОбъекта[0].Класс = "СлужебныйУзел" Тогда
			ПодчиненныеЭлементыОбъекта.Очистить();
			ДобавитьПодчиненныеОбъектыМенеджераКласса(
				Строка, ТекущийОбъектМетаданных.Имя, ТекущийОбъектМетаданных.Класс);
		ИначеЕсли ПодчиненныеЭлементыОбъекта[0].Класс = "СлужебныйУзелДанныхОбъекта" Тогда
			ПодчиненныеЭлементыОбъекта.Очистить();
			ДобавитьДанныеИФормыОбъектаМетаданных(
				Строка, ИмяМенеджераОбъектов(ТекущийОбъектМетаданных), ТекущийОбъектМетаданных.Имя);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область КомандыРедактора

&НаКлиенте
Процедура ДобавитьЖирныйШрифт(Команда)

	МаркерФорматирования = Новый Структура("Маркер, Представление", "**%%**", "Жирный шрифт");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНаклонныйШрифт(Команда)

	МаркерФорматирования = Новый Структура("Маркер, Представление", "*%%*", "Наклонный шрифт");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПодчеркнутыйШрифт(Команда)

	МаркерФорматирования = Новый Структура("Маркер, Представление", "__%%__", "Подчеркнутый шрифт");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗачеркнутыйШрифт(Команда)

	МаркерФорматирования = Новый Структура("Маркер, Представление", "--%%--", "Зачеркнутый шрифт");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПрограммныйКод(Команда)

	МаркерФорматирования = Новый Структура("Маркер, Представление", "```%%
																	|```", "Программный код");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЦитату(Команда)

	МаркерФорматирования = Новый Структура("Маркер, Представление", "> %%", "Цитата");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПунктСписка(Команда)

	МаркерФорматирования = Новый Структура("Маркер, Представление", "- %%", "Пункт списка");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПунктНумеровонногоСписка(Команда)

	МаркерФорматирования = Новый Структура("Маркер, Представление", "1. %%", "Пункт нумерованного списка");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКолонкуЗаголовка(Команда)

	МаркерФорматирования = Новый Структура("Маркер, Представление", "|%%|--", "Новая колонка заголовка");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКолонку(Команда)

	МаркерФорматирования = Новый Структура("Маркер, Представление", "|%%", "Новая колонка");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСсылку(Команда)

	МаркерФорматирования = Новый Структура("Маркер, Представление", "[Описание ссылки](%%)", "Ссылка");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКартинку(Команда)

	ДобавитьКартинкуВТекст();

КонецПроцедуры

#КонецОбласти

#Область КомандыРаботыСоСтруктуройМетаданных

&НаКлиенте
Процедура КомандаПоказатьДеревоМетаданных(Команда)

	Элементы.КнопкаПоказатьДеревоМетаданных.Пометка = Не Элементы.КнопкаПоказатьДеревоМетаданных.Пометка;
	Элементы.ГруппаСтруктураМетаданных.Видимость = Элементы.КнопкаПоказатьДеревоМетаданных.Пометка;

	Если Элементы.КнопкаПоказатьДеревоМетаданных.Пометка Тогда
		ПоказатьСтруктуруМетаданных();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаПоказатьСинонимОбъектаМетаданных(Команда)

	УстановитьВидимостьКолонкиСиноним();

КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьНовыйОбъект(Команда)

	ДобавитьНовыйОбъектВМенеджерОбъектов();

КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьРеквизит(Команда)

	ОбъектМетаданных = ТекущийОбъектМетаданных();

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИдентификаторВладельца", ОбъектМетаданных.ПолучитьИдентификатор());
	ПараметрыФормы.Вставить("ПолноеИмяВладельца", ОбъектМетаданных.ПолноеИмя);
	ПараметрыФормы.Вставить("Класс", "Реквизит");
	ПараметрыФормы.Вставить("УстановитьТип", Истина);

	ОткрытьФормуРедактораОбъекта(ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьТипОбъектаВДокумент(Команда)

	ДобавитьДанныеОбъектаВРедактор(Элементы.СтруктураМетаданных.ТекущаяСтрока, Истина);

КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьВИзбранные(Команда)

	ОбъектМетаданных = ТекущийОбъектМетаданных();
	СкопироватьДанныеОбъектаМетаданныхВБуфер(ОбъектМетаданных);

КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьОписаниеОбъекта(Команда)

	ДобавитьОписаниеОбъектаВДокумент();

КонецПроцедуры

&НаКлиенте
Процедура КомандаПоказатьСвойства(Команда)
	
//	УзелОбъектМетаданных = ТекущийОбъектМетаданных();
//	Если УзелОбъектМетаданных.ПолучитьЭлементы().Количество() Тогда
//		Возврат;
//	КонецЕсли; 
//	
//	ИмяМенеджераОбъектов = ИмяМенеджераОбъектов(УзелОбъектМетаданных);
//	ИндексЭлемента = УзелОбъектМетаданных.ПолучитьИдентификатор();
//	ДобавитьСвойстваОбъектаМетаданных(ИндексЭлемента, ИмяМенеджераОбъектов, УзелОбъектМетаданных.Имя);
//	
////	ЭлементОбъектМетаданных = СтруктураМетаданных.НайтиПоИдентификатору(ИндексЭлемента);
//	Элементы.СтруктураМетаданных.Развернуть(ИндексЭлемента);

КонецПроцедуры

&НаКлиенте
Процедура КомандаПолучитьСтруктуруФормы(Команда)

	ОбъектМетаданных = ТекущийОбъектМетаданных();
	ПолучитьСтруктуруЭлементовФормы(ОбъектМетаданных, Ложь, Истина);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыРаботыСКоманднымКонтекстом

&НаКлиенте
Процедура НастроитьКомандыКонтекстногоМеню(ОбъектМетаданных)

	Меню = Элементы.СтруктураМетаданных.КонтекстноеМеню;
	ОтключитьВидимостьКнопокКонтекстногоМеню(Меню);

	НастроитьКнопкуДобавитьВИзбранные(ОбъектМетаданных);
	НастроитьКнопкуОписаниеОбъекта(ОбъектМетаданных);
	НастроитьКнопкуПоказатьМодульОбъекта(ОбъектМетаданных);
	НастроитьКнопкуДобавитьДиаграммуОбъектов(ОбъектМетаданных);
	
	Возврат;
	
	Если Не (ЭтоСлужебныйЭлемент(ОбъектМетаданных) Или ЭтоМодулиПриложения(ОбъектМетаданных)) Тогда

		Элементы.ДобавитьНовыйОбъект.Заголовок = ПредставлениеКнопкиДобавитьОбъект(ОбъектМетаданных);
		Элементы.ДобавитьНовыйОбъект.Видимость = Истина;

	КонецЕсли;

	Если ОбъектМетаданных.ТабличнаяЧасть Тогда
		Элементы.ДобавитьРеквизит.Видимость = Истина;
	КонецЕсли;

	Если ОбъектМетаданных.МенеджерОбъектов = Ложь И (ЭтоЭлементУзлаОбщие(ОбъектМетаданных) Или ЭтоПрикладнойОбъект(
		ОбъектМетаданных)) Тогда

		Если Не (ОбъектМетаданных.Класс = "КритерийОтбора" Или ОбъектМетаданных.Класс = "ПакетXDTO"
			Или ОбъектМетаданных.Класс = "WebСервис" Или ОбъектМетаданных.Класс = "HTTPСервис"
			Или ОбъектМетаданных.Класс = "РегистрСведений" Или ОбъектМетаданных.Класс = "РегистрНакопления"
			Или ОбъектМетаданных.Класс = "РегистрБухгалтерии" Или ОбъектМетаданных.Класс = "РегистрРасчета") Тогда

			Элементы.ДобавитьОбъектВВидеТипа.Видимость = Истина;
		КонецЕсли;

		Если Не ОбъектМетаданных.Класс = "Константа" Тогда
			Элементы.ПоказатьСвойстваОбъекта.Видимость = Истина;
		КонецЕсли;

	КонецЕсли;

	Если Не ОбъектМетаданных.МенеджерОбъектов Тогда //И ЭтоПрикладнойОбъект(ОбъектМетаданных) Тогда

		Элементы.ДобавитьОписаниеОбъекта.Видимость = Истина;

	КонецЕсли;

	

	Если (ОбъектМетаданных.Класс = "ОбщаяКартинка" И ОбъектМетаданных.МенеджерОбъектов) Тогда
		Элементы.ПоказатьСвойстваОбъекта.Видимость = Истина;
	КонецЕсли;

	Если ОбъектМетаданных.Класс = "Форма" И Не ПустаяСтрока(ОбъектМетаданных.ПолноеИмя) Тогда
		
//		Элементы.КнопкаПолучитьСтруктуруФормы.Видимость = Истина;
//		Элементы.КнопкаОткрытьНовуюИнтерактивнуюФорму.Видимость = Истина;
//		Элементы.КнопкаОткрытьФормуЗаписанногоОбъекта.Видимость = Истина;
//		Элементы.КнопкаДобавитьСсылкуНаОткрытуюФорму.Видимость = Истина;
//		Элементы.КнопкаОткрытьИнтерактивнуюФормуСоСкриптом.Видимость = Истина;

	КонецЕсли;

	Если Не ОбъектМетаданных.МенеджерОбъектов И ОбъектИмеетПрограммныйМодульОбъекта(ОбъектМетаданных) Тогда
		Элементы.ПоказатьМодульОбъекта.Видимость = Истина;
		Элементы.ПоказатьМодульМенеджера.Видимость = Истина;
	КонецЕсли;

КонецПроцедуры



&НаКлиенте
Процедура НастроитьКнопкуДобавитьВИзбранные(ОбъектМетаданныхСтруктуры)
	
	Если  ЭтоСлужебныйЭлемент(ОбъектМетаданныхСтруктуры) Или ОбъектМетаданныхСтруктуры.МенеджерОбъектов Тогда

		Возврат;	

	КонецЕсли;
	
	Элементы.ДобавитьВИзбранные.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКнопкуОписаниеОбъекта(ОбъектМетаданныхСтруктуры)
	
	Если (ЭтоСлужебныйЭлемент(ОбъектМетаданныхСтруктуры) Или ОбъектМетаданныхСтруктуры.МенеджерОбъектов) 
		И Не ОбъектМетаданныхСтруктуры.Класс = "Конфигурация" Тогда

		Возврат;		

	КонецЕсли;
	
	Элементы.ДобавитьОписаниеОбъекта.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКнопкуПоказатьМодульОбъекта(ОбъектМетаданныхСтруктуры)
	
	Если Не ОбъектИмеетПрограммныйМодульОбъекта(ОбъектМетаданныхСтруктуры) 
		Или ОбъектМетаданныхСтруктуры.МенеджерОбъектов Тогда
		Возврат;	
	КонецЕсли;
	
	Элементы.ПоказатьМодульОбъекта.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКнопкуДобавитьДиаграммуОбъектов(ОбъектМетаданныхСтруктуры)
	
	Если ОбъектМетаданныхСтруктуры.МенеджерОбъектов Или Не ЭтоПрикладнойОбъект(ОбъектМетаданныхСтруктуры) Тогда
		Возврат;	
	КонецЕсли;
	
	Элементы.ДобавитьДиаграммуОбъектов.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ОбъектИмеетПрограммныйМодульОбъекта(ОбъектМетаданных)

	Возврат ОбъектМетаданных.Класс = "МодульОбычногоПриложения" Или ОбъектМетаданных.Класс = "МодульУправляемогоПриложения"
		Или ОбъектМетаданных.Класс = "МодульВнешнегоСоединения" Или ОбъектМетаданных.Класс = "МодульСеанса"
		Или ОбъектМетаданных.Класс = "ОбщийМодуль" Или ОбъектМетаданных.Класс = "ПланОбмена"
		Или ОбъектМетаданных.Класс = "ОбщаяФорма" Или ОбъектМетаданных.Класс = "ОбщаяКоманда"
		Или ОбъектМетаданных.Класс = "HTTPСервис" Или ОбъектМетаданных.Класс = "WSСсылка"  
		Или ОбъектМетаданных.Класс = "Справочник" Или ОбъектМетаданных.Класс = "Документ" 
		Или ОбъектМетаданных.Класс = "Отчет" Или ОбъектМетаданных.Класс = "Обработка" 
		Или ОбъектМетаданных.Класс = "ПланВидовХарактеристик" Или ОбъектМетаданных.Класс = "ПланСчетов" 
		Или ОбъектМетаданных.Класс = "ПланВидовРасчета" Или ОбъектМетаданных.Класс = "РегистрСведений" 
		Или ОбъектМетаданных.Класс = "РегистрНакопления" Или ОбъектМетаданных.Класс = "РегистрБухгалтерии" 
		Или ОбъектМетаданных.Класс = "РегистрРасчета" Или ОбъектМетаданных.Класс = "БизнесПроцесс" 
		Или ОбъектМетаданных.Класс = "Задача" Или ОбъектМетаданных.Класс = "Форма" Или ОбъектМетаданных.Класс = "Команда";

КонецФункции
&НаКлиенте
Процедура ОтключитьВидимостьКнопокКонтекстногоМеню(Меню)

	Для Каждого КнопкаМеню Из Меню.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(КнопкаМеню) = Тип("КнопкаФормы") Тогда
			КнопкаМеню.Видимость = Ложь;
		Иначе
			ОтключитьВидимостьКнопокКонтекстногоМеню(КнопкаМеню);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ПредставлениеКнопкиДобавитьОбъект(ОбъектМетаданных)

	КлассОбъекта = ОбъектМетаданных.Класс;

	СложноеПредставлениеКласса = Новый Структура;
	СложноеПредставлениеКласса.Вставить("Подсистема", "подсистему");
	СложноеПредставлениеКласса.Вставить("ПодпискаНаСобытие", "Подписку на событие");
	СложноеПредставлениеКласса.Вставить("ФункциональнаяОпция", "Функциональную опцию");
	СложноеПредставлениеКласса.Вставить("ОбщаяФорма", "Общую форму");
	СложноеПредставлениеКласса.Вставить("ОбщаяКоманда", "Общую команду");
	СложноеПредставлениеКласса.Вставить("ГруппаКоманд", "Группу команд");
	СложноеПредставлениеКласса.Вставить("ОбщаяКартинка", "Общую картинку");
	СложноеПредставлениеКласса.Вставить("ПакетXDTO", "Пакет XDTO");
	СложноеПредставлениеКласса.Вставить("HTTPСервис", "HTTP сервис");
	СложноеПредставлениеКласса.Вставить("WSСсылка", "WS ссылку");
	СложноеПредставлениеКласса.Вставить("Константа", "Константу");
	СложноеПредставлениеКласса.Вставить("Константа", "Константу");
	СложноеПредставлениеКласса.Вставить("Обработка", "Обработку");
	СложноеПредставлениеКласса.Вставить("Задача", "Задачу");
	СложноеПредставлениеКласса.Вставить("ТабличнаяЧасть", "Табличную часть");
	СложноеПредставлениеКласса.Вставить("Форма", "Форму");
	СложноеПредставлениеКласса.Вставить("Команда", "Команду");

	Если СложноеПредставлениеКласса.Свойство(КлассОбъекта) Тогда
		Возврат "Добавить " + СложноеПредставлениеКласса[КлассОбъекта];
	КонецЕсли;

	ПредставлениеКласса = Лев(КлассОбъекта, 1);
	Для НомерСимвола = 2 По СтрДлина(КлассОбъекта) Цикл

		СимволСтроки = Сред(КлассОбъекта, НомерСимвола, 1);
		Если СимволСтроки = ВРег(СимволСтроки) Тогда
			ПредставлениеКласса = ПредставлениеКласса + " ";
		КонецЕсли;

		ПредставлениеКласса = ПредставлениеКласса + НРег(СимволСтроки);

	КонецЦикла;

	Возврат "Добавить " + ПредставлениеКласса;

КонецФункции // НастроитьКомандыКонтекстногоМеню()

#КонецОбласти

#Область Процедуры_работы_со_структурой_метаданных

&НаКлиенте
Процедура ПоказатьСтруктуруМетаданных()

	Если Не СтруктураМетаданных.ПолучитьЭлементы().Количество() Тогда
		
//		ВосстановитьСтруктуруМетаданныхИзКэша();
//		Если Не СтруктураМетаданных.ПолучитьЭлементы().Количество() Тогда
		ЗаполнитьСтруктуруМетаданных();
//		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруМетаданных()

	ДобавитьОсновныеСвойстваКонфигурации();
	ДобавитьОбщиеКлассыОбъектовМетаданных();
	ДобавитьКлассыПрикладныхОбъектов();

КонецПроцедуры

&НаСервере
Процедура ДобавитьОсновныеСвойстваКонфигурации()

	ЭлементыДерева = СтруктураМетаданных.ПолучитьЭлементы();

	УзелБуфер = ЭлементыДерева.Добавить();
	УзелБуфер.Класс = "Буфер";
	УзелБуфер.Имя 	 = "ВыбранныеОбъекты";
	УзелБуфер.Синоним = "Выбранные объекты";
	УзелБуфер.ПолноеИмя = "";
	УстановитьИконкуОбъектаМетаданных(УзелБуфер);

	УзелРасшериний = УзелБуфер.ПолучитьЭлементы().Добавить();
	УзелРасшериний.Имя = "Расширения";
	УзелРасшериний.Синоним = "Внешние отчеты и обработки";
	УзелРасшериний.Класс   = "Расширения";
	УстановитьИконкуОбъектаМетаданных(УзелРасшериний);

	СтрокаКонфигурации = ЭлементыДерева.Добавить();

	СтрокаКонфигурации.Класс = "Конфигурация";
	СтрокаКонфигурации.Имя 	 = Метаданные.Имя;
	СтрокаКонфигурации.Синоним = Метаданные.Представление();
	СтрокаКонфигурации.ПолноеИмя = Метаданные.ПолноеИмя();
	СтрокаКонфигурации.МенеджерОбъектов = Истина;
	УстановитьИконкуОбъектаМетаданных(СтрокаКонфигурации);

	ДобавитьМодулиКонфигурации(СтрокаКонфигурации);

КонецПроцедуры

&НаСервере
Процедура ДобавитьМодулиКонфигурации(ЭлементКонфигурации)

	ЭлементыКонфигурации = ЭлементКонфигурации.ПолучитьЭлементы();

	ЭлементМодуль = ЭлементыКонфигурации.Добавить();
	ЭлементМодуль.Класс = "МодульОбычногоПриложения";
	ЭлементМодуль.Имя 	 = "МодульОбычногоПриложения";
	ЭлементМодуль.Синоним = "Модуль обычного приложения";
	ЭлементМодуль.ПолноеИмя = "Конфигурация.МодульОбычногоПриложения";
	УстановитьИконкуОбъектаМетаданных(ЭлементМодуль);

	ЭлементМодуль = ЭлементыКонфигурации.Добавить();
	ЭлементМодуль.Класс = "МодульУправляемогоПриложения";
	ЭлементМодуль.Имя 	 = "МодульУправляемогоПриложения";
	ЭлементМодуль.Синоним = "Модуль управляемого приложения";
	ЭлементМодуль.ПолноеИмя = "Конфигурация.МодульУправляемогоПриложения";
	УстановитьИконкуОбъектаМетаданных(ЭлементМодуль);

	ЭлементМодуль = ЭлементыКонфигурации.Добавить();
	ЭлементМодуль.Класс = "МодульВнешнегоСоединения";
	ЭлементМодуль.Имя 	 = "МодульВнешнегоСоединения";
	ЭлементМодуль.Синоним = "Модуль внешнего соединения";
	ЭлементМодуль.ПолноеИмя = "Конфигурация.МодульВнешнегоСоединения";
	УстановитьИконкуОбъектаМетаданных(ЭлементМодуль);

	ЭлементМодуль = ЭлементыКонфигурации.Добавить();
	ЭлементМодуль.Класс = "МодульСеанса";
	ЭлементМодуль.Имя 	 = "МодульСеанса";
	ЭлементМодуль.Синоним = "Модуль сеанса";
	ЭлементМодуль.ПолноеИмя = "Конфигурация.МодульСеанса";
	УстановитьИконкуОбъектаМетаданных(ЭлементМодуль);

КонецПроцедуры

&НаСервере
Процедура ДобавитьОбщиеКлассыОбъектовМетаданных()

	ЭлементыСтруктуры = СтруктураМетаданных.ПолучитьЭлементы();

	ЭлементОбщие = ЭлементыСтруктуры.Добавить();
	ЭлементОбщие.Класс   = "Общие";
	ЭлементОбщие.Имя	 = "Общие";
	ЭлементОбщие.Синоним = "Общие";
	ЭлементОбщие.МенеджерОбъектов = Ложь;
	УстановитьИконкуОбъектаМетаданных(ЭлементОбщие);

	ДобавитьКлассыПодсистемы(ЭлементОбщие);
	ДобавитьМенеджерКлассаОбъектов(ЭлементОбщие, "ОбщиеМодули", "ОбщийМодуль", "Общие модули");
	ДобавитьМенеджерКлассаОбъектов(ЭлементОбщие, "ПараметрыСеанса", "ПараметрСеанса", "Параметры сеанса");
	ДобавитьМенеджерКлассаОбъектов(ЭлементОбщие, "Роли", "Роль", "Роли");
	ДобавитьМенеджерКлассаОбъектов(ЭлементОбщие, "ОбщиеРеквизиты", "ОбщийРеквизит", "Общие реквизиты");
	ДобавитьМенеджерКлассаОбъектов(ЭлементОбщие, "ПланыОбмена", "ПланОбмена", "Планы обмена");
	ДобавитьМенеджерКлассаОбъектов(ЭлементОбщие, "КритерииОтбора", "КритерийОтбора", "Критерии отбора");
	ДобавитьМенеджерКлассаОбъектов(ЭлементОбщие, "ПодпискиНаСобытия", "ПодпискаНаСобытие", "Подписки на события");
	ДобавитьМенеджерКлассаОбъектов(ЭлементОбщие, "РегламентныеЗадания", "РегламентноеЗадание", "Регламентные задания");
	ДобавитьМенеджерКлассаОбъектов(ЭлементОбщие, "ФункциональныеОпции", "ФункциональнаяОпция", "Функциональные опции");
	ДобавитьМенеджерКлассаОбъектов(
		ЭлементОбщие, "ПараметрыФункциональныхОпций", "ПараметрФункциональнойОпции", "Параметры функциональных опций");
	ДобавитьМенеджерКлассаОбъектов(ЭлементОбщие, "ОпределяемыеТипы", "ОпределяемыйТип", "Определяемые типы");
	ДобавитьМенеджерКлассаОбъектов(ЭлементОбщие, "ХранилищаНастроек", "ХранилищеНастроек", "Хранилища настроек");
	ДобавитьМенеджерКлассаОбъектов(ЭлементОбщие, "ОбщиеФормы", "ОбщаяФорма", "Общие формы");
	ДобавитьМенеджерКлассаОбъектов(ЭлементОбщие, "ОбщиеКоманды", "ОбщаяКоманда", "Общие команды");
	ДобавитьМенеджерКлассаОбъектов(ЭлементОбщие, "ГруппыКоманд", "ГруппаКоманд", "Группы команд");
	ДобавитьМенеджерКлассаОбъектов(ЭлементОбщие, "Интерфейсы", "Интерфейс", "Интерфейсы");
	ДобавитьМенеджерКлассаОбъектов(ЭлементОбщие, "ОбщиеМакеты", "ОбщийМакет", "Общие макеты");
	ДобавитьМенеджерКлассаОбъектов(ЭлементОбщие, "ОбщиеКартинки", "ОбщаяКартинка", "Общие картинки");
	ДобавитьМенеджерКлассаОбъектов(ЭлементОбщие, "ПакетыXDTO", "ПакетXDTO", "XDTO-пакеты");
	ДобавитьМенеджерКлассаОбъектов(ЭлементОбщие, "WebСервисы", "WebСервис", "Web-сервисы");
	ДобавитьМенеджерКлассаОбъектов(ЭлементОбщие, "HTTPСервисы", "HTTPСервис", "HTTP-сервисы");
	ДобавитьМенеджерКлассаОбъектов(ЭлементОбщие, "WSСсылки", "WSСсылка", "WS-ссылки");
	ДобавитьМенеджерКлассаОбъектов(ЭлементОбщие, "Стили", "Стиль", "Стили");
	ДобавитьМенеджерКлассаОбъектов(ЭлементОбщие, "Языки", "Язык", "Языки");

КонецПроцедуры

&НаСервере
Процедура ДобавитьКлассыПодсистемы(ЭлементРодитель)

	ЭлементПодсистемы = ЭлементРодитель.ПолучитьЭлементы().Добавить();
	ЭлементПодсистемы.Класс = "Подсистема";
	ЭлементПодсистемы.Имя 	= "Подсистемы";
	ЭлементПодсистемы.Синоним = "Подсистемы";
	ЭлементПодсистемы.МенеджерОбъектов = Истина;
	УстановитьИконкуОбъектаМетаданных(ЭлементПодсистемы);

	Подсистемы = Метаданные.Подсистемы;

	Для Каждого Подсистема Из Подсистемы Цикл
		ДобавитьПодсистему(ЭлементПодсистемы, Подсистема);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьПодсистему(ЭлементРодитель, Подсистема)

	ЭлементПодсистема = ЭлементРодитель.ПолучитьЭлементы().Добавить();
	ЭлементПодсистема.Класс = "Подсистема";
	ЭлементПодсистема.Имя = Подсистема.Имя;
	ЭлементПодсистема.Синоним = Подсистема.Представление();
	ЭлементПодсистема.ПолноеИмя = Подсистема.ПолноеИмя();
	УстановитьИконкуОбъектаМетаданных(ЭлементПодсистема);

	Для Каждого ПодчиненнаяПодсистема Из Подсистема.Подсистемы Цикл
		ДобавитьПодсистему(ЭлементПодсистема, ПодчиненнаяПодсистема);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьКлассыПрикладныхОбъектов()

	ДобавитьМенеджерКлассаОбъектов(СтруктураМетаданных, "Константы", "Константа", "Константы");
	ДобавитьМенеджерКлассаОбъектов(СтруктураМетаданных, "Справочники", "Справочник", "Справочники");
	ДобавитьМенеджерКлассаОбъектов(СтруктураМетаданных, "Документы", "Документ", "Документы");
	ДобавитьМенеджерКлассаОбъектов(СтруктураМетаданных, "ЖурналыДокументов", "ЖурналДокументов", "Журналы документов");
	ДобавитьМенеджерКлассаОбъектов(СтруктураМетаданных, "Перечисления", "Перечисление", "Перечисления");
	ДобавитьМенеджерКлассаОбъектов(СтруктураМетаданных, "Отчеты", "Отчет", "Отчеты");
	ДобавитьМенеджерКлассаОбъектов(СтруктураМетаданных, "Обработки", "Обработка", "Обработки");
	ДобавитьМенеджерКлассаОбъектов(СтруктураМетаданных, "ПланыВидовХарактеристик", "ПланВидовХарактеристик",
		"Планы видов характеристик");
	ДобавитьМенеджерКлассаОбъектов(СтруктураМетаданных, "ПланыСчетов", "ПланСчетов", "Планы счетов");
	ДобавитьМенеджерКлассаОбъектов(СтруктураМетаданных, "ПланыВидовРасчета", "ПланВидовРасчета", "Планы видов расчета");
	ДобавитьМенеджерКлассаОбъектов(СтруктураМетаданных, "РегистрыСведений", "РегистрСведений", "Регистры сведений");
	ДобавитьМенеджерКлассаОбъектов(СтруктураМетаданных, "РегистрыНакопления", "РегистрНакопления",
		"Регистры накопления");
	ДобавитьМенеджерКлассаОбъектов(СтруктураМетаданных, "РегистрыБухгалтерии", "РегистрБухгалтерии",
		"Регистры бухгалтерии");
	ДобавитьМенеджерКлассаОбъектов(СтруктураМетаданных, "РегистрыРасчета", "РегистрРасчета", "Регистры расчета");
	ДобавитьМенеджерКлассаОбъектов(СтруктураМетаданных, "БизнесПроцессы", "БизнесПроцесс", "Бизнес-процессы");
	ДобавитьМенеджерКлассаОбъектов(СтруктураМетаданных, "Задачи", "Задача", "Задачи");
	ДобавитьМенеджерКлассаОбъектов(СтруктураМетаданных, "ВнешниеИсточникиДанных", "ВнешнийИсточникДанных",
		"Внешние источники данных");

КонецПроцедуры

&НаСервере
Процедура ДобавитьМенеджерКлассаОбъектов(ЭлементРодитель, ИмяМенеджераКласса, ИмяКласса, СинонимКласса)

	ДобавлятьСлужебныйУзел = Истина;
	Если ТипЗнч(ЭлементРодитель) = Тип("Число") Тогда
		ЭлементРодитель = СтруктураМетаданных.НайтиПоИдентификатору(ЭлементРодитель);
		ДобавлятьСлужебныйУзел = Ложь;
	КонецЕсли;

	ЭлементУзелМенеджер = ЭлементРодитель.ПолучитьЭлементы().Добавить();
	ЭлементУзелМенеджер.Класс = ИмяКласса;
	ЭлементУзелМенеджер.Имя   = ИмяМенеджераКласса;
	ЭлементУзелМенеджер.Синоним = ИмяМенеджераКласса;
	ЭлементУзелМенеджер.МенеджерОбъектов = Истина;

	УстановитьИконкуОбъектаМетаданных(ЭлементУзелМенеджер);
	
	Если ДобавлятьСлужебныйУзел Тогда
		ДобавитьСлужебныйУзел(ИмяМенеджераКласса, ЭлементУзелМенеджер);
	КонецЕсли;

КонецПроцедуры

// Добавление служеного узла предназначено для сокращения времени вывода структуры метаданных
// вместо конерктных объектов например документов добавляется служебный узел в менеджер документов
// если пользователю нужно будет раскрыть узел документов обработка удалит служебный узе и вместо него
// заполнить менеджер документов, документами содержащимися в структуре метаданных
// см. СтруктураМетаданныхПередРазворачиванием()
&НаСервере
Процедура ДобавитьСлужебныйУзел(ИмяМенеджераКласса, ЭлементУзелМенеджер)

	Если Метаданные[ИмяМенеджераКласса].Количество() Тогда
		ЭлементУзла = ЭлементУзелМенеджер.ПолучитьЭлементы().Добавить();
		ЭлементУзла.Имя = "СлужебныйУзел";
		ЭлементУзла.Класс = "СлужебныйУзел";
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьПодчиненныеОбъектыМенеджераКласса(ИдентификаторЭлементаРодителя, ИмяМенеджераКласса, ИмяКласса)

	ЭлементМенеджерКласса = СтруктураМетаданных.НайтиПоИдентификатору(ИдентификаторЭлементаРодителя);
	ДобавитьПодчиненныеЭлементыМенеджераКлассаДокумент(ЭлементМенеджерКласса);

	ОбъектыМетаданных = Метаданные[ИмяМенеджераКласса];
	ЭлементыРодительскогоУзла = ЭлементМенеджерКласса.ПолучитьЭлементы();
	Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл

		ЭлементОбъектМетаданных = ЭлементыРодительскогоУзла.Добавить();
		ЭлементОбъектМетаданных.Класс = ИмяКласса;
		ЭлементОбъектМетаданных.Имя = ОбъектМетаданных.Имя;
		ЭлементОбъектМетаданных.Синоним = ОбъектМетаданных.Представление();
		ЭлементОбъектМетаданных.ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
//		ЭлементОбъектМетаданных.Описание = ОбъектМетаданных.Комментарий;

		УстановитьИконкуОбъектаМетаданных(ЭлементОбъектМетаданных);

		Если ЭтоОбъектСсылочногоТипа(ЭлементОбъектМетаданных) Тогда
			ЭлементОбъектМетаданных.Тип = ИмяКласса + "Ссылка." + ЭлементОбъектМетаданных.Имя;
		КонецЕсли;

		Если ЭтоПрикладнойОбъект(ЭлементОбъектМетаданных) И Не ИмяКласса = "Константа" Тогда
			ДобавитьСлужебныйУзелДанныхОбъекта(ЭлементОбъектМетаданных);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьПодчиненныеЭлементыМенеджераКлассаДокумент(ЭлементМенеджерКласса)

	Если ЭлементМенеджерКласса.Класс = "Документ" И ЭлементМенеджерКласса.МенеджерОбъектов Тогда
		
		ДобавитьМенеджерКлассаОбъектов(
			ЭлементМенеджерКласса, "НумераторыДокументов", "НумераторДокументов", "Нумераторы");
		
		ДобавитьМенеджерКлассаОбъектов(
			ЭлементМенеджерКласса, "Последовательности", "Последовательность", "Последовательности");
			
	КонецЕсли;

КонецПроцедуры

// Добавление служеного узла предназначено для сокращения времени вывода структуры объекта метаданных
// вместо списка реквизитов, таб. частей добавляется служебный узел. Если пользователю нужно будет раскрыть узел объекта 
// для просмотра его данных, обработка удалит служебный узе и вместо него заполнить узел обмена, данными объекта.
// см. СтруктураМетаданныхПередРазворачиванием()
&НаСервере
Процедура ДобавитьСлужебныйУзелДанныхОбъекта(ЭлементУзелОбъекта)

	ЭлементУзла = ЭлементУзелОбъекта.ПолучитьЭлементы().Добавить();
	ЭлементУзла.Имя = "СлужебныйУзелДанныхОбъекта";
	ЭлементУзла.Класс = "СлужебныйУзелДанныхОбъекта";

КонецПроцедуры

&НаСервере
Процедура ДобавитьДанныеИФормыОбъектаМетаданных(ИдентификаторЭлементаРодителя, ИмяМенеджераКласса, ИмяОбъекта)

	ЭлементОбъектМетаданных = СтруктураМетаданных.НайтиПоИдентификатору(ИдентификаторЭлементаРодителя);

	ОбъектМетаданных = Метаданные[ИмяМенеджераКласса][ИмяОбъекта];
	
	ЭлементыХраненияДанных = ЭлементыХраненияДанныхОбъектомМетаданных(ИмяМенеджераКласса);
//	Если ЭлементыХраненияДанных.СтандартныеРеквизиты Тогда
//		ДобавитьКоллекциюДанныхОбъктаМетаданных(
//			ЭлементОбъектМетаданных, ОбъектМетаданных, "Реквизит", "СтандартныеРеквизиты");
//	КонецЕсли;
	
	Если ЭлементыХраненияДанных.Измерения Тогда
		ДобавитьКоллекциюДанныхОбъктаМетаданных(
			ЭлементОбъектМетаданных, ОбъектМетаданных, "Измерение", "Измерения");
	КонецЕсли;

	Если ЭлементыХраненияДанных.Ресурсы Тогда
		ДобавитьКоллекциюДанныхОбъктаМетаданных(
			ЭлементОбъектМетаданных, ОбъектМетаданных, "Ресурс", "Ресурсы");
	КонецЕсли;

	Если ЭлементыХраненияДанных.РеквизитыАдресации Тогда
		ДобавитьКоллекциюДанныхОбъктаМетаданных(
			ЭлементОбъектМетаданных, ОбъектМетаданных, "РеквизитАдресации", "РеквизитыАдресации");
	КонецЕсли;

	Если ЭлементыХраненияДанных.Графы Тогда
		ДобавитьКоллекциюДанныхОбъктаМетаданных(
			ЭлементОбъектМетаданных, ОбъектМетаданных, "Граф", "Графы");
	КонецЕсли;

	Если ЭлементыХраненияДанных.Реквизиты Тогда
		ДобавитьКоллекциюДанныхОбъктаМетаданных(
			ЭлементОбъектМетаданных, ОбъектМетаданных, "Реквизит", "Реквизиты");
	КонецЕсли;

	Если ЭлементыХраненияДанных.Перерасчеты Тогда
		ДобавитьКоллекциюДанныхОбъктаМетаданных(
			ЭлементОбъектМетаданных, ОбъектМетаданных, "Перерасчет", "Перерасчеты");
	КонецЕсли;

	Если ЭлементыХраненияДанных.ПризнакиУчета Тогда
		ДобавитьКоллекциюДанныхОбъктаМетаданных(
			ЭлементОбъектМетаданных, ОбъектМетаданных, "ПризнакУчета", "ПризнакиУчета");
	КонецЕсли;

	Если ЭлементыХраненияДанных.ПризнакиУчетаСубконто Тогда
		ДобавитьКоллекциюДанныхОбъктаМетаданных(
			ЭлементОбъектМетаданных, ОбъектМетаданных, "ПризнакУчетаСубконто", "ПризнакиУчетаСубконто");
	КонецЕсли;

	Если ЭлементыХраненияДанных.ЗначенияПеречисления Тогда
		ДобавитьКоллекциюДанныхОбъктаМетаданных(
			ЭлементОбъектМетаданных, ОбъектМетаданных, "Значение", "Значения");
	КонецЕсли;

	Если ЭлементыХраненияДанных.ТабличныеЧасти Тогда
		ДобавитьКоллекциюДанныхОбъктаМетаданных(
			ЭлементОбъектМетаданных, ОбъектМетаданных, "ТабличнаяЧасть", "ТабличныеЧасти");
	КонецЕсли;

	ПодчиненныеЭлементыОбъекта = ПодчиненныеЭлементыОбъектомМетаданных(ИмяМенеджераКласса);
	Если ПодчиненныеЭлементыОбъекта.Формы Тогда
		ДобавитьФормуОбъектаМетаданных(ИмяМенеджераКласса, ЭлементОбъектМетаданных, ОбъектМетаданных);
	КонецЕсли;

	Если ПодчиненныеЭлементыОбъекта.Команды Тогда
		ДобавитьКоллекциюДанныхОбъктаМетаданных(
			ЭлементОбъектМетаданных, ОбъектМетаданных, "Команда", "Команды");
	КонецЕсли;

	Если ПодчиненныеЭлементыОбъекта.Макеты Тогда
		ДобавитьКоллекциюДанныхОбъктаМетаданных(
			ЭлементОбъектМетаданных, ОбъектМетаданных, "Макет", "Макеты");
	КонецЕсли;

	Если ПодчиненныеЭлементыОбъекта.Таблицы Тогда
		ДобавитьКоллекциюДанныхОбъктаМетаданных(
			ЭлементОбъектМетаданных, ОбъектМетаданных, "Таблица", "Таблицы");
	КонецЕсли;

	Если ПодчиненныеЭлементыОбъекта.Кубы Тогда
		ДобавитьКоллекциюДанныхОбъктаМетаданных(
			ЭлементОбъектМетаданных, ОбъектМетаданных, "Куб", "Кубы");
	КонецЕсли;

	Если ПодчиненныеЭлементыОбъекта.Функции Тогда
		ДобавитьКоллекциюДанныхОбъктаМетаданных(
			ЭлементОбъектМетаданных, ОбъектМетаданных, "Функция", "Функции");
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭлементыХраненияДанныхОбъектомМетаданных(ИмяМенеджераКласса)

	ДанныеОбъектаМетаданных = Новый Структура;
//	ДанныеОбъектаМетаданных.Вставить("СтандартныеРеквизиты", Истина);
	ДанныеОбъектаМетаданных.Вставить("Измерения", Истина);
	ДанныеОбъектаМетаданных.Вставить("Ресурсы", Истина);
	ДанныеОбъектаМетаданных.Вставить("РеквизитыАдресации", Истина);
	ДанныеОбъектаМетаданных.Вставить("Графы", Истина);
	ДанныеОбъектаМетаданных.Вставить("Реквизиты", Истина);
	ДанныеОбъектаМетаданных.Вставить("Перерасчеты", Истина);
	ДанныеОбъектаМетаданных.Вставить("ПризнакиУчета", Истина);
	ДанныеОбъектаМетаданных.Вставить("ПризнакиУчетаСубконто", Истина);
	ДанныеОбъектаМетаданных.Вставить("ЗначенияПеречисления", Истина);
	ДанныеОбъектаМетаданных.Вставить("ТабличныеЧасти", Истина);
	
	МенеджерОбъектМетаданных = Метаданные[ИмяМенеджераКласса];
	Для Каждого Свойство Из ДанныеОбъектаМетаданных Цикл

		Если Не МенеджерОбъектМетаданных.Количество() Тогда
			Продолжить;
		КонецЕсли;

		Попытка
			ПодчиненныйКласс = МенеджерОбъектМетаданных[0][Свойство.Ключ];
		Исключение
			ДанныеОбъектаМетаданных[Свойство.Ключ] = Ложь;
		КонецПопытки;

	КонецЦикла;

	Возврат ДанныеОбъектаМетаданных;

КонецФункции

&НаСервереБезКонтекста
Функция ПодчиненныеЭлементыОбъектомМетаданных(ИмяМенеджераКласса)

	ПодчиненныеЭлементыОбъекта = Новый Структура;
	ПодчиненныеЭлементыОбъекта.Вставить("Формы", Истина);
	ПодчиненныеЭлементыОбъекта.Вставить("Команды", Истина);
	ПодчиненныеЭлементыОбъекта.Вставить("Макеты", Истина);
	ПодчиненныеЭлементыОбъекта.Вставить("Таблицы", Истина);
	ПодчиненныеЭлементыОбъекта.Вставить("Кубы", Истина);
	ПодчиненныеЭлементыОбъекта.Вставить("Функции", Истина);
	
	МенеджерОбъектМетаданных = Метаданные[ИмяМенеджераКласса];
	Для Каждого Свойство Из ПодчиненныеЭлементыОбъекта Цикл

		Если Не МенеджерОбъектМетаданных.Количество() Тогда
			Продолжить;
		КонецЕсли;

		Попытка
			ПодчиненныйКласс = МенеджерОбъектМетаданных[0][Свойство.Ключ];
		Исключение
			ПодчиненныеЭлементыОбъекта[Свойство.Ключ] = Ложь;
		КонецПопытки;

	КонецЦикла;

	Возврат ПодчиненныеЭлементыОбъекта;

КонецФункции

&НаСервере
Процедура ДобавитьКоллекциюДанныхОбъктаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных, КлассДанных, ИмяМенеджера)

	Если ЭлементОбъектМетаданных.Класс = "ТабличнаяЧасть" Тогда
//		Реквизиты таб. части добавляем в саму таб. часть без создания менеджера реквизитов
		МенеджерДанных = ЭлементОбъектМетаданных;
	Иначе
		МенеджерДанных = ДобавитьМенеджерКоллекцииДанных(ЭлементОбъектМетаданных, КлассДанных, ИмяМенеджера);
	КонецЕсли;

	Если КлассДанных = "Значение" Тогда
//		Для перечислений имя менеджера отличает от представления
		КоллекцияДанных = ОбъектМетаданных.ЗначенияПеречисления;
	Иначе
		КоллекцияДанных = ОбъектМетаданных[ИмяМенеджера];
	КонецЕсли;

	Если КоллекцияДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для Каждого ЭлементКоллекции Из КоллекцияДанных Цикл

		ЭлементКоллекцииДанных = МенеджерДанных.ПолучитьЭлементы().Добавить();
		ЭлементКоллекцииДанных.Класс = КлассДанных;
		ЭлементКоллекцииДанных.Имя = ЭлементКоллекции.Имя;
		ЭлементКоллекцииДанных.Синоним = ЭлементКоллекции.Синоним;
		ЭлементКоллекцииДанных.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя + "." + ЭлементКоллекции.Имя;

		УстановитьИконкуОбъектаМетаданных(ЭлементКоллекцииДанных);

		Если КлассДанных = "ТабличнаяЧасть" Тогда
			ДобавитьКоллекциюДанныхОбъктаМетаданных(
				ЭлементКоллекцииДанных, ЭлементКоллекции, "Реквизит", "Реквизиты");
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ДобавитьМенеджерКоллекцииДанных(ЭлементОбъектМетаданных, КлассДанных, ИмяМенеджера)

	ЭлементМенеджерКоллекцииДанных = ЭлементОбъектМетаданных.ПолучитьЭлементы().Добавить();
	ЭлементМенеджерКоллекцииДанных.Класс = КлассДанных;
	ЭлементМенеджерКоллекцииДанных.Имя = ИмяМенеджера;
	ЭлементМенеджерКоллекцииДанных.Синоним = ИмяМенеджера;
	ЭлементМенеджерКоллекцииДанных.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя;
	ЭлементМенеджерКоллекцииДанных.МенеджерПодчиненныхЭлементов = Истина;

	УстановитьИконкуОбъектаМетаданных(ЭлементМенеджерКоллекцииДанных);

	Возврат ЭлементМенеджерКоллекцииДанных;

КонецФункции

&НаСервере
Процедура ДобавитьФормуОбъектаМетаданных(ИмяМенеджераКласса, ЭлементРодитель, ОбъектМетаданных)

	ОбъектыСФормами = Новый СписокЗначений;
	ОбъектыСФормами.Добавить("ПланыОбмена");
	ОбъектыСФормами.Добавить("КритерииОтбора");
	ОбъектыСФормами.Добавить("Справочники");
	ОбъектыСФормами.Добавить("Документы");
	ОбъектыСФормами.Добавить("ЖурналыДокументов");
	ОбъектыСФормами.Добавить("Перечисления");
	ОбъектыСФормами.Добавить("Отчеты");
	ОбъектыСФормами.Добавить("Обработки");
	ОбъектыСФормами.Добавить("ПланыВидовХарактеристик");
	ОбъектыСФормами.Добавить("ПланыСчетов");
	ОбъектыСФормами.Добавить("ПланыВидовРасчета");
	ОбъектыСФормами.Добавить("РегистрыСведений");
	ОбъектыСФормами.Добавить("РегистрыНакопления");
	ОбъектыСФормами.Добавить("РегистрыБухгалтерии");
	ОбъектыСФормами.Добавить("БизнесПроцессы");
	ОбъектыСФормами.Добавить("Задачи");

	Если Не ОбъектыСФормами.НайтиПоЗначению(ИмяМенеджераКласса) = Неопределено Тогда

		ЭлементФормы = ДобавитьМенеджерФорм(ЭлементРодитель);

		Для Каждого ОбъектМетаданныхФорма Из ОбъектМетаданных.Формы Цикл

			ЭлементФорма = ЭлементФормы.ПолучитьЭлементы().Добавить();
			ЭлементФорма.Класс = "Форма";
			ЭлементФорма.Имя   = ОбъектМетаданныхФорма.Имя;
			ЭлементФорма.Синоним = ОбъектМетаданныхФорма.Представление();
			ЭлементФорма.ПолноеИмя = ОбъектМетаданныхФорма.ПолноеИмя();
			ЭлементФорма.Тип = ОбъектМетаданныхФорма.ТипФормы;
			
//			ДобавитьОписаниеФормы(ОбъектМетаданных, ИмяМенеджераКласса, ОбъектМетаданныхФорма, ЭлементФорма);			

			УстановитьИконкуОбъектаМетаданных(ЭлементФорма);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьМенеджерФорм(ЭлементОбъект)

	ЭлементФормы = ЭлементОбъект.ПолучитьЭлементы().Добавить();
	ЭлементФормы.Класс = "Форма";
	ЭлементФормы.Имя = "Формы";
	ЭлементФормы.Синоним = "Формы";
	ЭлементФормы.МенеджерПодчиненныхЭлементов = Истина;

	УстановитьИконкуОбъектаМетаданных(ЭлементФормы);

	Возврат ЭлементФормы;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьИконкуОбъектаМетаданных(ЭлементОбъектаМетаданных)

	Если (ЭлементОбъектаМетаданных.Класс = "Конфигурация") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 0;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "МодульОбычногоПриложения" 
		Или ЭлементОбъектаМетаданных.Класс = "МодульУправляемогоПриложения"
		Или ЭлементОбъектаМетаданных.Класс = "МодульВнешнегоСоединения" 
		Или ЭлементОбъектаМетаданных.Класс = "МодульСеанса") Тогда

		ЭлементОбъектаМетаданных.ИндексКартинки = 1;

	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Общие") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 5;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Буфер") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 58;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Расширения") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 59;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Подсистема") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 6;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ОбщийМодуль") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 7;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ПараметрСеанса") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 8;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Роль") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 9;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ОбщийРеквизит") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 10;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ПланОбмена") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 11;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "КритерийОтбора") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 12;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ПодпискаНаСобытие") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 13;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "РегламентноеЗадание") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 14;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ФункциональнаяОпция") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 15;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ПараметрФункциональнойОпции") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 16;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ОпределяемыйТип") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 17;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ХранилищеНастроек") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 18;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ОбщаяФорма" Или ЭлементОбъектаМетаданных.Класс = "Форма") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 19;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ОбщаяКоманда" Или ЭлементОбъектаМетаданных.Класс = "Команда") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 20;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ГруппаКоманд") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 21;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Интерфейс") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 22;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ОбщийМакет" Или ЭлементОбъектаМетаданных.Класс = "Макет") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 23;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ОбщаяКартинка") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 24;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ПакетXDTO") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 25;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "WebСервис") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 26;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "HTTPСервис") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 27;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "WSСсылка") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 28;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ЭлементСтиля") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 29;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Стиль") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 30;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Язык") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 31;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Константа") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 32;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Справочник") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 33;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "НумераторДокументов") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 34;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Последовательность") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 35;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Документ") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 36;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ЖурналДокументов") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 37;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Перечисление") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 38;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Отчет") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 39;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Обработка") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 41;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ПланВидовХарактеристик") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 43;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ПланСчетов") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 44;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ПланВидовРасчета") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 45;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "РегистрСведений") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 46;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "РегистрНакопления") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 47;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "РегистрБухгалтерии") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 48;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "РегистрРасчета") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 49;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "БизнесПроцесс") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 50;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Задача") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 51;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ВнешнийИсточникДанных") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 52;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Реквизит" Или ЭлементОбъектаМетаданных.Класс = "Значение") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 53;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ТабличнаяЧасть") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 54;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Измерение") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 55;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Ресурс" Или ЭлементОбъектаМетаданных.Класс = "РеквизитАдресации") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 56;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "РегистрНакопления") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 47;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "РегистрБухгалтерии") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 48;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "РегистрРасчета") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 49;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "БизнесПроцесс") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 50;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Задача") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 51;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ВнешнийИсточникДанных") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 52;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ТекущийОбъектМетаданных()

	Возврат СтруктураМетаданных.НайтиПоИдентификатору(Элементы.СтруктураМетаданных.ТекущаяСтрока);

КонецФункции

&НаКлиенте
Функция ИмяМенеджераОбъектов(УзелОбъектаМетаданных)

	Возврат МенеджераОбъектов(УзелОбъектаМетаданных).Имя;

КонецФункции

&НаКлиенте
Функция МенеджераОбъектов(УзелОбъектаМетаданных)

	Если Не УзелОбъектаМетаданных.МенеджерОбъектов Тогда
		МенеджераОбъектов = МенеджераОбъектов(УзелОбъектаМетаданных.ПолучитьРодителя());
	Иначе
		МенеджераОбъектов = УзелОбъектаМетаданных;
	КонецЕсли;

	Возврат МенеджераОбъектов;

КонецФункции

&НаКлиенте
Функция МенеджераПодчиненныхОбъектов(УзелОбъектаМетаданных)

	Если Не УзелОбъектаМетаданных.МенеджерПодчиненныхЭлементов И Не УзелОбъектаМетаданных.Класс = "ТабличнаяЧасть" Тогда
		МенеджераПодчиненныхОбъектов = МенеджераПодчиненныхОбъектов(УзелОбъектаМетаданных.ПолучитьРодителя());
	Иначе
		МенеджераПодчиненныхОбъектов = УзелОбъектаМетаданных;
	КонецЕсли;

	Возврат МенеджераПодчиненныхОбъектов;

КонецФункции

&НаКлиенте
Функция ВладелецПодчиненныхОбъектов(УзелОбъектаМетаданных)

	Если Не ЭтоПрикладнойОбъект(УзелОбъектаМетаданных) Тогда
		ВладелецПодчиненныхОбъектов = ВладелецПодчиненныхОбъектов(УзелОбъектаМетаданных.ПолучитьРодителя());
	Иначе
		ВладелецПодчиненныхОбъектов = УзелОбъектаМетаданных;
	КонецЕсли;

	Возврат ВладелецПодчиненныхОбъектов;

КонецФункции

&НаКлиенте
Функция ЭтоЭлементУзлаОбщие(ОбъектМетаданных)

	Возврат ОбъектМетаданных.Класс = "ПланОбмена" Или ОбъектМетаданных.Класс = "КритерийОтбора"
		Или ОбъектМетаданных.Класс = "ПакетXDTO" Или ОбъектМетаданных.Класс = "WebСервис" 
		Или ОбъектМетаданных.Класс = "HTTPСервис";

КонецФункции

&НаКлиенте
Функция ЭтоМодулиПриложения(ОбъектМетаданных)

	Возврат ОбъектМетаданных.Класс = "МодульОбычногоПриложения" Или ОбъектМетаданных.Класс = "МодульВнешнегоСоединения"
		Или ОбъектМетаданных.Класс = "МодульУправляемогоПриложения" Или ОбъектМетаданных.Класс = "МодульСеанса";

КонецФункции

&НаКлиенте
Функция ЭтоСлужебныйЭлемент(ОбъектМетаданныхСтруктуры)

	Возврат ОбъектМетаданныхСтруктуры.Класс = "Буфер" Или ОбъектМетаданныхСтруктуры.Класс = "Расширения"
		Или ОбъектМетаданныхСтруктуры.Класс = "Конфигурация" Или ОбъектМетаданныхСтруктуры.Класс = "Общие";

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоПрикладнойОбъект(ОбъектМетаданных)

	Возврат ОбъектМетаданных.Класс = "ПланОбмена" Или ОбъектМетаданных.Класс = "КритерийОтбора"
		Или ОбъектМетаданных.Класс = "Справочник" Или ОбъектМетаданных.Класс = "Константа" 
		Или ОбъектМетаданных.Класс = "Документ" Или ОбъектМетаданных.Класс = "ЖурналДокументов" 
		Или ОбъектМетаданных.Класс = "Перечисление" Или ОбъектМетаданных.Класс = "Отчет" 
		Или ОбъектМетаданных.Класс = "Обработка" Или ОбъектМетаданных.Класс = "ПланВидовХарактеристик"
		Или ОбъектМетаданных.Класс = "ПланСчетов" Или ОбъектМетаданных.Класс = "ПланВидовРасчета"
		Или ОбъектМетаданных.Класс = "РегистрСведений" Или ОбъектМетаданных.Класс = "РегистрНакопления"
		Или ОбъектМетаданных.Класс = "РегистрБухгалтерии" Или ОбъектМетаданных.Класс = "РегистрРасчета"
		Или ОбъектМетаданных.Класс = "БизнесПроцесс" Или ОбъектМетаданных.Класс = "Задача" 
		Или ОбъектМетаданных.Класс = "ВнешнийИсточникДанных";

КонецФункции

&НаСервере
Функция ЭтоОбъектСсылочногоТипа(ОбъектМетаданныхСтруктуры)

	Возврат ОбъектМетаданныхСтруктуры.Класс = "ПланОбмена" Или ОбъектМетаданныхСтруктуры.Класс = "Справочник" 
		Или ОбъектМетаданныхСтруктуры.Класс = "Документ" Или ОбъектМетаданныхСтруктуры.Класс = "Перечисление" 
		Или ОбъектМетаданныхСтруктуры.Класс = "ПланВидовХарактеристик" 
		Или ОбъектМетаданныхСтруктуры.Класс = "ПланСчетов" Или ОбъектМетаданныхСтруктуры.Класс = "ПланВидовРасчета"
		Или ОбъектМетаданныхСтруктуры.Класс = "БизнесПроцесс" Или ОбъектМетаданныхСтруктуры.Класс = "Задача";

КонецФункции

&НаКлиенте
Функция ЭтоПодчиненныеЭлементыОбъекта(ПодчиненныйЭлемент, ПроверятьТолькаЭлементыДанных = Ложь)

	ЭтоПодчиненныйЭлемент = ПодчиненныйЭлемент.Класс = "Граф" Или ПодчиненныйЭлемент.Класс = "Измерение" 
		Или ПодчиненныйЭлемент.Класс = "Ресурс" Или ПодчиненныйЭлемент.Класс = "Реквизит" 
		Или ПодчиненныйЭлемент.Класс = "РеквизитАдресации" Или ПодчиненныйЭлемент.Класс = "ПризнакУчета" 
		Или ПодчиненныйЭлемент.Класс = "ПризнакУчетаСубконто" Или ПодчиненныйЭлемент.Класс = "Значение";
		
	Если ПроверятьТолькаЭлементыДанных Тогда
		Возврат ЭтоПодчиненныйЭлемент;
	КонецЕсли;
	 
	Возврат ЭтоПодчиненныйЭлемент Или ПодчиненныйЭлемент.Класс = "Форма" Или ПодчиненныйЭлемент.Класс = "Команда"
		Или ПодчиненныйЭлемент.Класс = "Макет"

КонецФункции

&НаКлиенте
Функция ВыводитьДетальныеДанныеОбъекта(ОбъектМетаданныхСтруктуры)
	
	Если Элементы.СтруктураМетаданных.Развернут(ОбъектМетаданныхСтруктуры.ПолучитьИдентификатор()) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти // Процедуры_работы_со_структурой_метаданных

#Область ДобавлениеКонтекстаВДокумент

&НаКлиенте
Процедура ДобавитьДанныеОбъектаВРедактор(СтрокаЭлементаВыборка, ВВидеТипа)

	ОбъектМетаданных = СтруктураМетаданных.НайтиПоИдентификатору(СтрокаЭлементаВыборка);
	СкопироватьДанныеОбъектаМетаданныхВБуфер(ОбъектМетаданных);

	ПредставлениеОбъекта = МаркированноеПредставлениеОбъектаМетаданных(ОбъектМетаданных, ВВидеТипа);

	МаркерФорматирования = Новый Структура("Маркер, Представление, Объект", ПредставлениеОбъекта.Текст,
		ПредставлениеОбъекта.ВыделяемыйФрагмент, ОбъектМетаданных);

	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);

КонецПроцедуры // ДобавитьДанныеОбъектаВРедактор()

&НаКлиенте
Функция МаркированноеПредставлениеОбъектаМетаданных(ОбъектМетаданных, ВВидеТипа, ВыделятьЖирнымШрифтом = Ложь,
	Условие = "", ВыводитьБлокСкрипта = Ложь)

	МаркированныйТекст = Новый Структура("Текст, ВыделяемыйФрагмент");
	МаркированныйТекст.ВыделяемыйФрагмент = "";

	Если ОбъектМетаданных.Класс = "Форма" Тогда

		ОбъектВладелецФормы = ОбъектМетаданных.ПолучитьРодителя().ПолучитьРодителя();
		Если Не ОбъектВладелецФормы = Неопределено Тогда
			ПредставлениеОбъетка = ОбъектВладелецФормы.Синоним;
		Иначе
			ПредставлениеОбъетка = "";
		КонецЕсли;

		Если Условие = "ПереходитьТолькоНаОткрытыеФормы" Тогда
			МаркированныйТекст.Текст = "ФормаОткрыта=[" + ОбъектМетаданных.ПолноеИмя + "; %%" + ?(ВыводитьБлокСкрипта,
				" {Сообщить(""Это блок для скрипат"")}", "") + "]";
		Иначе
			МаркированныйТекст.Текст = "Форма=[" + ОбъектМетаданных.ПолноеИмя + "; %%" + ?(ВыводитьБлокСкрипта,
				" {Сообщить(""Это блок для скрипат"")}", "") + "]";
		КонецЕсли;

		МаркированныйТекст.ВыделяемыйФрагмент = ПредставлениеОбъетка;

	Иначе

		МаркированныйТекст.Текст = ОбъектМетаданных.ПолноеИмя;
		Если ОбъектМетаданных.Класс = "Реквизит" Или ОбъектМетаданных.Класс = "Измерение" Или ОбъектМетаданных.Класс
			= "Ресурс" Тогда

			Если ТипЗнч(ОбъектМетаданных.Тип) = Тип("Строка") Тогда
				МаркированныйТекст.Текст = МаркированныйТекст.Текст + ":{" + ОбъектМетаданных.Тип + "}";
			ИначеЕсли ТипЗнч(ОбъектМетаданных.Тип) = Тип("СписокЗначений") Тогда

				КоличествоТипов = ОбъектМетаданных.Тип.Количество();
				ИндексТипа = 1;

				МаркированныйТекст.Текст = МаркированныйТекст.Текст + ":{";
				Для Каждого Тип Из ОбъектМетаданных.Тип Цикл
					МаркированныйТекст.Текст = МаркированныйТекст.Текст + Тип.Значение + ?(КоличествоТипов
						= ИндексТипа, "", "; ");
					ИндексТипа = ИндексТипа + 1;
				КонецЦикла;

				МаркированныйТекст.Текст = МаркированныйТекст.Текст + "}";

			КонецЕсли;

		Иначе

			Если ВВидеТипа Тогда
				Если ЗначениеЗаполнено(ОбъектМетаданных.Тип) Тогда
					МаркированныйТекст.Текст = ":{" + ОбъектМетаданных.Тип + "}";
				Иначе
					МаркированныйТекст.Текст = ":{" + МаркированныйТекст.Текст + "}";
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

		Если ВыделятьЖирнымШрифтом Тогда
			МаркированныйТекст.Текст = "**" + МаркированныйТекст.Текст + "**%%";
		Иначе
			МаркированныйТекст.Текст = МаркированныйТекст.Текст + "%%";
		КонецЕсли;

	КонецЕсли;

	Возврат МаркированныйТекст;

КонецФункции

&НаКлиенте
Процедура ДобавитьМаркерВТекст(СтруктураМаркера, ВыделятьДобавленныйТекст)

	МаркерТекста = СтруктураМаркера.Маркер;
	ПредставлениеМаркера = СтруктураМаркера.Представление;

	Если ПредставлениеМаркера = "Объект метаданных" Тогда
		ПредставлениеМаркера = ИмяОбъектаМетаданных(СтруктураМаркера.Объект);
	КонецЕсли;

	ПолеРедактора = Элементы.РедакторТекстовогоДокумента;
	
	// Определяем выделенный кусок кода
	ВыделенныйТекст = ПолеРедактора.ВыделенныйТекст;

	Если ПустаяСтрока(ВыделенныйТекст) Тогда
		
		// Получаем позцию курсора
		НачалоСтроки  = 0;
		НачалоКолонки = 0;
		КонецСтроки  = 0;
		КонецКолонки = 0;

		ПолеРедактора.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
		
		// Добавляем новый текст
		НачалоМаркированногоТекста = Найти(МаркерТекста, "%%");
		ДлинаТекстаПредставления   = СтрДлина(ПредставлениеМаркера);

		МаркированныйТекст = СтрЗаменить(МаркерТекста, "%%", ПредставлениеМаркера);
		РедактируемыйДокумент = РедактируемыйДокумент + МаркированныйТекст;

		ТекущийЭлемент = ПолеРедактора;
		ПолеРедактора.ВыделенныйТекст = МаркированныйТекст;
		Если ВыделятьДобавленныйТекст Тогда
			
			// Выделяем текст для быстрой замены
			НачалоВыделенияТекста = НачалоКолонки + НачалоМаркированногоТекста - 1;
			ПолеРедактора.УстановитьГраницыВыделения(НачалоСтроки, НачалоВыделенияТекста, КонецСтроки,
				НачалоВыделенияТекста + ДлинаТекстаПредставления);

		КонецЕсли;

	Иначе

		ТекстОбрамленныйМаркерами = СтрЗаменить(МаркерТекста, "%%", ВыделенныйТекст);
		ПолеРедактора.ВыделенныйТекст = ТекстОбрамленныйМаркерами;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ИмяОбъектаМетаданных(ОбъектМетаданных)

	ИмяОбъекта = ИмяКлассаОбъекта(ОбъектМетаданных);

	Возврат ИмяОбъекта;

КонецФункции // ИмяОбъектаМетаданных()

&НаСервереБезКонтекста
Функция ИмяКлассаОбъекта(ОбъектМетаданных)

	КлассОбъекта = ОбъектМетаданных.Тип;
	Если Не ЗначениеЗаполнено(КлассОбъекта) Тогда
		Если ЗначениеЗаполнено(ОбъектМетаданных.Родитель.Тип) Тогда
			КлассОбъекта = ОбъектМетаданных.Родитель.Тип;
		Иначе
			Возврат "." + ОбъектМетаданных.Имя;
		КонецЕсли;
	КонецЕсли;

	ИндексЗначения = Перечисления.иид_ТипыОбъектовМетаданных.Индекс(КлассОбъекта);
	ИмяКласса = Метаданные.Перечисления.иид_ТипыОбъектовМетаданных.ЗначенияПеречисления[ИндексЗначения].Имя;

	Возврат ИмяКласса + "." + ОбъектМетаданных.Имя;

КонецФункции // ИмяКлассаОбъекта()

#КонецОбласти

#Область РаботаСБуферомСтруктуры

&НаКлиенте
Процедура СкопироватьДанныеОбъектаМетаданныхВБуфер(УзелЭлементаВыборка)

	УзелБуфераОбъектов = СтруктураМетаданных.ПолучитьЭлементы().Получить(0);

	РодительОбъекта = УзелЭлементаВыборка.ПолучитьРодителя();
	ОбъектМетаданныхИсточник = ОпределитьОбъектМетаданныхВыбранногоЭлемента(УзелЭлементаВыборка, РодительОбъекта);
	Если РодительОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяМенеджера = РодительОбъекта.Класс;

	ЭлементыБуфера = УзелБуфераОбъектов.ПолучитьЭлементы();
	УзелРазмещенияОбъектаВБуфере = УзелРазмещенияОбъектаВБуфере(ЭлементыБуфера, ИмяМенеджера, РодительОбъекта);
	СкопироватьВыбранныйОбъектВБуфер(УзелРазмещенияОбъектаВБуфере, ОбъектМетаданныхИсточник);

КонецПроцедуры

&НаКлиенте
Функция ОпределитьОбъектМетаданныхВыбранногоЭлемента(УзелЭлементаВыборка, РодительОбъекта)

	ВыбранныйОбъект = УзелЭлементаВыборка;
	РодительОбъекта = УзелЭлементаВыборка.ПолучитьРодителя();
	Пока Не РодительОбъекта = Неопределено И Не РодительОбъекта.МенеджерОбъектов Цикл
		ВыбранныйОбъект = РодительОбъекта;
		РодительОбъекта = РодительОбъекта.ПолучитьРодителя();
	КонецЦикла;

	Возврат ВыбранныйОбъект;

КонецФункции

&НаКлиенте
Функция УзелРазмещенияОбъектаВБуфере(ЭлементыБуфера, ИмяМенеджера, РодительОбъекта)

	УзелРазмещенияВБуфере = Неопределено;
	Для Каждого ЭлементБуфера Из ЭлементыБуфера Цикл
		Если ЭлементБуфера.Класс = ИмяМенеджера Тогда
			УзелРазмещенияВБуфере = ЭлементБуфера;
		КонецЕсли;
	КонецЦикла;

	Если УзелРазмещенияВБуфере = Неопределено Тогда
		УзелРазмещенияВБуфере = ЭлементыБуфера.Добавить();
		ЗаполнитьЗначенияСвойств(УзелРазмещенияВБуфере, РодительОбъекта);
	КонецЕсли;

	Возврат УзелРазмещенияВБуфере;

КонецФункции

&НаКлиенте
Процедура СкопироватьВыбранныйОбъектВБуфер(УзелРазмещенияВБуфере, ВыбранныйОбъект)

	ОбъектыУзлаБуфера = УзелРазмещенияВБуфере.ПолучитьЭлементы();
	Для Каждого ОбъектУзлаБуфера Из ОбъектыУзлаБуфера Цикл
		Если ОбъектУзлаБуфера.Имя = ВыбранныйОбъект.Имя Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;

	КопияОбъектаВБуфере = ОбъектыУзлаБуфера.Добавить();
	ЗаполнитьЗначенияСвойств(КопияОбъектаВБуфере, ВыбранныйОбъект);

	СкопироватьПодчиненныеЭлементыОбъекта(КопияОбъектаВБуфере, ВыбранныйОбъект.ПолучитьЭлементы());

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПодчиненныеЭлементыОбъекта(ОбъектПриемник, ПодчиненныеЭлементыИсходника)

	Если ПодчиненныеЭлементыИсходника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для Каждого ПодчиненныйЭлементИсходника Из ПодчиненныеЭлементыИсходника Цикл

		ПодчиненыйЭлементПриемника = ОбъектПриемник.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(ПодчиненыйЭлементПриемника, ПодчиненныйЭлементИсходника);

		СкопироватьПодчиненныеЭлементыОбъекта(ПодчиненыйЭлементПриемника,
			ПодчиненныйЭлементИсходника.ПолучитьЭлементы());

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РаботаСИнтерактивнойФормой

&НаКлиенте
Процедура ПолучитьСтруктуруЭлементовФормы(ОбъектМетаданныхФорма, ОткрытьФорму, ОткрытьФормуНовогоОбъекта)

	Если Не ОбъектМетаданныхФорма.Класс = "Форма" Или ПустаяСтрока(ОбъектМетаданныхФорма.ПолноеИмя) Тогда
		Возврат;
	КонецЕсли;

	СтруктураЭлементовИнтерактивнойФормы.ПолучитьЭлементы().Очистить();

	Если ОбъектМетаданныхФорма.СтруктураЭлементовФормы = Неопределено Тогда

		ВременнаяФормаИсточник = ПолучитьИнтерактивнуюФорму(ОбъектМетаданныхФорма, Истина);
		Если ВременнаяФормаИсточник = Неопределено Тогда
			Сообщить("Не удалось получить доступ к форме объекта");
			Возврат;
		КонецЕсли;
		
//		УстановитьВременныеОбработчикиСобытийФормы(ВременнаяФормаИсточник);
		ЗаполнитьСтруктуруЭлементовИнтерактивнойФормы(ВременнаяФормаИсточник);
		ВременнаяФормаИсточник = Неопределено;

		ФормаИсточник = ИнтерактивнаяФорма(
			ОбъектМетаданныхФорма, ОткрытьФорму, ОткрытьФормуНовогоОбъекта, Истина);

		ОбработатьПодчиненныеЭлементыФормы(ФормаИсточник);
		
//		ОбъектМетаданныхФорма.СтруктураЭлементовФормы = 
//		СохранитьСтруктуруЭлементовФормы(ОбъектМетаданныхФорма.ПолучитьИдентификатор());	

	Иначе
		ФормаИсточник = ИнтерактивнаяФорма(
			ОбъектМетаданныхФорма, ОткрытьФорму, ОткрытьФормуНовогоОбъекта, Истина);
	КонецЕсли; 
	
//	ПоказатьСтруктуруЭлементовФормы(ОбъектМетаданныхФорма);

КонецПроцедуры

&НаСервере
Процедура СохранитьСтруктуруЭлементовФормы(ИдентификаторОбъекта)

	ОбъектМетаданныхФорма = СтруктураМетаданных.НайтиПоИдентификатору(ИдентификаторОбъекта);

	ДеревоЗначений = РеквизитФормыВЗначение("СтруктураЭлементовИнтерактивнойФормы", Тип("ДеревоЗначений"));
	ОбъектМетаданныхФорма.СтруктураЭлементовФормы = ДеревоЗначений;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьИнтерактивнуюФорму(ОбъектМетаданныхФорма, ФормаНовогоОбъекта)

	ИнтерактивнаяФорма = Неопределено;
	//Попытка
	//	ИнтерактивнаяФорма = ПолучитьФорму(ОбъектМетаданныхФорма.ПолноеИмя);
	//Исключение
	//	
	//	Если (Найти(ОбъектМетаданныхФорма.ПолноеИмя, "ВнешняяОбработка") > 0 
	//		Или Найти(ОбъектМетаданныхФорма.ПолноеИмя, "ВнешнийОтчет") > 0) Тогда
	//		
	//		Сообщить("Не удалось найти форму, расширения. Убедитель что расширение добавлено в редактор");
	//		
	//	КонецЕсли;
	//	
	//КонецПопытки;
	
	//Возврат ИнтерактивнаяФорма;

	Если (Найти(ОбъектМетаданныхФорма.ПолноеИмя, "ВнешняяОбработка") > 0 Или Найти(ОбъектМетаданныхФорма.ПолноеИмя,
		"ВнешнийОтчет") > 0) Тогда

		Если Не ОбъектМетаданныхФорма.Свойство("ФайлРасширения") Тогда

			ОбъектМетаданныхФорма = ПолучитьУзелРасширенияПоПолномуИмени(ОбъектМетаданныхФорма.ПолноеИмя);
			Если ОбъектМетаданныхФорма = Неопределено Тогда

				Сообщить("Не удалось найти форму, убедитесь что расширение зарегистрировано в редакторе
						 |Добавьте расширение в соствав редактора");

				Возврат Неопределено;

			КонецЕсли;

		КонецЕсли;

		Если ОбъектМетаданныхФорма.Тип = "Обычная" Тогда

#Если ТолстыйКлиентОбычноеПриложение Тогда

			ИмяФайла = ОбъектМетаданныхФорма.ПолучитьРодителя().ПолучитьРодителя().ФайлРасширения;

			Если Найти(ОбъектМетаданныхФорма.ПолноеИмя, "ВнешняяОбработка") > 0 Тогда
				ИнтерактивнаяФорма = ВнешниеОбработки.ПолучитьФорму(ИмяФайла, ОбъектМетаданныхФорма.Имя);
			ИначеЕсли Найти(ОбъектМетаданныхФорма.ПолноеИмя, "ВнешнийОтчет") > 0 Тогда
				ИнтерактивнаяФорма = ВнешниеОтчеты.ПолучитьФорму(ИмяФайла, ОбъектМетаданныхФорма.Имя);
			КонецЕсли;

#ИначеЕсли Не ТолстыйКлиентОбычноеПриложение Тогда

			Возврат Неопределено;

#КонецЕсли

		Иначе

#Если ТолстыйКлиентУправляемоеПриложение Тогда

			ИнтерактивнаяФорма = ПолучитьФорму(ОбъектМетаданныхФорма.ПолноеИмя);

#ИначеЕсли Не ТолстыйКлиентУправляемоеПриложение Тогда

			Возврат Неопределено;

#КонецЕсли

		КонецЕсли
		;

	Иначе

		ПараметрыФормы = Новый Структура;
		Если (ФормаНовогоОбъекта = Ложь) Тогда

			ИмяОбъекта = ПолноеИмяОбъектаФормы(ОбъектМетаданныхФорма);
			ОбъектСсылка = ОткрытьФормуМодально(ИмяОбъекта + ".ФормаВыбора", Новый Структура("РежимВыбора", Истина));

			ПараметрыФормы.Вставить("Ключ", ОбъектСсылка);

		КонецЕсли;

		ИнтерактивнаяФорма = ПолучитьФорму(ОбъектМетаданныхФорма.ПолноеИмя, ПараметрыФормы);

	КонецЕсли;

	Возврат ИнтерактивнаяФорма;

КонецФункции

&НаКлиенте
Функция ПолучитьУзелРасширенияПоПолномуИмени(ПолноеИмяФормыРасширения)

	КонецИмени = Найти(ПолноеИмяФормыРасширения, ".Форма") - 1;
	ПолноеИмяРасширения = Лев(ПолноеИмяФормыРасширения, КонецИмени);

	УзелВыбранныеОбъекты = СтруктураМетаданных.НайтиПоИдентификатору(0);
	Если Не УзелВыбранныеОбъекты = Неопределено Тогда
		Для Каждого УзелМенеджер Из УзелВыбранныеОбъекты.ПолучитьЭлементы() Цикл
			Если УзелМенеджер.Имя = "Расширения" Тогда
				Для Каждого УзелОбъекта Из УзелМенеджер.ПолучитьЭлементы() Цикл
					Если УзелОбъекта.ПолноеИмя = ПолноеИмяРасширения Тогда
						Для Каждого УзелГруппыСвойств Из УзелОбъекта.ПолучитьЭлементы() Цикл
							Если УзелГруппыСвойств.Имя = "Формы" Тогда
								Для Каждого УзелФормы Из УзелГруппыСвойств.ПолучитьЭлементы() Цикл
									Если УзелФормы.ПолноеИмя = ПолноеИмяФормыРасширения Тогда
										Возврат УзелФормы;
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

&НаКлиенте
Функция ПолноеИмяОбъектаФормы(ОбъектМетаданныхФорма)

	Если Не ОбъектМетаданныхФорма.Класс = "Форма" И Не ПустаяСтрока(ОбъектМетаданныхФорма.ПолноеИмя) Тогда
		Возврат "";
	КонецЕсли;

	Возврат ОбъектМетаданныхФорма.ПолучитьРодителя().ПолучитьРодителя().ПолноеИмя;

КонецФункции

&НаКлиенте
Процедура УстановитьВременныеОбработчикиСобытийФормы(Форма)

	СобытияФорм = Новый Структура;

	СобытияФорм.Вставить("ВнешнееСобытие", "Маркер_Форма_ВнешнееСобытие");
	СобытияФорм.Вставить("ПередОткрытием", "Маркер_Форма_ПередОткрытием");
	СобытияФорм.Вставить("ПриОткрытии", "Маркер_Форма_ПриОткрытии");
	СобытияФорм.Вставить("ПриПовторномОткрытии", "Маркер_Форма_ПриПовторномОткрытии");
	СобытияФорм.Вставить("ОбработкаВыбора", "Маркер_Форма_ОбработкаВыбора");
	СобытияФорм.Вставить("ОбработкаОповещения", "Маркер_Форма_ОбработкаОповещения");
	СобытияФорм.Вставить("ОбработкаПроверкиЗаполнения", "Маркер_Форма_ОбработкаПроверкиЗаполнения");
	СобытияФорм.Вставить("ОбновлениеОтображения", "Маркер_Форма_ОбновлениеОтображения");
	СобытияФорм.Вставить("ОбработкаАктивизацииОбъекта", "Маркер_Форма_ОбработкаАктивизацииОбъекта");
	СобытияФорм.Вставить("ПриСменеСтраницы", "Маркер_Форма_ПриСменеСтраницы");
	СобытияФорм.Вставить("ПриИзмененииДанных", "Маркер_Форма_ПриИзмененииДанных");
	СобытияФорм.Вставить("ОбработкаЗаписиНовогоОбъекта", "Маркер_Форма_ОбработкаЗаписиНовогоОбъекта");
	СобытияФорм.Вставить("ПередЗаписью", "Маркер_Форма_ПередЗаписью");
	СобытияФорм.Вставить("ПриЗаписи", "Маркер_Форма_ПриЗаписи");
	СобытияФорм.Вставить("ПослеЗаписи", "Маркер_Форма_ПослеЗаписи");
	СобытияФорм.Вставить("ПередЗакрытием", "Маркер_Форма_ПередЗакрытием");
	СобытияФорм.Вставить("ПриЗакрытии", "Маркер_Форма_ПриЗакрытии");
	
	// Собираем список событий формы
	Для Каждого Событие Из СобытияФорм Цикл

		Попытка

			Форма.УстановитьДействие(Событие.Ключи, Неопределено);

		Исключение

		КонецПопытки;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ИнтерактивнаяФорма(ОбъектМетаданныхФорма, ОткрытьФорму, ОткрытьФормуНовогоОбъекта = Неопределено,
	АктивизироватьФорму = Истина)

	Если Не ОбъектМетаданныхФорма.Класс = "Форма" И Не ПустаяСтрока(ОбъектМетаданныхФорма.ПолноеИмя) Тогда
		Возврат Неопределено;
	КонецЕсли; 

// TODO: Разобраться с функционалом открытых форм
//	СсылкаНаФорму = мОткрытыеФормы.Найти(НРег(ОбъектМетаданныхФорма.ПолноеИмя), "ИмяФормы");
	СсылкаНаФорму = Неопределено;
	ИнтерактивнаяФорма = Неопределено;

	Если СсылкаНаФорму = Неопределено Тогда

		Если ТипЗнч(ОбъектМетаданныхФорма) = Тип("Структура") Тогда
			Если (ОбъектМетаданныхФорма.Форма.УсловияРаботыСФормой = "ФормаДолжнаБытьОткрыта") Тогда

				Сообщить("Перед продолжением работы необходмо выполнить предыдущие действия.");
				Возврат Неопределено;

			КонецЕсли;
		КонецЕсли;

		ИнтерактивнаяФорма = ПолучитьИнтерактивнуюФорму(ОбъектМетаданныхФорма, ОткрытьФормуНовогоОбъекта);
		Если ИнтерактивнаяФорма = Неопределено Тогда
			Возврат ИнтерактивнаяФорма;
		КонецЕсли;

		Если ОткрытьФорму Тогда

			СсылкаНаФорму = мОткрытыеФормы.Добавить();
			СсылкаНаФорму.ИмяФормы = НРег(ОбъектМетаданныхФорма.ПолноеИмя);
			СсылкаНаФорму.Форма    = ИнтерактивнаяФорма;
			СсылкаНаФорму.НомерСтроки = мОткрытыеФормы.Количество();

			ИнтерактивнаяФорма.Открыть();
			СсылкаНаФорму.ФормаОткрытаИнтерактивно = Истина;

		КонецЕсли;

	Иначе

		ИнтерактивнаяФорма = СсылкаНаФорму.Форма;
		Если СсылкаНаФорму.ФормаОткрытаИнтерактивно И Не ИнтерактивнаяФорма.Открыта() Тогда

			Если ТипЗнч(ОбъектМетаданныхФорма) = Тип("Структура") Тогда
				Если (ОбъектМетаданныхФорма.Форма.УсловияРаботыСФормой = "ФормаДолжнаБытьОткрыта") Тогда

					Сообщить("Перед продолжением работы необходмо выполнить предыдущие действия.");
					Возврат Неопределено;

				КонецЕсли;
			КонецЕсли; 
			
			// Создаем новую форму
			СсылкаНаФорму.Форма = Неопределено;
			//ИнтерактивнаяФорма = ПолучитьФорму(ОбъектМетаданныхФорма.ПолноеИмя);
			ИнтерактивнаяФорма = ПолучитьИнтерактивнуюФорму(ОбъектМетаданныхФорма, ОткрытьФормуНовогоОбъекта);
			Если ИнтерактивнаяФорма = Неопределено Тогда
				Возврат ИнтерактивнаяФорма;
			КонецЕсли;

			СсылкаНаФорму.ИмяФормы = НРег(ОбъектМетаданныхФорма.ПолноеИмя);
			СсылкаНаФорму.Форма    = ИнтерактивнаяФорма;
			СсылкаНаФорму.НастройкиТекущегоЭлемента = Неопределено;
			мНастройкиТекущегоЭлемента = Неопределено;

			Если ОткрытьФорму Тогда
				ИнтерактивнаяФорма.Открыть();
				СсылкаНаФорму.ФормаОткрытаИнтерактивно = Истина;
			КонецЕсли;

		Иначе
			Если АктивизироватьФорму Тогда
				ИнтерактивнаяФорма.Активизировать();
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	Возврат ИнтерактивнаяФорма;

КонецФункции

&НаКлиенте
Функция СтруктураЭлементовФормы(ФормаИсходник)
	
//	Если ТипЗнч(ФормаИсходник) = Тип("УправляемаяФорма") Тогда
//		ЭлементыИнтерактивнойФормы = ФормаИсходник.Элементы;
//	Иначе
//		ЭлементыИнтерактивнойФормы = ФормаИсходник.ЭлементыФормы;
//	КонецЕсли; 
//	
//	КоличествоЭлементовНаФорме = ЭлементыИнтерактивнойФормы.Количество();
//	
//	СтруктураЭлементовФормы = Новый ДеревоЗначений();
//	
//	СтруктураЭлементовФормы.Колонки.Добавить("ЭлементФормы");
//	СтруктураЭлементовФормы.Колонки.Добавить("Представление");
//	СтруктураЭлементовФормы.Колонки.Добавить("Тип", Новый ОписаниеТипов("Строка"));
//	СтруктураЭлементовФормы.Колонки.Добавить("ПорядокОбхода");
//	СтруктураЭлементовФормы.Колонки.Добавить("Доступность");
//	СтруктураЭлементовФормы.Колонки.Добавить("ПолныйПутьКЭлементуФормы");
//	СтруктураЭлементовФормы.Колонки.Добавить("ИндексКартинки");
//	СтруктураЭлементовФормы.Колонки.Добавить("ЭлементУправляемойФормы");
//	СтруктураЭлементовФормы.Колонки.Добавить("ВидГруппыФормы");
//	
//	Если ТипЗнч(ФормаИсходник) = Тип("УправляемаяФорма") Тогда
//		
//		ЗаполнитьСтруктуруЭлементовУправляемойФормы(ФормаИсходник, ЭлементыИнтерактивнойФормы, СтруктураЭлементовФормы);
//		СтруктураЭлементовФормы.Колонки.Удалить(СтруктураЭлементовФормы.Колонки.ВидГруппыФормы);
//		
//	Иначе
//		
//		КоличествоОбработаныхЭлементов = 
//			РаспределитьЭлементыПоПанелям(СтруктураПанелейФормы(ФормаИсходник).Строки, ФормаИсходник, СтруктураЭлементовФормы);
//	
//	КонецЕсли; 
//	
//	СтруктураЭлементовФормы.Строки.Сортировать("ПорядокОбхода", Истина);
//	
//	Возврат СтруктураЭлементовФормы;

КонецФункции

&НаКлиенте
Процедура ЗаполнитьСтруктуруЭлементовИнтерактивнойФормы(ФормаИсходник)

	СтруктураЭлементовИнтерактивнойФормы.ПолучитьЭлементы().Очистить();

	Если ТипЗнч(ФормаИсходник) = Тип("УправляемаяФорма") Тогда
		ЭлементыИнтерактивнойФормы = ФормаИсходник.Элементы;
	Иначе
		ЭлементыИнтерактивнойФормы = ФормаИсходник.ЭлементыФормы;
	КонецЕсли;

	Если ТипЗнч(ФормаИсходник) = Тип("УправляемаяФорма") Тогда

		ЗаполнитьСтруктуруЭлементовУправляемойФормы(ФормаИсходник, ЭлементыИнтерактивнойФормы);
//		СтруктураЭлементовФормы.Колонки.Удалить(СтруктураЭлементовФормы.Колонки.ВидГруппыФормы);

	Иначе
		
//		КоличествоОбработаныхЭлементов = 
//			РаспределитьЭлементыПоПанелям(СтруктураПанелейФормы(ФормаИсходник).Строки, ФормаИсходник, СтруктураЭлементовФормы);
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтруктуруЭлементовУправляемойФормы(ФормаИсходник, ЭлементыИнтерактивнойФормы)

	Для Каждого ЭлементФормы Из ЭлементыИнтерактивнойФормы Цикл

		Если Не ЭлементФормы.Родитель = Неопределено Тогда
			ЭлементРодитель = ЭлементРодитель(ФормаИсходник, ЭлементФормы.Родитель);
		Иначе
			ЭлементРодитель = СтруктураЭлементовИнтерактивнойФормы.ПолучитьЭлементы();
		КонецЕсли;

		УзелЭлементаФормы = НайтиЭлементФормыВСтруктуре(ЭлементФормы);
		Если УзелЭлементаФормы = Неопределено Тогда
			ДобавитьЭлементФормыВСтруктуруЭлементов(ФормаИсходник, ЭлементФормы, ЭлементРодитель);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ЭлементРодитель(ФормаИсходник, ЭлементФормыРодитель)

	ЭлементРодитель = НайтиЭлементФормыВСтруктуре(ЭлементФормыРодитель);
	Если Не ЭлементРодитель = Неопределено Тогда
		Возврат ЭлементРодитель;
	КонецЕсли;

	Если ТипЗнч(ЭлементФормыРодитель) = Тип("УправляемаяФорма") Тогда

		НовыйЭлементРодитель = СтруктураЭлементовИнтерактивнойФормы.ПолучитьЭлементы().Добавить();
		НовыйЭлементРодитель.ЭлементФормы  = ЭлементФормыРодитель.ИмяФормы;
		НовыйЭлементРодитель.Представление = "Управляемая форма";
		НовыйЭлементРодитель.ПорядокОбхода = 0;
		НовыйЭлементРодитель.ИндексКартинки = 0;
		НовыйЭлементРодитель.ЭлементУправляемойФормы = Истина;

		ЭлементПоиска = СписокЭлементовФормы.Добавить();
		ЭлементПоиска.ЭлементФормы = ЭлементФормыРодитель.ИмяФормы;
		ЭлементПоиска.ИдентификаторЭлементаВСтруктуре = НовыйЭлементРодитель.ПолучитьИдентификатор();

		Возврат НовыйЭлементРодитель;

	КонецЕсли;
	
//	Если Не ЭлементФормыРодитель.Родитель = Неопределено Тогда
//		
//		ЭлементРодитель = ЭлементРодитель(ФормаИсходник, ЭлементФормыРодитель.Родитель);
//		
//	КонецЕсли;

	НовыйЭлементРодитель = ДобавитьЭлементФормыВСтруктуруЭлементов(
		ФормаИсходник, ЭлементФормыРодитель, СтруктураЭлементовИнтерактивнойФормы);
	
//	НовыйЭлементРодитель = СтруктураЭлементовИнтерактивнойФормы.ПолучитьЭлементы().Добавить();
//	НовыйЭлементРодитель.ЭлементФормы  = ЭлементФормыРодитель.Имя;
//	НовыйЭлементРодитель.Представление = ЭлементФормыРодитель.Заголовок;
//	НовыйЭлементРодитель.ПорядокОбхода = ФормаИсходник.ПодчиненныеЭлементы.Индекс(ЭлементФормыРодитель);
//	НовыйЭлементРодитель.Тип = ТипЗнч(ЭлементФормыРодитель);
//	НовыйЭлементРодитель.ЭлементУправляемойФормы = Истина;
//	
//	ЭлементПоиска = СписокЭлементовФормы.Добавить();
//	ЭлементПоиска.ЭлементФормы = ЭлементФормыРодитель.Имя;
//	ЭлементПоиска.ИдентификаторЭлементаВСтруктуре = НовыйЭлементРодитель.ПолучитьИдентификатор();

	УстановитьИндексКартинки(НовыйЭлементРодитель);

	Возврат НовыйЭлементРодитель;

КонецФункции

&НаКлиенте
Функция НайтиЭлементФормыВСтруктуре(ЭлементФормы)

	Если ТипЗнч(ЭлементФормы) = Тип("УправляемаяФорма") Тогда
		ИмяЭлемента = ЭлементФормы.ИмяФормы;
	Иначе
		ИмяЭлемента = ЭлементФормы.Имя;
	КонецЕсли;

	Отбор = Новый Структура("ЭлементФормы", ИмяЭлемента);
	НайденыеСтроки = СписокЭлементовФормы.НайтиСтроки(Отбор);
	Если НайденыеСтроки.Количество() Тогда

		ИдентификаторЭлемента = НайденыеСтроки[0].ИдентификаторЭлементаВСтруктуре;
		УзелЭлементаФормы = СтруктураЭлементовИнтерактивнойФормы.НайтиПоИдентификатору(ИдентификаторЭлемента);

		Если Не УзелЭлементаФормы = Неопределено Тогда
			Возврат УзелЭлементаФормы;
		КонецЕсли;

	КонецЕсли;

	Возврат Неопределено;

КонецФункции

&НаКлиенте
Функция ДобавитьЭлементФормыВСтруктуруЭлементов(ФормаИсходник, ЭлементФормы, ЭлементРодитель)

	Если Прав(ЭлементФормы.Имя, 20) = "РасширеннаяПодсказка"
		//Или Прав(ЭлементФормы.Имя, 15) = "КонтекстноеМеню" 
	Тогда

		Возврат Неопределено;

	КонецЕсли;

	НовыйЭлемент = ЭлементРодитель.ПолучитьЭлементы().Добавить();
	НовыйЭлемент.ЭлементФормы  = ЭлементФормы.Имя;
	НовыйЭлемент.Представление = ЭлементФормы.Заголовок;
	НовыйЭлемент.ПорядокОбхода = ФормаИсходник.ПодчиненныеЭлементы.Индекс(ЭлементФормы);
	НовыйЭлемент.Тип = ТипЗнч(ЭлементФормы);
	НовыйЭлемент.ЭлементУправляемойФормы = Истина;

	ЭлементПоиска = СписокЭлементовФормы.Добавить();
	ЭлементПоиска.ЭлементФормы = ЭлементФормы.Имя;
	ЭлементПоиска.ИдентификаторЭлементаВСтруктуре = НовыйЭлемент.ПолучитьИдентификатор();

	Если ТипЗнч(ЭлементФормы) = Тип("ГруппаФормы") Тогда
		НовыйЭлемент.ВидГруппыФормы = ЭлементФормы.Вид;
	КонецЕсли;

	УстановитьИндексКартинки(НовыйЭлемент);

	Возврат НовыйЭлемент;

КонецФункции

&НаКлиенте
Процедура УстановитьИндексКартинки(ЭлементФормы)

	Если ЭлементФормы.Тип = "Поле формы" Тогда
		ЭлементФормы.ИндексКартинки = 4;
	ИначеЕсли ЭлементФормы.Тип = "Кнопка формы" Тогда
		ЭлементФормы.ИндексКартинки = 28;
	ИначеЕсли ЭлементФормы.Тип = "Таблица формы" Тогда
		ЭлементФормы.ИндексКартинки = 3;
	ИначеЕсли ЭлементФормы.Тип = "Группа формы" Тогда

		ЭлементФормы.ИндексКартинки = 26;

		Если ЭлементФормы.ВидГруппыФормы = ВидГруппыФормы.ГруппаКнопок Или ЭлементФормы.ВидГруппыФормы = ВидГруппыФормы.КонтекстноеМеню
			Или ЭлементФормы.ВидГруппыФормы = ВидГруппыФормы.Подменю Тогда

			ЭлементФормы.ИндексКартинки = 11;

		ИначеЕсли ЭлементФормы.ВидГруппыФормы = ВидГруппыФормы.КоманднаяПанель Тогда
			ЭлементФормы.ИндексКартинки = 27;
		ИначеЕсли ЭлементФормы.ВидГруппыФормы = ВидГруппыФормы.Страницы Или ЭлементФормы.ВидГруппыФормы
			= ВидГруппыФормы.Страница Тогда
			ЭлементФормы.ИндексКартинки = 12;
		КонецЕсли;

	ИначеЕсли ЭлементФормы.Тип = "ДополнениеЭлементаФормы" Тогда
		ЭлементФормы.ИндексКартинки = 29;
	КонецЕсли;

КонецПроцедуры

// Функция распределяет элементы формы по иерархии вложения элементов в элементы контейнеры
//  возвращает количество элементов формы собранных в структуру
&НаКлиенте
Функция РаспределитьЭлементыПоПанелям(Панели, ФормаИсходник, СтруктураЭлементовФормы, ЭлементРодитель = Неопределено)

	КоличествоЭлементовФормы = 0;

	Для Каждого ЭлементПанель Из Панели Цикл

		Если ЭлементПанель.Панель.Имя = Неопределено Тогда
			ИмяПанели = "ПанельФормы";
		Иначе
			ИмяПанели = ЭлементПанель.Панель.Имя;
		КонецЕсли;                  
		
		// Добавляем панель
		Если ЭлементРодитель = Неопределено Тогда

			СтрокаЭлементаФорм = СтруктураЭлементовФормы.Строки.Добавить();
			СтрокаЭлементаФорм.ЭлементФормы  = ИмяПанели;
			СтрокаЭлементаФорм.Представление = ИмяПанели;
			СтрокаЭлементаФорм.ПорядокОбхода = 0;
			СтрокаЭлементаФорм.ИндексКартинки = 12;

		Иначе

			СтрокаЭлементаФорм = ЭлементРодитель.Строки.Добавить();
			СтрокаЭлементаФорм.ЭлементФормы  = ИмяПанели;
			СтрокаЭлементаФорм.Представление = ИмяПанели;
			СтрокаЭлементаФорм.ПорядокОбхода = ЭлементПанель.Панель.ПорядокОбхода;
			
			// Считаем количество элементов
			КоличествоЭлементовФормы = КоличествоЭлементовФормы + 1;

		КонецЕсли;

		СтрокаЭлементаФорм.Тип = ТипЗнч(ЭлементПанель.Панель);

		Если ЭлементПанель.Строки.Количество() Тогда

			КоличествоЭлементовФормы = КоличествоЭлементовФормы + РаспределитьЭлементыПоПанелям(ЭлементПанель.Строки,
				ФормаИсходник, СтруктураЭлементовФормы, СтрокаЭлементаФорм);

		КонецЕсли;

		НомерСтраницы = 0;
		КоличествоСтраниц = ЭлементПанель.Панель.Страницы.Количество();
		
		// Удаляем страницы панели по очереди
		Пока НомерСтраницы < КоличествоСтраниц Цикл

			НомерСтраницы = НомерСтраницы + 1;
			Страница = ЭлементПанель.Панель.Страницы[0];

			Если ЭлементПанель.Панель = ФормаИсходник.Панель И КоличествоСтраниц = 1 Тогда
				СтрокаСтраницы = СтрокаЭлементаФорм;
			Иначе

				СтрокаСтраницы = СтрокаЭлементаФорм.Строки.Добавить();
				СтрокаСтраницы.ЭлементФормы  = Страница.Имя;
				СтрокаСтраницы.Представление = Страница.Заголовок;
				СтрокаСтраницы.Тип           = ТипЗнч(Страница);
				СтрокаСтраницы.ПорядокОбхода = НомерСтраницы;
				СтрокаСтраницы.ИндексКартинки = 12;

			КонецЕсли; 
			
			// Перед удалением получаем список элементов формы
			СписокЭлементовДоУдаления = СписокЭлементовФормы(ФормаИсходник);
			ЭлементПанель.Панель.Страницы.Удалить(Страница);

			Для Каждого ЭлементФормы Из СписокЭлементовДоУдаления Цикл

				НайденныйЭлемент = ФормаИсходник.ЭлементыФормы.Найти(ЭлементФормы.Имя);
				Если НайденныйЭлемент = Неопределено Тогда

					Если ЭлементПанель.Панель = ФормаИсходник.Панель Тогда
						СтрокаПанели = СтрокаСтраницы.Строки.Найти(ЭлементФормы.Имя, "ЭлементФормы");
					Иначе
						СтрокаПанели = СтрокаСтраницы.Родитель.Строки.Найти(ЭлементФормы.Имя, "ЭлементФормы");
					КонецЕсли;
					
					// Добавляем строку элемента
					СтрокаЭлемента = СтрокаСтраницы.Строки.Добавить();
					СтрокаЭлемента.ЭлементФормы  = ЭлементФормы.Имя;
					СтрокаЭлемента.Тип           = ЭлементФормы.Тип;
					СтрокаЭлемента.ПорядокОбхода = ЭлементФормы.ПорядокОбхода;

					Если (Не СтрокаПанели = Неопределено) И ЭлементФормы.Тип = Строка(Тип("Панель")) Тогда
						ЗаполнитьСоставПанели(СтрокаЭлемента, СтрокаПанели);
						СтрокаПанели.Родитель.Строки.Удалить(СтрокаПанели);
					Иначе
						КоличествоЭлементовФормы = КоличествоЭлементовФормы + 1;
					КонецЕсли;

				КонецЕсли;

			КонецЦикла;

		КонецЦикла;

	КонецЦикла;

	Возврат КоличествоЭлементовФормы;

КонецФункции

&НаКлиенте
Функция СписокЭлементовФормы(ФормаИсходник, СохрянатьНастройкиПривязок = Ложь)
	
//	СписокЭлементовФормы = Новый ТаблицаЗначений();
//	
//	СписокЭлементовФормы.Колонки.Добавить("Имя");
//	СписокЭлементовФормы.Колонки.Добавить("Тип");
//	СписокЭлементовФормы.Колонки.Добавить("ПорядокОбхода");
//	
//	Для Каждого ЭлементФормы Из ФормаИсходник.ЭлементыФормы Цикл
//		
//		НоваяСтрока = СписокЭлементовФормы.Добавить();
//		НоваяСтрока.Имя           = ЭлементФормы.Имя;
//		НоваяСтрока.Тип           = ТипЗнч(ЭлементФормы);
//		НоваяСтрока.ПорядокОбхода = ЭлементФормы.ПорядокОбхода;
//		
//	КонецЦикла;
//	
//	Возврат СписокЭлементовФормы;

КонецФункции // СписокЭлементовФормы()

&НаКлиенте
Процедура ЗаполнитьСоставПанели(Панель, Состав)

	Для Каждого ВложенныйЭлемент Из Состав.Строки Цикл

		СтрокаЭлемента = Панель.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЭлемента, ВложенныйЭлемент);
		//СтрокаЭлемента.ЭлементФормы = ВложенныйЭлемент.ЭлементФормы;  
		//СтрокаЭлемента.Тип          = ВложенныйЭлемент.Тип;  
		Если ВложенныйЭлемент.Строки.Количество() Тогда
			ЗаполнитьСоставПанели(СтрокаЭлемента, ВложенныйЭлемент);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПостроитьСтруктуруПанелейФормы(СписокПанелейФормы, ЭлеменФормыПанель, РодительскаяПанель = Неопределено,
	СтруктураПанелейФормы)

	Если РодительскаяПанель = Неопределено Тогда
		УзелПанели        = СтруктураПанелейФормы.Строки.Добавить();
		УзелПанели.Панель = ЭлеменФормыПанель;
	Иначе
		УзелПанлиРодителя = СтруктураПанелейФормы.Строки.Найти(РодительскаяПанель, "Панель", Истина);
		УзелПанели        = УзелПанлиРодителя.Строки.Добавить();
		УзелПанели.Панель = ЭлеменФормыПанель;
	КонецЕсли;

	ВложенныеПанели = СписокПанелейФормы.НайтиСтроки(Новый Структура("Родитель", ЭлеменФормыПанель));
	Для Каждого ВложеннаяПанель Из ВложенныеПанели Цикл
		ПостроитьСтруктуруПанелейФормы(СписокПанелейФормы, ВложеннаяПанель.Панель, ЭлеменФормыПанель,
			СтруктураПанелейФормы);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтруктуруЭлементовФормы(ОбъектМетаданныхФорма)

	СтруктураЭлементовИнтерактивнойФормы.ПолучитьЭлементы().Очистить();
	Если Не ОбъектМетаданныхФорма.Класс = "Форма" Тогда
		//Элементы.СтруктураЭлементовИнтеративнойФормы.Видимость = Ложь;
		Возврат;
	Иначе
		//Элементы.СтруктураЭлементовИнтеративнойФормы.Видимость = Истина;
	КонецЕсли;

	Если ОбъектМетаданныхФорма.СтруктураЭлементовФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
//	ЗначениеВДанныеФормы(ОбъектМетаданныхФорма.СтруктураЭлементовФормы, СтруктураЭлементовИнтерактивнойФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПодчиненныеЭлементыФормы(ФормаИсточник)

	Если Не ТипЗнч(ФормаИсточник) = Тип("УправляемаяФорма") Тогда
		УстановитьНастройкиЭлементовФормы(ФормаИсточник, СтруктураЭлементовИнтерактивнойФормы.ПолучитьЭлементы());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьНастройкиЭлементовФормы(ФормаИсточник, СтруктураЭлементов)

	Для Каждого ЭлементФормы Из СтруктураЭлементов Цикл

		ЭлементыПодчиненные = ЭлементФормы.ПолучитьЭлементы();
		Если ЭлементыПодчиненные.Количество() Тогда
			УстановитьНастройкиЭлементовФормы(ФормаИсточник, ЭлементыПодчиненные);
		КонецЕсли;

		Если ЭлементФормы.Тип = Строка(Тип("КоманднаяПанель")) Тогда

			ИнтерактивныйЭлементФормы = ФормаИсточник.ЭлементыФормы.Найти(ЭлементФормы.ЭлементФормы);
			ЭлементФормы.Представление = ИнтерактивныйЭлементФормы.Имя;
			ЭлементФормы.ИндексКартинки = 11;
			ДобавитьКнопкиВСтруктуруЭлементов(ФормаИсточник, ЭлементФормы);

		ИначеЕсли ЭлементФормы.Тип = Строка(Тип("Кнопка")) Тогда

			ИнтерактивныйЭлементФормы = ФормаИсточник.ЭлементыФормы.Найти(ЭлементФормы.ЭлементФормы);
			ЭлементФормы.Представление = ИнтерактивныйЭлементФормы.Заголовок;
			ЭлементФормы.ИндексКартинки = 1;

			Если ИнтерактивныйЭлементФормы.РежимМеню = ПредопределенноеЗначение("ИспользованиеРежимаМеню.Использовать") Тогда
				ДобавитьКнопкиВСтруктуруЭлементов(ФормаИсточник, ЭлементФормы, ИнтерактивныйЭлементФормы);
			КонецЕсли;

		ИначеЕсли ЭлементФормы.Тип = Строка(Тип("Панель")) И Не ЭлементФормы.Родитель = Неопределено Тогда

			ИнтерактивныйЭлементФормы = ФормаИсточник.ЭлементыФормы.Найти(ЭлементФормы.ЭлементФормы);
			ИнтерактивныйЭлементФормы.Доступность = Истина;
			ИнтерактивныйЭлементФормы.УстановитьДействие("ПриСменеСтраницы", Неопределено);

			ЭлементФормы.Доступность = Истина;
			ЭлементФормы.ИндексКартинки = 12;

		ИначеЕсли ЭлементФормы.Тип = Строка(Тип("ПолеВвода")) Тогда

			ИнтерактивныйЭлементФормы = ФормаИсточник.ЭлементыФормы.Найти(ЭлементФормы.ЭлементФормы);
			ЭлементФормы.Представление = ИнтерактивныйЭлементФормы.Имя;
			ИнтерактивныйЭлементФормы.Доступность = Истина;
			ИнтерактивныйЭлементФормы.ТолькоПросмотр = Ложь;
			ЭлементФормы.Доступность = Истина;
			ЭлементФормы.ИндексКартинки = 4;

		ИначеЕсли ЭлементФормы.Тип = Строка(Тип("Надпись")) Тогда

			ИнтерактивныйЭлементФормы = ФормаИсточник.ЭлементыФормы.Найти(ЭлементФормы.ЭлементФормы);
			Если ПустаяСтрока(СокрЛП(ИнтерактивныйЭлементФормы.Заголовок)) Тогда
				ЭлементФормы.Представление = ИнтерактивныйЭлементФормы.Имя;
			Иначе
				ЭлементФормы.Представление = ИнтерактивныйЭлементФормы.Заголовок;
			КонецЕсли;

			ИнтерактивныйЭлементФормы.Доступность = Истина;
			ЭлементФормы.Доступность = Истина;
			ЭлементФормы.ИндексКартинки = 2;

		ИначеЕсли ЭлементФормы.Тип = Строка(Тип("Флажок")) Тогда

			ИнтерактивныйЭлементФормы = ФормаИсточник.ЭлементыФормы.Найти(ЭлементФормы.ЭлементФормы);
			ЭлементФормы.Представление = ИнтерактивныйЭлементФормы.Заголовок;
			ИнтерактивныйЭлементФормы.Доступность = Истина;
			ЭлементФормы.Доступность = Истина;
			ЭлементФормы.ИндексКартинки = 5;

		ИначеЕсли ЭлементФормы.Тип = Строка(Тип("ТабличноеПоле")) Тогда

			ИнтерактивныйЭлементФормы = ФормаИсточник.ЭлементыФормы.Найти(ЭлементФормы.ЭлементФормы);
			ЭлементФормы.Представление = ИнтерактивныйЭлементФормы.Имя;
			ЭлементФормы.ИндексКартинки = 3;

		ИначеЕсли ЭлементФормы.Тип = Строка(Тип("ПолеТабличногоДокумента")) Тогда

			ИнтерактивныйЭлементФормы = ФормаИсточник.ЭлементыФормы.Найти(ЭлементФормы.ЭлементФормы);
			ЭлементФормы.Представление = ИнтерактивныйЭлементФормы.Имя;
			ЭлементФормы.ИндексКартинки = 14;

		ИначеЕсли ЭлементФормы.Тип = Строка(Тип("ПолеТекстовогоДокумента")) Тогда

			ИнтерактивныйЭлементФормы = ФормаИсточник.ЭлементыФормы.Найти(ЭлементФормы.ЭлементФормы);
			ЭлементФормы.Представление = ИнтерактивныйЭлементФормы.Имя;
			ЭлементФормы.ИндексКартинки = 19;

		ИначеЕсли ЭлементФормы.Тип = Строка(Тип("ПолеHtmlДокумента")) Тогда

			ИнтерактивныйЭлементФормы = ФормаИсточник.ЭлементыФормы.Найти(ЭлементФормы.ЭлементФормы);
			ЭлементФормы.Представление = ИнтерактивныйЭлементФормы.Имя;
			ЭлементФормы.ИндексКартинки = 21;

		ИначеЕсли ЭлементФормы.Тип = Строка(Тип("Разделитель")) Тогда

			ИнтерактивныйЭлементФормы = ФормаИсточник.ЭлементыФормы.Найти(ЭлементФормы.ЭлементФормы);
			ЭлементФормы.Представление = ИнтерактивныйЭлементФормы.Имя;
			ЭлементФормы.ИндексКартинки = 13;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКнопкиВСтруктуруЭлементов(ФормаИсточник, КоманднаяПанель, ИсходныйЭлемент = Неопределено)

	Если ИсходныйЭлемент = Неопределено Тогда
		ИсходныйЭлемент = ФормаИсточник.ЭлементыФормы.Найти(КоманднаяПанель.ЭлементФормы);
	КонецЕсли;

	Для Каждого КнопкаПанели Из ИсходныйЭлемент.Кнопки Цикл

		Если КнопкаПанели.ТипКнопки = ПредопределенноеЗначение("ТипКнопкиКоманднойПанели.Разделитель") Тогда
			Продолжить;
		КонецЕсли;

		СтрокаКнопки = КоманднаяПанель.Строки.Добавить();
		СтрокаКнопки.ЭлементФормы = КнопкаПанели.Имя;
		СтрокаКнопки.Тип = ТипЗнч(КнопкаПанели);
		СтрокаКнопки.Представление = КнопкаПанели.Текст;
		СтрокаКнопки.ИндексКартинки = 1;

		Если КнопкаПанели.ТипКнопки = ПредопределенноеЗначение("ТипКнопкиКоманднойПанели.Подменю") Тогда

			ДобавитьКнопкиВСтруктуруЭлементов(ФормаИсточник, СтрокаКнопки, КнопкаПанели);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ДобавлениеОписанияОбъекта

&НаКлиенте
Процедура ДобавитьОписаниеОбъектаВДокумент()

	ОбъектМетаданныхСтруктуры = ТекущийОбъектМетаданных();
	ПредставлениеОбъекта = МаркированноеПредставлениеОбъектаМетаданных(ОбъектМетаданныхСтруктуры, Ложь, Истина);

	МаркерФорматирования = Новый Структура("Маркер, Представление, Объект", ПредставлениеОбъекта.Текст,
		ПредставлениеОбъекта.ВыделяемыйФрагмент, ОбъектМетаданныхСтруктуры);

	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);
	ДобавитьСвойстваОбъектаВОписание(ОбъектМетаданныхСтруктуры);
	
	Если ВыводитьДетальныеДанныеОбъекта(ОбъектМетаданныхСтруктуры) Тогда
		ДобавитьОписаниеПодчиненныхОбъектов(ОбъектМетаданныхСтруктуры);
	КонецЕсли;
	ДобавитьОписаниеПрограммныхМодулей(ОбъектМетаданныхСтруктуры);

	ПоказатьСконвертированныйHtmlДокумент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСвойстваОбъектаВОписание(ОбъектМетаданныхСтруктуры)

	Если Не ЗначениеЗаполнено(ОбъектМетаданныхСтруктуры.Свойства) Тогда
		ЗаполнитьСвойстваОбъектаМетаданных(ОбъектМетаданныхСтруктуры);
	КонецЕсли;

	СвойстваОбъекта = ОбъектМетаданныхСтруктуры.Свойства;

	ДокументДобавитьБлокНазначение(СвойстваОбъекта);
	Если ЭтоМодулиПриложения(ОбъектМетаданныхСтруктуры) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументДобавитьБлокСвойтОбъекта();

	ФорматируемаяТабилица = ФорматируемаяТаблица("| Свойство | Значение свойства |");
	ДанныеКолонок = Новый Массив;
	Для Каждого Свойство Из СвойстваОбъекта Цикл

		ДанныеКолонок.Очистить();
		Если Свойство.Ключ = "Описание" Или Свойство.Ключ = "Модули" Тогда
			Продолжить;
		КонецЕсли;

		Если СтрНайти(Свойство.Ключ, "Группа") Тогда
			ДанныеКолонок.Добавить("***" + Свойство.Значение + "***");
		Иначе
			ДанныеКолонок.Добавить(Свойство.Ключ);
			Если Свойство.Ключ = "Тип" Тогда
				ПредставлениеТипа = СтрЗаменить(ПредставлениеТиповЭлемента(ОбъектМетаданныхСтруктуры), "_", "\_");
				ДанныеКолонок.Добавить(ПредставлениеТипа);
			Иначе
				ДанныеКолонок.Добавить(Свойство.Значение);
			КонецЕсли;
		КонецЕсли;

		ДобавитьСтрокуВФорматировануТаблицу(ФорматируемаяТабилица, ДанныеКолонок);

	КонецЦикла;

	ОтформатироватьТаблицу(ФорматируемаяТабилица);
	ДокументВывестиФорматируемуюТаблицу(ФорматируемаяТабилица);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОписаниеПодчиненныхОбъектов(ОбъектМетаданныхСтруктуры)

	ОбъектыСМодулемКода = Новый Массив;
	Для Каждого ПодчиненныйЭлемент Из ОбъектМетаданныхСтруктуры.ПолучитьЭлементы() Цикл
	
		Если ПодчиненныеЭлементы.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоПодчиненныеЭлементыОбъекта(ПодчиненныйЭлемент) Тогда

			ДокументДобавитьНачалоПараграфа();
			ДокументДобавитьСодержание("**" + ПодчиненныйЭлемент.Синоним + ":**");
			ДобавитьОписаниеПодчиненныхОбъектовВДокумент(
				ОбъектМетаданныхСтруктуры, ПодчиненныйЭлемент, ОбъектыСМодулемКода);

		ИначеЕсли (ПодчиненныйЭлемент.Класс = "ТабличнаяЧасть" И ПодчиненныйЭлемент.МенеджерПодчиненныхЭлементов) Тогда

			Для Каждого ТабличнаяЧастьОбъекта Из ПодчиненныйЭлемент.ПолучитьЭлементы() Цикл

				ДокументДобавитьНачалоПараграфа();
				ДокументДобавитьСодержание("**Табличная часть:** " + ТабличнаяЧастьОбъекта.Имя);
				ДобавитьОписаниеПодчиненныхОбъектовВДокумент(
					ОбъектМетаданныхСтруктуры, ТабличнаяЧастьОбъекта, ОбъектыСМодулемКода);

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	Для Каждого ОбъектСМодулем Из ОбъектыСМодулемКода Цикл
		ДобавитьОписаниеПрограммныхМодулей(ОбъектСМодулем);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОписаниеПодчиненныхОбъектовВДокумент(ОбъектМетаданныхСтруктуры, МенеджерЭлементов, ОбъектыСМодулемКода)

	Если МенеджерЭлементов.Класс = "Команда" Тогда
		ЗаголовокТаблицы = "|Имя|Свойства|Описание|";
	ИначеЕсли МенеджерЭлементов.Класс = "Макет" Тогда
		ЗаголовокТаблицы = "|Имя|Тип|Описание|";
	ИначеЕсли МенеджерЭлементов.Класс = "Значение" Тогда
		ЗаголовокТаблицы = "|Имя|Синоним|Описание|";
	ИначеЕсли МенеджерЭлементов.Класс = "Граф" Тогда
		ЗаголовокТаблицы = "|Имя|Ссылки|Описание|";
	Иначе
		ЗаголовокТаблицы = "|Имя|Тип|Свойства|Описание|";
	КонецЕсли;

	ФорматируемаяТаблица = ФорматируемаяТаблица(ЗаголовокТаблицы);
	ДанныеНовойСтроки = Новый Массив;

	Для Каждого Элемент Из МенеджерЭлементов.ПолучитьЭлементы() Цикл

		ДанныеНовойСтроки.Очистить();
		Если Не ЗначениеЗаполнено(Элемент.Свойства) Тогда
			ЗаполнитьСвойстваПодчиненногоЭлемента(ОбъектМетаданныхСтруктуры, МенеджерЭлементов, Элемент);
		КонецЕсли;

		ПредставлениеТипа = СтрЗаменить(ПредставлениеТиповЭлемента(Элемент), "_", "\_");
		Если ЗначениеЗаполнено(Элемент.Свойства) Тогда

			ПредставлениеСвойств = "";
			Для Каждого Свойство Из Элемент.Свойства Цикл

				Если Свойство.Ключ = "Модули" Тогда
					ОбъектыСМодулемКода.Добавить(Элемент);
					Продолжить;
				ИначеЕсли Свойство.Ключ = "Описание" Или Свойство.Ключ = "Тип" Или Свойство.Ключ = "Ссылки" Тогда
					Продолжить;
				КонецЕсли;

				Если СтрНайти(Свойство.Ключ, "Группа") Тогда
					ПредставлениеСвойств = ПредставлениеСвойств + ?(ПустаяСтрока(ПредставлениеСвойств), "", " ")
						+ "***" + Свойство.Значение + "***";
				Иначе
					ПредставлениеСвойств = ПредставлениеСвойств + ?(ПустаяСтрока(ПредставлениеСвойств), "", " ")
						+ Свойство.Ключ + ": " + Свойство.Значение;
				КонецЕсли;
			КонецЦикла;
			ПредставлениеСвойств = СтрЗаменить(ПредставлениеСвойств, "_", "\_");

			ОписаниеЭлемента = "";
			Если ЗначениеЗаполнено(Элемент.Свойства.Описание.Комментарий) Тогда
				ОписаниеЭлемента = ОписаниеЭлемента + Элемент.Свойства.Описание.Комментарий;
			КонецЕсли;

			Если Элемент.Свойства.Описание.Свойство("Пояснение") И ЗначениеЗаполнено(
				Элемент.Свойства.Описание.Пояснение) Тогда
				ОписаниеЭлемента = ОписаниеЭлемента + " " + Элемент.Свойства.Описание.Пояснение;
			КонецЕсли;

		КонецЕсли;
		
		// Заполняем колонки строки
		ДанныеНовойСтроки.Добавить(Элемент.Имя);
		Если МенеджерЭлементов.Класс = "Значение" Тогда
			ДанныеНовойСтроки.Добавить(Элемент.Синоним);
		КонецЕсли;

		Если Не МенеджерЭлементов.Класс = "Команда" Тогда
			Если МенеджерЭлементов.Класс = "Граф" Тогда
				ДанныеНовойСтроки.Добавить(Элемент.Свойства.Ссылки);
			Иначе
				ДанныеНовойСтроки.Добавить(ПредставлениеТипа);
			КонецЕсли;

		КонецЕсли;

		Если Не МенеджерЭлементов.Класс = "Макет" Тогда
			ДанныеНовойСтроки.Добавить(ПредставлениеСвойств);
		КонецЕсли;

		ДанныеНовойСтроки.Добавить(ОписаниеЭлемента);

		ДобавитьСтрокуВФорматировануТаблицу(ФорматируемаяТаблица, ДанныеНовойСтроки);

	КонецЦикла;

	ОтформатироватьТаблицу(ФорматируемаяТаблица);
	ДокументВывестиФорматируемуюТаблицу(ФорматируемаяТаблица);

КонецПроцедуры

&НаКлиенте
Функция ПредставлениеТиповЭлемента(Элемент)

	ПредставлениеТипа = "";

	Если Элемент.Свойства.Свойство("Тип") Тогда
		Если ТипЗнч(Элемент.Свойства.Тип) = Тип("СписокЗначений") Тогда
			Для Каждого Тип Из Элемент.Свойства.Тип Цикл
				ПредставлениеТипа = ПредставлениеТипа + ?(ПустаяСтрока(ПредставлениеТипа), "", "; ") + Тип.Значение;
			КонецЦикла;
		Иначе
			ПредставлениеТипа = Элемент.Свойства.Тип;
		КонецЕсли;
	КонецЕсли;

	Возврат ПредставлениеТипа;

КонецФункции

&НаКлиенте
Процедура ДобавитьОписаниеПрограммныхМодулей(ОбъектМетаданныхСтруктуры, ТолькоПрограммныйИнтерфейс = Истина)

	Если Не ЗначениеЗаполнено(ОбъектМетаданныхСтруктуры.Свойства) Тогда
		ЗаполнитьСвойстваОбъектаМетаданных(ОбъектМетаданныхСтруктуры);
	КонецЕсли;

	Если ОбъектМетаданныхСтруктуры.Свойства.Свойство("Модули") Тогда
		Для Каждого МодульОбъектаМетаданных Из ОбъектМетаданныхСтруктуры.Свойства.Модули Цикл
			ПрограммныйМодуль = ПрограммныйМодульОбъекта(МодульОбъектаМетаданных.Значение);
			Если Не ПрограммныйМодуль = Неопределено Тогда
				КонтекстМодуля = СтруктураКонтекстМодуляОбъекта(ПрограммныйМодуль.ТекстМодуля);
				ДобавитьОписаниеКонтекстаМодуля(
					КонтекстМодуля, МодульОбъектаМетаданных.Представление, ТолькоПрограммныйИнтерфейс);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОписаниеКонтекстаМодуля(КонтекстМодуля, ПредставлениеМодуля, ТолькоПрограммныйИнтерфейс)

	ЗаголовокМодуляНеДобавлен = Истина;
	Для Каждого БлокМодуля Из КонтекстМодуля Цикл

		Если Не БлокМодуля.ТипБлока = "ЗаголовокМетода" Тогда
			Продолжить;
		КонецЕсли;

		Если ТолькоПрограммныйИнтерфейс Тогда
			Если Не БлокМодуля.ОписаниеБлока.Экспортный Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Если ЗаголовокМодуляНеДобавлен Тогда
			ДокументДобавитьНачалоПараграфа();
			ДокументДобавитьСодержание("**" + ПредставлениеМодуля + "**");
			ЗаголовокМодуляНеДобавлен = Ложь;
		КонецЕсли;

		ДобавитьОписаниеСинтексисаМетода(БлокМодуля.ОписаниеБлока);
		ДобавитьОписаниеВозвращаемогоЗначения(БлокМодуля.ОписаниеБлока);
		ДобавитьОписаниеПримеров(БлокМодуля.ОписаниеБлока);
		ДобавитьОписаниеМетода(БлокМодуля.ОписаниеБлока);

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОписаниеСинтексисаМетода(ОписаниеМетода)

	ДокументДобавитьПолосуРазделитель();
	ДокументДобавитьПереносСтроки();

	ДокументДобавитьСодержание(
			ОписаниеМетода.ТипМетода + " **" + ОписаниеМетода.ИмяМетода + "**" + ?(
		ОписаниеМетода.Экспортный, " - Экспортная", ""));

	ДокументДобавитьНачалоПараграфа();
	ДокументДобавитьСодержание("**Синтаксис:**");

	ОписаниеСиктасиса = ДокументБлокПереносСтроки() + ОписаниеМетода.ИмяМетода + "(";

	ОписаниеСоставаПараметров = "";
	БлокОписанияПараметров = "";

	Если Не ОписаниеМетода.ПараметрыМетода = Неопределено И ОписаниеМетода.ПараметрыМетода.Количество() Тогда

		БлокОписанияПараметров = БлокОписанияПараметров + ДокументБлокНачалоПараграфа() + "**Параметры:**";

		НомерМараметра = 0;
		Для Каждого Параметр Из ОписаниеМетода.ПараметрыМетода Цикл

			НомерМараметра = НомерМараметра + 1;
			ДанныеПараметра = Параметр.Значение;
			ОписаниеСоставаПараметров = ОписаниеСоставаПараметров + ?(ПустаяСтрока(ОписаниеСоставаПараметров), "", ", ");
			ОписаниеСоставаПараметров = ОписаниеСоставаПараметров + "<" + Параметр.Ключ + ">";

			Если НомерМараметра = 1 Тогда
				БлокОписанияПараметров = БлокОписанияПараметров + ДокументБлокПереносСтроки();
			Иначе
				БлокОписанияПараметров = БлокОписанияПараметров + ДокументБлокНачалоПараграфа();
			КонецЕсли;
			БлокОписанияПараметров = БлокОписанияПараметров + "<" + Параметр.Ключ + ">";
			БлокОписанияПараметров = БлокОписанияПараметров + ?(Не ЗначениеЗаполнено(
				ДанныеПараметра.ЗначениеПоУмолчанию), "(обязательный)", "");
			БлокОписанияПараметров = БлокОписанияПараметров + ?(ДанныеПараметра.ЗНАЧ, ", передается по значению", "");

			БлокОписанияПараметров = БлокОписанияПараметров + ДокументБлокПереносСтроки() + "Тип: ";
			Если Не ДанныеПараметра.ТипыПараметра = Неопределено Тогда
				Для Каждого ТипПараметра Из ДанныеПараметра.ТипыПараметра Цикл

					БлокОписанияПараметров = БлокОписанияПараметров + ТипПараметра.Тип;
					Если Не ПустаяСтрока(ТипПараметра.Описание) Тогда
						БлокОписанияПараметров = БлокОписанияПараметров + ДокументБлокПереносСтроки()
							+ ТипПараметра.Описание;
					КонецЕсли;

					Если ЗначениеЗаполнено(ДанныеПараметра.ПроизвольноеОписание) Тогда
						БлокОписанияПараметров = БлокОписанияПараметров + ДокументБлокПереносСтроки()
							+ ТипПараметра.Описание;
					КонецЕсли;

				КонецЦикла;
			Иначе
				БлокОписанияПараметров = БлокОписанияПараметров + "Описание типа отсутствует.";
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;
	ОписаниеСиктасиса = ОписаниеСиктасиса + ОписаниеСоставаПараметров + ")";

	ДокументДобавитьСодержание(ОписаниеСиктасиса);
	ДокументДобавитьСодержание(БлокОписанияПараметров);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОписаниеВозвращаемогоЗначения(ОписаниеМетода)

	Если ОписаниеМетода.ВозвращаемыеЗначения = Неопределено И ПустаяСтрока(
		ОписаниеМетода.ПроизвольноеОписаниеВозвращаемыеЗначения) Тогда

		Возврат;

	КонецЕсли;

	БлокОписанияВозвращаемогоЗначения = "";
	ДокументДобавитьНачалоПараграфа();

	БлокОписанияВозвращаемогоЗначения = БлокОписанияВозвращаемогоЗначения + "**Возвращаемое значение:**";
	Если Не ОписаниеМетода.ВозвращаемыеЗначения = Неопределено Тогда
		ДанныеВозвращаемогоЗначения = ОписаниеМетода.ВозвращаемыеЗначения;
		Для Каждого ТипВозвращаемогоЗначения Из ДанныеВозвращаемогоЗначения Цикл
			БлокОписанияВозвращаемогоЗначения = БлокОписанияВозвращаемогоЗначения + ДокументБлокПереносСтроки()
				+ "Тип: " + ТипВозвращаемогоЗначения.Тип;
			Если Не ПустаяСтрока(ТипВозвращаемогоЗначения.Описание) Тогда
				БлокОписанияВозвращаемогоЗначения = БлокОписанияВозвращаемогоЗначения + ДокументБлокПереносСтроки()
					+ ТипВозвращаемогоЗначения.Описание;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если Не ПустаяСтрока(ОписаниеМетода.ПроизвольноеОписаниеВозвращаемыеЗначения) Тогда
		БлокОписанияВозвращаемогоЗначения = БлокОписанияВозвращаемогоЗначения + ДокументБлокПереносСтроки()
			+ ОписаниеМетода.ПроизвольноеОписаниеВозвращаемыеЗначенияТогда;
	КонецЕсли;

	ДокументДобавитьСодержание(БлокОписанияВозвращаемогоЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОписаниеПримеров(ОписаниеМетода)

	Если ПустаяСтрока(ОписаниеМетода.Примеры) Тогда
		Возврат;
	КонецЕсли;

	БлокОписанияПримера = "";
	ДокументДобавитьНачалоПараграфа();
	БлокОписанияПримера = БлокОписанияПримера + "**Примеры:**";
	БлокОписанияПримера = БлокОписанияПримера + ДокументБлокПереносСтроки() + ОписаниеМетода.Примеры;

	ДокументДобавитьСодержание(БлокОписанияПримера);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОписаниеМетода(ОписаниеМетода)

	Если ПустаяСтрока(ОписаниеМетода.Назначение) Тогда
		Возврат;
	КонецЕсли;

	БлокОписанияМетода = "";
	ДокументДобавитьНачалоПараграфа();
	БлокОписанияМетода = БлокОписанияМетода + "**Описание:**";
	БлокОписанияМетода = БлокОписанияМетода + ДокументБлокПереносСтроки() + ОписаниеМетода.Назначение;

	ДокументДобавитьСодержание(БлокОписанияМетода);

КонецПроцедуры

#КонецОбласти

#Область ПодключениеКонвертераMarkDown

&НаСервере
Процедура ПодготовитьКонвертерМаркдаун()

	Конвертер = Новый Структура;

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Конвертер.Вставить("ОболочкаHtml", ОбработкаОбъект.ПолучитьМакет("Converter").ПолучитьТекст());

	Конвертер.Вставить("Showdown_Style", ОбработкаОбъект.ПолучитьМакет("Showdown_Style").ПолучитьТекст());
	
	// Конвертор MarkDown
	ФайлShowdown = ОбработкаОбъект.ПолучитьМакет("Showdown");
	Конвертер.Вставить("ShowDown", ПоместитьВоВременноеХранилище(ФайлShowdown, УникальныйИдентификатор));
	
	// Библиотека для конвертора
	ФайлShowdon_map = ОбработкаОбъект.ПолучитьМакет("ShowDownMap");
	Конвертер.Вставить("ShowDownMap", ПоместитьВоВременноеХранилище(ФайлShowdon_map, УникальныйИдентификатор));

КонецПроцедуры

&НаКлиенте
Процедура РаспаковатьКонвертер()

	КаталогКонвертера = КаталогДляРаспаковкиКонвертера();

	ДанныеФайла = ПолучитьИзВременногоХранилища(Конвертер.ShowDownMap);
	ДанныеФайла.Записать(КаталогКонвертера + "\showdown.js.map");

	ДанныеФайла = ПолучитьИзВременногоХранилища(Конвертер.ShowDown);
	ПолноеИмяФайлаJS = КаталогКонвертера + "\showdown.js";
	ДанныеФайла.Записать(ПолноеИмяФайлаJS);

	КонтекстОболочкиHtml = Конвертер.ОболочкаHtml;
	ПодключитьКомпонетуККконвертеру("%%Showdown%%", ПолноеИмяФайлаJS, КонтекстОболочкиHtml);

	ПолноеИмяФайлаСтией = КаталогКонвертера + "\Showdown_Style.css";
	ФайлСтилей = Новый ТекстовыйДокумент;
	ФайлСтилей.УстановитьТекст(Конвертер.Showdown_Style);
	ФайлСтилей.Записать(ПолноеИмяФайлаСтией);

	ПодключитьКомпонетуККконвертеру("%%Styles%%", ПолноеИмяФайлаСтией, КонтекстОболочкиHtml);

	ДокументРезультат = КонтекстОболочкиHtml;

КонецПроцедуры

&НаКлиенте
Функция КаталогДляРаспаковкиКонвертера()

	ИмяКаталога = КаталогВременныхФайлов() + "Converter";
	СоздатьКаталог(ИмяКаталога);

	Возврат ИмяКаталога;

КонецФункции

&НаКлиенте
Процедура ПодключитьКомпонетуККконвертеру(ИмяКомпонеты, ПолноеИмяФайлаКомпоненты, КонтекстОболочкиHtml)

	АдресПодключенияКомпоненты = ПолноеИмяФайлаВВидеURL(ПолноеИмяФайлаКомпоненты);
	КонтекстОболочкиHtml = СтрЗаменить(КонтекстОболочкиHtml, ИмяКомпонеты, АдресПодключенияКомпоненты);

КонецПроцедуры

&НаКлиенте
Функция ПолноеИмяФайлаВВидеURL(ПолноеИмяФайла)

	Возврат "file:///" + СокрЛП(СтрЗаменить(ПолноеИмяФайла, "\", "/"));

КонецФункции

&НаКлиенте
Процедура ПоказатьСконвертированныйHtmlДокумент()

	ДокументHtml = Элементы.ДокументРезультат.Документ;
	ДокументHtml.parentWindow.converterMarkDownToHtml(РедактируемыйДокумент);

КонецПроцедуры

#КонецОбласти

#Область РаботаСФорматируемойТаблицей

&НаКлиенте
Функция ФорматируемаяТаблица(ЗаголовокТаблицы)

	ФорматируемаяТаблица = Новый Структура("КоличествоКолонок, ШиринаКолонок, СтрокиТаблицы");
	ФорматируемаяТаблица.СтрокиТаблицы = Новый Массив;

	ОбрезальГраницыЗаголовкаТаблицы(ЗаголовокТаблицы);

	ЗначенияКолонокЗаголовка = СтрРазделить(ЗаголовокТаблицы, "|");
	ФорматируемаяТаблица.КоличествоКолонок = ЗначенияКолонокЗаголовка.Количество();
	ФорматируемаяТаблица.СтрокиТаблицы.Добавить(ЗначенияКолонокЗаголовка);
	СтрокаРазделительЗаголовка = Новый Массив(ФорматируемаяТаблица.КоличествоКолонок);
	ФорматируемаяТаблица.СтрокиТаблицы.Добавить(СтрокаРазделительЗаголовка);

	ФорматируемаяТаблица.ШиринаКолонок = Новый Массив(ФорматируемаяТаблица.КоличествоКолонок);

	Для ИндексКолонки = 0 По ФорматируемаяТаблица.КоличествоКолонок - 1 Цикл
		ФорматируемаяТаблица.ШиринаКолонок[ИндексКолонки] = Макс(0, СтрДлина(" " + СокрЛП(
			ЗначенияКолонокЗаголовка[ИндексКолонки] + " ")));
	КонецЦикла;

	Возврат ФорматируемаяТаблица;

КонецФункции

&НаКлиенте
Процедура ОбрезальГраницыЗаголовкаТаблицы(ЗаголовокТаблицы)

	Если Лев(ЗаголовокТаблицы, 1) = "|" Тогда
		ЗаголовокТаблицы = Прав(ЗаголовокТаблицы, СтрДлина(ЗаголовокТаблицы) - 1);
	КонецЕсли;

	Если Прав(ЗаголовокТаблицы, 1) = "|" Тогда
		ЗаголовокТаблицы = Лев(ЗаголовокТаблицы, СтрДлина(ЗаголовокТаблицы) - 1);
	КонецЕсли;

КонецПроцедуры

// Создает новую строку форматированой таблицы.
// 
// Параметры:
//  ФорматируемаяТаблица - ФорматируемаяТаблица - Форматируемая таблица (см. ФорматируемаяТаблица()).
//  ДанныеСтроки - Массив - Содержит значения колонок новой строки.
&НаКлиенте
Процедура ДобавитьСтрокуВФорматировануТаблицу(ФорматируемаяТаблица, ДанныеСтроки)
	
	СтрокаТаблицы = Новый Массив(ФорматируемаяТаблица.КоличествоКолонок);
	Для ИндексКолонки = 0 По ФорматируемаяТаблица.КоличествоКолонок - 1 Цикл
		Если ИндексКолонки > ДанныеСтроки.ВГраница() Тогда
			ЗначениеКолонки = "";
		Иначе
			ЗначениеКолонки = ДанныеСтроки[ИндексКолонки];
		КонецЕсли;

		ЗначениеКолонки = СокрЛП(ЗначениеКолонки);
		СтрокаТаблицы[ИндексКолонки] = ЗначениеКолонки;
		ФорматируемаяТаблица.ШиринаКолонок[ИндексКолонки] = Макс(ФорматируемаяТаблица.ШиринаКолонок[ИндексКолонки],
			СтрДлина(" " + ЗначениеКолонки + " "));

	КонецЦикла;

	ФорматируемаяТаблица.СтрокиТаблицы.Добавить(СтрокаТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ОтформатироватьТаблицу(ФорматируемаяТаблица)

	ИндексСтрокиРазделителяЗаголовка = 1;
	СтрокиТаблицы = ФорматируемаяТаблица.СтрокиТаблицы;
	Для ИндексСтроки = 0 По СтрокиТаблицы.Количество() - 1 Цикл
		Для индексКолонки = 0 По ФорматируемаяТаблица.КоличествоКолонок - 1 Цикл

			ЗначениеКолонки = СтрокиТаблицы[ИндексСтроки][ИндексКолонки];
			ЗначениеКолонки = " " + СокрЛП(ЗначениеКолонки);

			ДлинаЗначения = СтрДлина(ЗначениеКолонки);
			Если ДлинаЗначения < ФорматируемаяТаблица.ШиринаКолонок[ИндексКолонки] Тогда
				Если ИндексСтроки = ИндексСтрокиРазделителяЗаголовка Тогда
					СимволНаполнения = "-";
				Иначе
					СимволНаполнения = " ";
				КонецЕсли;

				Для КоличествоСимволов = 1 По ФорматируемаяТаблица.ШиринаКолонок[ИндексКолонки] - ДлинаЗначения Цикл
					ЗначениеКолонки = ЗначениеКолонки + СимволНаполнения;
				КонецЦикла;

			КонецЕсли;

			СтрокиТаблицы[ИндексСтроки][ИндексКолонки] = ЗначениеКолонки;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область РаботаСДокументомРезультат

&НаКлиенте
Процедура ДокументДобавитьСодержание(СтрокаТекста)

	РедактируемыйДокумент = РедактируемыйДокумент + СтрокаТекста;

КонецПроцедуры

&НаКлиенте
Процедура ДокументДобавитьНачалоПараграфа()

	РедактируемыйДокумент = РедактируемыйДокумент + ДокументБлокНачалоПараграфа();

КонецПроцедуры

&НаКлиенте
Функция ДокументБлокНачалоПараграфа()

	Возврат "" + Символ(10) + Символ(10)

КонецФункции

&НаКлиенте
Процедура ДокументДобавитьПереносСтроки()

	РедактируемыйДокумент = РедактируемыйДокумент + ДокументБлокПереносСтроки();

КонецПроцедуры

&НаКлиенте
Функция ДокументБлокПереносСтроки()

	Возврат "  " + Символ(10);

КонецФункции

&НаКлиенте
Процедура ДокументДобавитьБлокСвойтОбъекта()

	ДокументДобавитьПолосуРазделитель();
	ДокументДобавитьНачалоПараграфа();
	РедактируемыйДокумент = РедактируемыйДокумент + "**Свойства:**";

КонецПроцедуры

&НаКлиенте
Процедура ДокументДобавитьПолосуРазделитель()

	ДокументДобавитьНачалоПараграфа();
	РедактируемыйДокумент = РедактируемыйДокумент + "---";

КонецПроцедуры

&НаКлиенте
Процедура ДокументВывестиФорматируемуюТаблицу(ФорматируемаяТаблица)

	Для ИндексСтроки = 0 По ФорматируемаяТаблица.СтрокиТаблицы.Количество() - 1 Цикл

		ДокументДобавитьНовуюСтрокуТаблицы();
		РедактируемыйДокумент = РедактируемыйДокумент + "|";

		Для индексКолонки = 0 По ФорматируемаяТаблица.КоличествоКолонок - 1 Цикл
			РедактируемыйДокумент = РедактируемыйДокумент
				+ ФорматируемаяТаблица.СтрокиТаблицы[ИндексСтроки][ИндексКолонки] + "|";
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ДокументДобавитьЗаголовокТаблицыСвойств()

	ДокументДобавитьНачалоПараграфа();
	РедактируемыйДокумент = РедактируемыйДокумент + "|Свойство | Значение свойства| " + Символ(10) + "|---|---|";

КонецПроцедуры

&НаКлиенте
Процедура ДокументДобавитьВТаблицуСтрокуОписанияСвойства(ИмяСвойства, ЗначениеСвойства)

	Если СтрНайти(ИмяСвойства, "Группа") Тогда
		РедактируемыйДокумент = РедактируемыйДокумент + "***" + ЗначениеСвойства + "*** | ";
	Иначе
		РедактируемыйДокумент = РедактируемыйДокумент + ИмяСвойства + " | " + ЗначениеСвойства;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДокументДобавитьЗаголовокТаблицы()

	ДокументДобавитьНачалоПараграфа();
	РедактируемыйДокумент = РедактируемыйДокумент + "Имя | Тип | Свойства | Описание" + Символ(10)
		+ "---------|----------|----------|---------";

КонецПроцедуры

&НаКлиенте
Процедура ДокументДобавитьНовуюСтрокуТаблицы()

	РедактируемыйДокумент = РедактируемыйДокумент + Символ(10);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВТаблицуСтрокуОписанияДанных(Имя, Тип, Описание, Поле = Неопределено)

	ПредставлениеСвойств = "";
	Если ЗначениеЗаполнено(Поле.Свойства) Тогда
		Для Каждого Свойство Из Поле.Свойства Цикл
			Если СтрНайти(Свойство, "Группа") Тогда
				ПредставлениеСвойств = ПредставлениеСвойств + "***" + Свойство.Значение + "***";
			Иначе
				ПредставлениеСвойств = ПредставлениеСвойств + Свойство.Ключ + ": " + Свойство.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	РедактируемыйДокумент = РедактируемыйДокумент + Имя + " | " + Тип + " | " + ПредставлениеСвойств + " | " + Описание;

КонецПроцедуры

&НаКлиенте
Процедура ДокументДобавитьБлокНазначение(СвойстваОбъекта)
	
	Если Не СвойстваОбъекта.Свойство("Описание") Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(СвойстваОбъекта.Описание.Комментарий) 
		И Не ЗначениеЗаполнено(СвойстваОбъекта.Описание.Пояснение) Тогда
		Возврат;
	КонецЕсли;

	ДокументДобавитьНачалоПараграфа();
	РедактируемыйДокумент = РедактируемыйДокумент + "**Назначение:**";

	Если ЗначениеЗаполнено(СвойстваОбъекта.Описание.Комментарий) Тогда
		ДокументДобавитьПереносСтроки();
		РедактируемыйДокумент = РедактируемыйДокумент + СвойстваОбъекта.Описание.Комментарий;
	КонецЕсли;

	Если ЗначениеЗаполнено(СвойстваОбъекта.Описание.Пояснение) Тогда
		ДокументДобавитьПереносСтроки();
		РедактируемыйДокумент = РедактируемыйДокумент + СвойстваОбъекта.Описание.Пояснение;
	КонецЕсли;

КонецПроцедуры
#КонецОбласти

#Область СвойстваОбъекта

&НаКлиенте
Процедура ЗаполнитьСвойстваОбъектаМетаданных(ОбъектМетаданныхСтруктуры)

	Если ЭтоПодчиненныеЭлементыОбъекта(ОбъектМетаданныхСтруктуры) Тогда
		ЗаполнитьСвойстваПодчиненногоЭлемента(
			ВладелецПодчиненныхОбъектов(ОбъектМетаданныхСтруктуры), 
			МенеджераПодчиненныхОбъектов(ОбъектМетаданныхСтруктуры), ОбъектМетаданныхСтруктуры);
	Иначе
		ОбъектМетаданныхСтруктуры.Свойства = 
			СвойстваОбъектаМетаданных(ОбъектМетаданныхСтруктуры.Имя, ОбъектМетаданныхСтруктуры.Класс);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СвойстваОбъектаМетаданных(ИмяОбъекта, КлассОбъекта)

	Если КлассОбъекта = "Конфигурация" Тогда
		Возврат СвойстваКонфигурации(); 
	ИначеЕсли ЭтоКлассМодулиПриложения(КлассОбъекта) Тогда
		Возврат СвойстваМодуляПриложения(ИмяОбъекта);
	ИначеЕсли КлассОбъекта = "Подсистема" Тогда
		Возврат СвойстваПодсистемы(ИмяОбъекта);
	ИначеЕсли КлассОбъекта = "ОбщийМодуль" Тогда
		Возврат СвойстваОбщегоМодуля(ИмяОбъекта);
	ИначеЕсли КлассОбъекта = "ПараметрСеанса" Тогда
		Возврат СвойстваПараметраСеанса(ИмяОбъекта);
	ИначеЕсли КлассОбъекта = "Роль" Тогда
		Возврат СвойстваРоли(ИмяОбъекта);
	ИначеЕсли КлассОбъекта = "ОбщийРеквизит" Тогда
		Возврат СвойстваОбщегоРеквизита(ИмяОбъекта);
	ИначеЕсли КлассОбъекта = "ПланОбмена" Тогда
		Возврат СвойстваПланаОбмена(ИмяОбъекта);
	ИначеЕсли КлассОбъекта = "КритерийОтбора" Тогда
		Возврат СвойстваКритерияОтбора(ИмяОбъекта);
	ИначеЕсли КлассОбъекта = "ПодпискаНаСобытие" Тогда
		Возврат СвойстваПодпискиНаСобытие(ИмяОбъекта);
	ИначеЕсли КлассОбъекта = "РегламентноеЗадание" Тогда
		Возврат СвойстваРегламентногоЗадания(ИмяОбъекта);
	ИначеЕсли КлассОбъекта = "Константа" Тогда
		Возврат СвойстваКонстанты(ИмяОбъекта);
	ИначеЕсли КлассОбъекта = "Справочник" Тогда
		Возврат СвойстваСправочника(ИмяОбъекта);
	ИначеЕсли КлассОбъекта = "Документ" Тогда
		Возврат СвойстваДокумента(ИмяОбъекта);
	ИначеЕсли КлассОбъекта = "ЖурналДокументов" Тогда
		Возврат СвойстваЖурналаДокумента(ИмяОбъекта);
	ИначеЕсли КлассОбъекта = "Перечисление" Тогда
		Возврат СвойстваПеречисления(ИмяОбъекта);
	ИначеЕсли КлассОбъекта = "Отчет" Тогда
		Возврат СвойстваОтчета(ИмяОбъекта);
	ИначеЕсли КлассОбъекта = "Обработка" Тогда
		Возврат СвойстваОбработки(ИмяОбъекта);
	ИначеЕсли КлассОбъекта = "ПланВидовХарактеристик" Тогда
		Возврат СвойстваПланаВидовХарактеристик(ИмяОбъекта);
	ИначеЕсли КлассОбъекта = "ПланСчетов" Тогда
		Возврат СвойстваПланаСчетов(ИмяОбъекта);
	ИначеЕсли КлассОбъекта = "РегистрСведений" Тогда
		Возврат СвойстваРегистраСведений(ИмяОбъекта);
	ИначеЕсли КлассОбъекта = "РегистрНакопления" Тогда
		Возврат СвойстваРегистраНакопления(ИмяОбъекта);
	ИначеЕсли КлассОбъекта = "РегистрБухгалтерии" Тогда
		Возврат СвойстваРегистраБухгалтерии(ИмяОбъекта);
	ИначеЕсли КлассОбъекта = "БизнесПроцесс" Тогда
		Возврат СвойстваБизнесПроцесса(ИмяОбъекта);
	ИначеЕсли КлассОбъекта = "Задача" Тогда
		Возврат СвойстваЗадачи(ИмяОбъекта);
	ИначеЕсли КлассОбъекта = "ВнешнийИсточникДанных" Тогда
		Возврат СвойстваВнешнийИсточникДанных(ИмяОбъекта);
	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция ЭтоКлассМодулиПриложения(КлассОбъекта)
	
	Возврат КлассОбъекта = "МодульОбычногоПриложения" Или КлассОбъекта = "МодульУправляемогоПриложения"
		Или КлассОбъекта = "МодульВнешнегоСоединения" Или КлассОбъекта = "МодульСеанса";
	
КонецФункции

&НаСервереБезКонтекста
Функция СвойстваКонфигурации()

	СвойстваКонфигурации = Новый Структура;
	
	СвойстваКонфигурации.Вставить("Описание", Новый Структура);
	СвойстваКонфигурации.Описание.Вставить("Комментарий", Метаданные.Комментарий);
	СвойстваКонфигурации.Описание.Вставить("Пояснение", 
		Метаданные.КраткаяИнформация + Символы.ПС + Метаданные.ПодробнаяИнформация);

	СвойстваКонфигурации.Вставить("Название", Метаданные.Синоним);
	
	СвойстваКонфигурации.Вставить("ГруппаРазработка", "Разработчик");
	СвойстваКонфигурации.Вставить("Поставщик", Метаданные.Поставщик);
	СвойстваКонфигурации.Вставить("Версия", Метаданные.Версия);
	СвойстваКонфигурации.Вставить("АвторскиеПрава", Метаданные.АвторскиеПрава);
	СвойстваКонфигурации.Вставить("АдресИнформацииОКонфигурации", Метаданные.АдресИнформацииОКонфигурации);
	СвойстваКонфигурации.Вставить("АдресИнформацииОПоставщике", Метаданные.АдресИнформацииОПоставщике);
	СвойстваКонфигурации.Вставить("АдресКаталогаОбновлений", Метаданные.АдресКаталогаОбновлений);

	СвойстваКонфигурации.Вставить("ГруппаОсновные", "Основные");
	СвойстваКонфигурации.Вставить("ОсновнойРежимЗапуска", Метаданные.ОсновнойРежимЗапуска);
	СвойстваКонфигурации.Вставить("НазначенияИспользования", Метаданные.НазначенияИспользования);
	СвойстваКонфигурации.Вставить("ВариантВстроенногоЯзыка", Метаданные.ВариантВстроенногоЯзыка);
	СвойстваКонфигурации.Вставить("ОсновныеРоли", Метаданные.ОсновныеРоли);
	СвойстваКонфигурации.Вставить("ОсновнойСтиль", Метаданные.ОсновнойСтиль);
	СвойстваКонфигурации.Вставить("ОсновнойЯзык", Метаданные.ОсновнойЯзык);
	СвойстваКонфигурации.Вставить("ДополнительныеСловариПолнотекстовогоПоиска", 
		Метаданные.ДополнительныеСловариПолнотекстовогоПоиска);
	СвойстваКонфигурации.Вставить("ТребуемыеРазрешенияМобильногоПриложения", 
		Метаданные.ТребуемыеРазрешенияМобильногоПриложения);
	
	СвойстваКонфигурации.Вставить("ГруппаСовместимость", "Совместимость");
	СвойстваКонфигурации.Вставить("РежимУправленияБлокировкойДанных", Метаданные.РежимУправленияБлокировкойДанных);
	СвойстваКонфигурации.Вставить("РежимАвтонумерацииОбъектов", Метаданные.РежимАвтонумерацииОбъектов);
	СвойстваКонфигурации.Вставить("РежимИспользованияМодальности", Метаданные.РежимИспользованияМодальности);
	СвойстваКонфигурации.Вставить("РежимИспользованияСинхронныхВызововРасширенийИВнешнихКомпонент", 
		Метаданные.РежимИспользованияСинхронныхВызововРасширенийИВнешнихКомпонент);
	СвойстваКонфигурации.Вставить("РежимСовместимостиИнтерфейса", Метаданные.РежимСовместимостиИнтерфейса);
	СвойстваКонфигурации.Вставить("РежимСовместимости", Метаданные.РежимСовместимости);
	
	СвойстваКонфигурации.Вставить("ГруппаСправка", "Справочная информация");
	СвойстваКонфигурации.Вставить("ВключатьСправкуВСодержание", Метаданные.ВключатьСправкуВСодержание);
	
	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваКонфигурации);
	
	Возврат СвойстваКонфигурации;

КонецФункции

&НаСервереБезКонтекста
Функция СвойстваМодуляПриложения(ИмяОбщегоМодуля)

	СвойстваМодуляПриложения = Новый Структура;

	СвойстваМодуляПриложения.Вставить("Модули", Новый СписокЗначений);
	СвойстваМодуляПриложения.Модули.Добавить("Конфигурация." + ИмяОбщегоМодуля + ".txt", "Модуль");

	Возврат СвойстваМодуляПриложения;

КонецФункции

&НаСервереБезКонтекста
Функция СвойстваПодсистемы(ИмяПодсистемы)

	СвойстваПодсистемы = Новый Структура;

	ОбъектМетаданных = ПодсистемаКонфигурации(ИмяПодсистемы, Метаданные);

	СвойстваПодсистемы.Вставить("Описание", Новый Структура);
	СвойстваПодсистемы.Описание.Вставить("Комментарий", ОбъектМетаданных.Комментарий);
	СвойстваПодсистемы.Описание.Вставить("Пояснение", ОбъектМетаданных.Пояснение);

	СвойстваПодсистемы.Вставить("ГруппаОсновные", "Основные");
	СвойстваПодсистемы.Вставить("ВключатьВКомандныйИнтерфейс", ОбъектМетаданных.ВключатьВКомандныйИнтерфейс);

	СвойстваПодсистемы.Вставить("ГруппаСостав", "Состав");
	СвойстваПодсистемы.Вставить("Состав", ОбъектМетаданных.Состав);

	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваПодсистемы);

	Возврат СвойстваПодсистемы;

КонецФункции

&НаСервереБезКонтекста
Функция ПодсистемаКонфигурации(ИмяПодсистемы, ОбъектМетаданныхРодитель)
	
	Подсистема = ОбъектМетаданныхРодитель.Подсистемы.Найти(ИмяПодсистемы);
	
	Если Подсистема = Неопределено Тогда
		Для Каждого ПодчиненнаяПодсистема Из ОбъектМетаданныхРодитель.Подсистемы Цикл
			Подсистема = ПодсистемаКонфигурации(ИмяПодсистемы, ПодчиненнаяПодсистема);
			Если Не Подсистема = Неопределено Тогда
				Возврат Подсистема;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Подсистема;
	
КонецФункции

&НаСервереБезКонтекста
Функция СвойстваОбщегоМодуля(ИмяОбщегоМодуля)

	СвойстваОбщегоМодуля = Новый Структура;

	ОбъектМетаданных = Метаданные.ОбщиеМодули[ИмяОбщегоМодуля];

	СвойстваОбщегоМодуля.Вставить("Описание", Новый Структура);
	СвойстваОбщегоМодуля.Описание.Вставить("Комментарий", ОбъектМетаданных.Комментарий);
	СвойстваОбщегоМодуля.Описание.Вставить("Пояснение", "");

	СвойстваОбщегоМодуля.Вставить("ГруппаОсновные", "Основные");
	СвойстваОбщегоМодуля.Вставить("Глобальный", ОбъектМетаданных.Глобальный);
	СвойстваОбщегоМодуля.Вставить("КлиентУправляемоеПриложение", ОбъектМетаданных.КлиентУправляемоеПриложение);
	СвойстваОбщегоМодуля.Вставить("Сервер", ОбъектМетаданных.Сервер);
	СвойстваОбщегоМодуля.Вставить("ВнешнееСоединение", ОбъектМетаданных.ВнешнееСоединение);
	СвойстваОбщегоМодуля.Вставить("КлиентОбычноеПриложение", ОбъектМетаданных.КлиентОбычноеПриложение);
	СвойстваОбщегоМодуля.Вставить("ВызовСервера", ОбъектМетаданных.ВызовСервера);
	СвойстваОбщегоМодуля.Вставить("Привилегированный", ОбъектМетаданных.Привилегированный);
	СвойстваОбщегоМодуля.Вставить("ПовторноеИспользованиеВозвращаемыхЗначений",
		ОбъектМетаданных.ПовторноеИспользованиеВозвращаемыхЗначений);

	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваОбщегоМодуля);

	СвойстваОбщегоМодуля.Вставить("Модули", Новый СписокЗначений);
	СвойстваОбщегоМодуля.Модули.Добавить("ОбщийМодуль." + ИмяОбщегоМодуля + ".Модуль.txt", "Модуль");

	Возврат СвойстваОбщегоМодуля;

КонецФункции

&НаСервереБезКонтекста
Функция СвойстваПараметраСеанса(ИмяПараметраСеанса)

	СвойстваПараметраСеанса = Новый Структура;

	ОбъектМетаданных = Метаданные.ПараметрыСеанса[ИмяПараметраСеанса];

	СвойстваПараметраСеанса.Вставить("Описание", Новый Структура);
	СвойстваПараметраСеанса.Описание.Вставить("Комментарий", ОбъектМетаданных.Комментарий);
	СвойстваПараметраСеанса.Описание.Вставить("Пояснение", "");

	СвойстваПараметраСеанса.Вставить("Тип", ОбъектМетаданных.Тип);

	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваПараметраСеанса);

	Возврат СвойстваПараметраСеанса;

КонецФункции

&НаСервереБезКонтекста
Функция СвойстваРоли(ИмяРоли)

	СвойстваРоли = Новый Структура;

	ОбъектМетаданных = Метаданные.Роли[ИмяРоли];

	СвойстваРоли.Вставить("Описание", Новый Структура);
	СвойстваРоли.Описание.Вставить("Комментарий", ОбъектМетаданных.Комментарий);
	СвойстваРоли.Описание.Вставить("Пояснение", "");

	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваРоли);

	Возврат СвойстваРоли;

КонецФункции

&НаСервереБезКонтекста
Функция СвойстваОбщегоРеквизита(ИмяОбщегоРеквизита)

	СвойстваОбщегоРеквизита = Новый Структура;

	ОбъектМетаданных = Метаданные.ОбщиеРеквизиты[ИмяОбщегоРеквизита];

	СвойстваОбщегоРеквизита.Вставить("Описание", Новый Структура);
	СвойстваОбщегоРеквизита.Описание.Вставить("Комментарий", ОбъектМетаданных.Комментарий);
	СвойстваОбщегоРеквизита.Описание.Вставить("Пояснение", ОбъектМетаданных.Подсказка);

	СвойстваОбщегоРеквизита.Вставить("Тип", ОбъектМетаданных.Тип);

	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваОбщегоРеквизита);

	Возврат СвойстваОбщегоРеквизита;

КонецФункции

&НаСервереБезКонтекста
Функция СвойстваПланаОбмена(ИмяПланаОбмена)

	СвойстваПланаОбмена = Новый Структура;

	ОбъектМетаданных = Метаданные.ПланыОбмена[ИмяПланаОбмена];

	СвойстваПланаОбмена.Вставить("Описание", Новый Структура);
	СвойстваПланаОбмена.Описание.Вставить("Комментарий", ОбъектМетаданных.Комментарий);
	СвойстваПланаОбмена.Описание.Вставить("Пояснение", ОбъектМетаданных.Пояснение);

	СвойстваПланаОбмена.Вставить("ГруппаОсновные", "Основные");
	СвойстваПланаОбмена.Вставить("РаспределеннаяИнформационнаяБаза", ОбъектМетаданных.РаспределеннаяИнформационнаяБаза);
	СвойстваПланаОбмена.Вставить("ВключатьРасширенияКонфигурации", ОбъектМетаданных.ВключатьРасширенияКонфигурации);
	СвойстваПланаОбмена.Вставить("Состав", ОбъектМетаданных.Состав);

	СвойстваПланаОбмена.Вставить("ГруппаПолеВвода", "Поле ввода");
	СвойстваПланаОбмена.Вставить("БыстрыйВыбор", ОбъектМетаданных.БыстрыйВыбор);
	СвойстваПланаОбмена.Вставить("СозданиеПриВводе", ОбъектМетаданных.СозданиеПриВводе);
	СвойстваПланаОбмена.Вставить("ВводПоСтроке", ОбъектМетаданных.ВводПоСтроке);

	СвойстваПланаОбмена.Вставить("ГруппаОснованиеВладельцы", "Связь с объектами");
	СвойстваПланаОбмена.Вставить("ВводитсяНаОсновании", ОбъектМетаданных.ВводитсяНаОсновании);

	СвойстваПланаОбмена.Вставить("ГруппаПредставление", "Представление");
	СвойстваПланаОбмена.Вставить("ПредставлениеОбъекта", ОбъектМетаданных.ПредставлениеОбъекта);
	СвойстваПланаОбмена.Вставить("РасширенноеПредставлениеОбъекта", ОбъектМетаданных.РасширенноеПредставлениеОбъекта);
	СвойстваПланаОбмена.Вставить("ПредставлениеСписка", ОбъектМетаданных.ПредставлениеСписка);
	СвойстваПланаОбмена.Вставить("РасширенноеПредставлениеСписка", ОбъектМетаданных.РасширенноеПредставлениеСписка);

	СвойстваПланаОбмена.Вставить("ГруппаПрочее", "Прочее");
	СвойстваПланаОбмена.Вставить("ПоляБлокировкиДанных", ОбъектМетаданных.ПоляБлокировкиДанных);
	СвойстваПланаОбмена.Вставить("ПолнотекстовыйПоиск", ОбъектМетаданных.ПолнотекстовыйПоиск);
	СвойстваПланаОбмена.Вставить("ИсторияДанных", ОбъектМетаданных.ИсторияДанных);

	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваПланаОбмена);

	СвойстваПланаОбмена.Вставить("Модули", Новый СписокЗначений);
	СвойстваПланаОбмена.Модули.Добавить(
		"ПланОбмена." + ИмяПланаОбмена + ".МодульОбъекта.txt", "Модуль объекта: " + ИмяПланаОбмена);
	СвойстваПланаОбмена.Модули.Добавить(
		"ПланОбмена." + ИмяПланаОбмена + ".МодульМенеджера.txt", "Модуль менеджера: " + ИмяПланаОбмена);

	Возврат СвойстваПланаОбмена;

КонецФункции

&НаСервереБезКонтекста
Функция СвойстваКритерияОтбора(ИмяКритерияОтбора)

	СвойстваКритерияОтбора = Новый Структура;

	ОбъектМетаданных = Метаданные.КритерииОтбора[ИмяКритерияОтбора];

	СвойстваКритерияОтбора.Вставить("Описание", Новый Структура);
	СвойстваКритерияОтбора.Описание.Вставить("Комментарий", ОбъектМетаданных.Комментарий);
	СвойстваКритерияОтбора.Описание.Вставить("Пояснение", ОбъектМетаданных.Пояснение);

	СвойстваКритерияОтбора.Вставить("ГруппаОсновные", "Основные");
	СвойстваКритерияОтбора.Вставить("Тип", ОбъектМетаданных.Тип);
	СвойстваКритерияОтбора.Вставить("Состав", ОбъектМетаданных.Состав);

	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваКритерияОтбора);

	Возврат СвойстваКритерияОтбора;

КонецФункции

&НаСервереБезКонтекста
Функция СвойстваПодпискиНаСобытие(ИмяПодпискиНаСобытие)

	СвойстваПодпискиНаСобытие = Новый Структура;

	ОбъектМетаданных = Метаданные.ПодпискиНаСобытия[ИмяПодпискиНаСобытие];

	СвойстваПодпискиНаСобытие.Вставить("Описание", Новый Структура);
	СвойстваПодпискиНаСобытие.Описание.Вставить("Комментарий", ОбъектМетаданных.Комментарий);
	СвойстваПодпискиНаСобытие.Описание.Вставить("Пояснение", "");

	СвойстваПодпискиНаСобытие.Вставить("ГруппаОсновные", "Основные");
	СвойстваПодпискиНаСобытие.Вставить("Источник", ОбъектМетаданных.Источник);
	СвойстваПодпискиНаСобытие.Вставить("Событие", ОбъектМетаданных.Событие);
	СвойстваПодпискиНаСобытие.Вставить("Обработчик", ОбъектМетаданных.Обработчик);

	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваПодпискиНаСобытие);

	Возврат СвойстваПодпискиНаСобытие;

КонецФункции

&НаСервереБезКонтекста
Функция СвойстваРегламентногоЗадания(ИмяРегламентногоЗадания)

	СвойстваРегламентногоЗадания = Новый Структура;

	ОбъектМетаданных = Метаданные.РегламентныеЗадания[ИмяРегламентногоЗадания];

	СвойстваРегламентногоЗадания.Вставить("Описание", Новый Структура);
	СвойстваРегламентногоЗадания.Описание.Вставить("Комментарий", ОбъектМетаданных.Комментарий);
	СвойстваРегламентногоЗадания.Описание.Вставить("Пояснение", "");

	СвойстваРегламентногоЗадания.Вставить("ГруппаОсновные", "Основные");
	СвойстваРегламентногоЗадания.Вставить("Наименование", ОбъектМетаданных.Наименование);
	СвойстваРегламентногоЗадания.Вставить("ИмяМетода", ОбъектМетаданных.ИмяМетода);
	СвойстваРегламентногоЗадания.Вставить("Ключ", ОбъектМетаданных.Ключ);
	СвойстваРегламентногоЗадания.Вставить("Использование", ОбъектМетаданных.Использование);
	СвойстваРегламентногоЗадания.Вставить("Предопределенное", ОбъектМетаданных.Предопределенное);
	СвойстваРегламентногоЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении",
		ОбъектМетаданных.КоличествоПовторовПриАварийномЗавершении);
	СвойстваРегламентногоЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении",
		ОбъектМетаданных.ИнтервалПовтораПриАварийномЗавершении);
	СвойстваРегламентногоЗадания.Вставить("Расписание", ОбъектМетаданных.Расписание);

	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваРегламентногоЗадания);
	Возврат СвойстваРегламентногоЗадания;

КонецФункции

&НаСервереБезКонтекста
Функция СвойстваКонстанты(ИмяКонстанты)

	СвойстваКонстанты = Новый Структура;

	ОбъектМетаданных = Метаданные.Константы[ИмяКонстанты];

	СвойстваКонстанты.Вставить("Описание", Новый Структура);
	СвойстваКонстанты.Описание.Вставить("Комментарий", ОбъектМетаданных.Комментарий);
	СвойстваКонстанты.Описание.Вставить("Пояснение", ОбъектМетаданных.Пояснение);

	СвойстваКонстанты.Вставить("Тип", ОбъектМетаданных.Тип);

	СвойстваКонстанты.Вставить("ГруппаДанные", "Данные");
	СвойстваКонстанты.Вставить("РежимУправленияБлокировкойДанных", 
		ОбъектМетаданных.РежимУправленияБлокировкойДанных);
	СвойстваКонстанты.Вставить("ИсторияДанных", ОбъектМетаданных.ИсторияДанных);
	
	СвойстваКонстанты.Вставить("ГруппаПредставление", "Представление");
	СвойстваКонстанты.Вставить("ИспользоватьСтандартныеКоманды", ОбъектМетаданных.ИспользоватьСтандартныеКоманды);
	СвойстваКонстанты.Вставить("ОсновнаяФорма", ОбъектМетаданных.ОсновнаяФорма);	
		
//	ЗаполнитьФормыОбъекта(ОбъектМетаданных, "Константы", СвойстваКонстанты);

	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваКонстанты);

	Возврат СвойстваКонстанты;

КонецФункции

&НаСервереБезКонтекста
Функция СвойстваСправочника(ИмяСправочника)

	СвойстваСправочника = Новый Структура;

	ОбъектМетаданных = Метаданные.Справочники[ИмяСправочника];

	СвойстваСправочника.Вставить("Описание", Новый Структура);
	СвойстваСправочника.Описание.Вставить("Комментарий", ОбъектМетаданных.Комментарий);
	СвойстваСправочника.Описание.Вставить("Пояснение", ОбъектМетаданных.Пояснение);

	СвойстваСправочника.Вставить("ГруппаОсновные", "Основные");
	СвойстваСправочника.Вставить("ДлинаКода", ОбъектМетаданных.ДлинаКода);
	СвойстваСправочника.Вставить("ДлинаНаименования", ОбъектМетаданных.ДлинаНаименования);
	СвойстваСправочника.Вставить("ТипКода", ОбъектМетаданных.ТипКода);
	СвойстваСправочника.Вставить("ОсновноеПредставление", ОбъектМетаданных.ОсновноеПредставление);

	СвойстваСправочника.Вставить("ГруппаНумерация", "Нумерация");
	СвойстваСправочника.Вставить("Автонумерация", ОбъектМетаданных.Автонумерация);
	СвойстваСправочника.Вставить("КонтрольУникальности", ОбъектМетаданных.КонтрольУникальности);
	СвойстваСправочника.Вставить("СерииКодов", ОбъектМетаданных.СерииКодов);

	СвойстваСправочника.Вставить("ГруппаИерархия", "Иерархия");
	СвойстваСправочника.Вставить("Иерархический", ОбъектМетаданных.Иерархический);
	Если СвойстваСправочника.Иерархический Тогда
		СвойстваСправочника.Вставить("ВидИерархии", ОбъектМетаданных.ВидИерархии);
		СвойстваСправочника.Вставить("КоличествоУровней", ОбъектМетаданных.КоличествоУровней);
		СвойстваСправочника.Вставить("РазмещатьГруппыСверху", ОбъектМетаданных.ГруппыСверху);
	КонецЕсли;

	СвойстваСправочника.Вставить("ГруппаПолеВвода", "Поле ввода");
	СвойстваСправочника.Вставить("БыстрыйВыбор", ОбъектМетаданных.БыстрыйВыбор);
	СвойстваСправочника.Вставить("СпособВыбора", ОбъектМетаданных.СпособВыбора);
	СвойстваСправочника.Вставить("ВводПоСтроке", ОбъектМетаданных.ВводПоСтроке);

	СвойстваСправочника.Вставить("ГруппаОснованиеВладельцы", "Связь с объектами");
	СвойстваСправочника.Вставить("Владельцы", ОбъектМетаданных.Владельцы);
	СвойстваСправочника.Вставить("ВводитсяНаОсновании", ОбъектМетаданных.ВводитсяНаОсновании);

	СвойстваСправочника.Вставить("ГруппаПредставление", "Представление");
	СвойстваСправочника.Вставить("ПредставлениеОбъекта", ОбъектМетаданных.ПредставлениеОбъекта);
	СвойстваСправочника.Вставить("РасширенноеПредставлениеОбъекта", ОбъектМетаданных.РасширенноеПредставлениеОбъекта);
	СвойстваСправочника.Вставить("ПредставлениеСписка", ОбъектМетаданных.ПредставлениеСписка);
	СвойстваСправочника.Вставить("РасширенноеПредставлениеСписка", ОбъектМетаданных.РасширенноеПредставлениеСписка);

	СвойстваСправочника.Вставить("ГруппаПрочее", "Прочее");
	СвойстваСправочника.Вставить("ПоляБлокировкиДанных", ОбъектМетаданных.ПоляБлокировкиДанных);
	СвойстваСправочника.Вставить("ПолнотекстовыйПоиск", ОбъектМетаданных.ПолнотекстовыйПоиск);
	СвойстваСправочника.Вставить("ИсторияДанных", ОбъектМетаданных.ИсторияДанных);

	ЗаполнитьФормыОбъекта(ОбъектМетаданных, "Справочник", СвойстваСправочника);

	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваСправочника);

	СвойстваСправочника.Вставить("Модули", Новый СписокЗначений);
	СвойстваСправочника.Модули.Добавить(
		"Справочник." + ИмяСправочника + ".МодульОбъекта.txt", "Модуль объекта: " + ИмяСправочника);
	СвойстваСправочника.Модули.Добавить(
		"Справочник." + ИмяСправочника + ".МодульМенеджера.txt", "Модуль менеджера: " + ИмяСправочника);

	Возврат СвойстваСправочника;

КонецФункции

&НаСервереБезКонтекста
Функция СвойстваДокумента(ИмяДокумента)

	СвойстваДокумента = Новый Структура;

	ОбъектМетаданных = Метаданные.Документы[ИмяДокумента];

	СвойстваДокумента.Вставить("Описание", Новый Структура);
	СвойстваДокумента.Описание.Вставить("Комментарий", ОбъектМетаданных.Комментарий);
	СвойстваДокумента.Описание.Вставить("Пояснение", ОбъектМетаданных.Пояснение);

	СвойстваДокумента.Вставить("ГруппаНумерация", "Нумерация");
	СвойстваДокумента.Вставить("ТипНомера", ОбъектМетаданных.ТипНомера);
	СвойстваДокумента.Вставить("ДлинаНомера", ОбъектМетаданных.ДлинаНомера);
	СвойстваДокумента.Вставить("Автонумерация", ОбъектМетаданных.Автонумерация);
	СвойстваДокумента.Вставить("КонтрольУникальности", ОбъектМетаданных.КонтрольУникальности);
	СвойстваДокумента.Вставить("ПериодичностьНомера", ОбъектМетаданных.ПериодичностьНомера);
	СвойстваДокумента.Вставить("Нумератор", ОбъектМетаданных.Нумератор);

	СвойстваДокумента.Вставить("ГруппаПоляВвода", "ПоляВвода");
	СвойстваДокумента.Вставить("СозданиеПриВводе", ОбъектМетаданных.СозданиеПриВводе);
	СвойстваДокумента.Вставить("ВводПоСтроке", ОбъектМетаданных.ВводПоСтроке);

	СвойстваДокумента.Вставить("ГруппаОснованиеВладельцы", "Связь с объектами");
	СвойстваДокумента.Вставить("ВводитсяНаОсновании", ОбъектМетаданных.ВводитсяНаОсновании);

	СвойстваДокумента.Вставить("ГруппаДвижения", "Движения");
	СвойстваДокумента.Вставить("Проведение", ОбъектМетаданных.Проведение);
	СвойстваДокумента.Вставить("ОперативноеПроведение", ОбъектМетаданных.ОперативноеПроведение);
	СвойстваДокумента.Вставить("УдалениеДвижений", ОбъектМетаданных.УдалениеДвижений);
	СвойстваДокумента.Вставить("ЗаписьДвиженийПриПроведении", ОбъектМетаданных.ЗаписьДвиженийПриПроведении);
	СвойстваДокумента.Вставить("Движения", ОбъектМетаданных.Движения);

	СвойстваДокумента.Вставить("ГруппаПредставление", "Представление");
	СвойстваДокумента.Вставить("ПредставлениеОбъекта", ОбъектМетаданных.ПредставлениеОбъекта);
	СвойстваДокумента.Вставить("РасширенноеПредставлениеОбъекта", ОбъектМетаданных.РасширенноеПредставлениеОбъекта);
	СвойстваДокумента.Вставить("ПредставлениеСписка", ОбъектМетаданных.ПредставлениеСписка);
	СвойстваДокумента.Вставить("РасширенноеПредставлениеСписка", ОбъектМетаданных.РасширенноеПредставлениеСписка);

	СвойстваДокумента.Вставить("ГруппаПрочее", "Прочее");
	СвойстваДокумента.Вставить("ПоляБлокировкиДанных", ОбъектМетаданных.ПоляБлокировкиДанных);
	СвойстваДокумента.Вставить("ПолнотекстовыйПоиск", ОбъектМетаданных.ПолнотекстовыйПоиск);
	СвойстваДокумента.Вставить("ИсторияДанных", ОбъектМетаданных.ИсторияДанных);

	ЗаполнитьФормыОбъекта(ОбъектМетаданных, "Документ", СвойстваДокумента);

	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваДокумента);

	СвойстваДокумента.Вставить("Модули", Новый СписокЗначений);
	СвойстваДокумента.Модули.Добавить(
		"Документ." + ИмяДокумента + ".МодульОбъекта.txt", "Модуль объекта: " + ИмяДокумента);
	СвойстваДокумента.Модули.Добавить(
		"Документ." + ИмяДокумента + ".МодульМенеджера.txt", "Модуль менеджера: " + ИмяДокумента);

	Возврат СвойстваДокумента;

КонецФункции

&НаСервереБезКонтекста
Функция СвойстваЖурналаДокумента(ИмяЖурналаДокумента)

	СвойстваЖурналаДокумента = Новый Структура;

	ОбъектМетаданных = Метаданные.ЖурналыДокументов[ИмяЖурналаДокумента];

	СвойстваЖурналаДокумента.Вставить("Описание", Новый Структура);
	СвойстваЖурналаДокумента.Описание.Вставить("Комментарий", ОбъектМетаданных.Комментарий);
	СвойстваЖурналаДокумента.Описание.Вставить("Пояснение", ОбъектМетаданных.Пояснение);

	СвойстваЖурналаДокумента.Вставить("ГруппаДанные", "Данные");
	СвойстваЖурналаДокумента.Вставить("РегистрируемыеДокументы", ОбъектМетаданных.РегистрируемыеДокументы);

	СвойстваЖурналаДокумента.Вставить("ГруппаПредставление", "Представление");
	СвойстваЖурналаДокумента.Вставить("ПредставлениеСписка", ОбъектМетаданных.ПредставлениеСписка);
	СвойстваЖурналаДокумента.Вставить("РасширенноеПредставлениеСписка", ОбъектМетаданных.РасширенноеПредставлениеСписка);

	ЗаполнитьФормыОбъекта(ОбъектМетаданных, "ЖурналДокументов", СвойстваЖурналаДокумента);

	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваЖурналаДокумента);

	СвойстваЖурналаДокумента.Вставить("Модули", Новый СписокЗначений);
	СвойстваЖурналаДокумента.Модули.Добавить(
		"ЖурналДокументов." + ИмяЖурналаДокумента + ".МодульМенеджера.txt", "Модуль менеджера: " + ИмяЖурналаДокумента);

	Возврат СвойстваЖурналаДокумента;

КонецФункции

&НаСервереБезКонтекста
Функция СвойстваПеречисления(ИмяПеречисления)

	СвойстваПеречисления = Новый Структура;

	ОбъектМетаданных = Метаданные.Перечисления[ИмяПеречисления];

	СвойстваПеречисления.Вставить("Описание", Новый Структура);
	СвойстваПеречисления.Описание.Вставить("Комментарий", ОбъектМетаданных.Комментарий);
	СвойстваПеречисления.Описание.Вставить("Пояснение", ОбъектМетаданных.Пояснение);

	СвойстваПеречисления.Вставить("ГруппаПолеВвода", "Поле ввода");
	СвойстваПеречисления.Вставить("БыстрыйВыбор", ОбъектМетаданных.БыстрыйВыбор);
	СвойстваПеречисления.Вставить("СпособВыбора", ОбъектМетаданных.СпособВыбора);
	СвойстваПеречисления.Вставить("ИсторияВыбораПриВводе", ОбъектМетаданных.ИсторияВыбораПриВводе);

	СвойстваПеречисления.Вставить("ГруппаПредставление", "Представление");
	СвойстваПеречисления.Вставить("ПредставлениеСписка", ОбъектМетаданных.ПредставлениеСписка);
	СвойстваПеречисления.Вставить("РасширенноеПредставлениеСписка", ОбъектМетаданных.РасширенноеПредставлениеСписка);

	ЗаполнитьФормыОбъекта(ОбъектМетаданных, "Перечисление", СвойстваПеречисления);

	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваПеречисления);

	СвойстваПеречисления.Вставить("Модули", Новый СписокЗначений);
	СвойстваПеречисления.Модули.Добавить(
		"Перечисление." + ИмяПеречисления + ".МодульМенеджера.txt", "Модуль менеджера: " + ИмяПеречисления);
	Возврат СвойстваПеречисления;

КонецФункции

&НаСервереБезКонтекста
Функция СвойстваОтчета(ИмяОтчета)

	СвойстваОтчета = Новый Структура;

	ОбъектМетаданных = Метаданные.Отчеты[ИмяОтчета];

	СвойстваОтчета.Вставить("Описание", Новый Структура);
	СвойстваОтчета.Описание.Вставить("Комментарий", ОбъектМетаданных.Комментарий);
	СвойстваОтчета.Описание.Вставить("Пояснение", ОбъектМетаданных.Пояснение);

	СвойстваОтчета.Вставить("ГруппаОсновные", "Основные");
	СвойстваОтчета.Вставить("ОсновнаяСхемаКомпоновкиДанных", ОбъектМетаданных.ОсновнаяСхемаКомпоновкиДанных);
	СвойстваОтчета.Вставить("ХранилищеВариантов", ОбъектМетаданных.ХранилищеВариантов);
	СвойстваОтчета.Вставить("ХранилищеНастроек", ОбъектМетаданных.ХранилищеНастроек);

	СвойстваОтчета.Вставить("ГруппаПредставление", "Представление");
	СвойстваОтчета.Вставить("РасширенноеПредставление", ОбъектМетаданных.РасширенноеПредставление);

	ЗаполнитьФормыОбъекта(ОбъектМетаданных, "Отчет", СвойстваОтчета);

	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваОтчета);

	СвойстваОтчета.Вставить("Модули", Новый СписокЗначений);
	СвойстваОтчета.Модули.Добавить(
		"Отчет." + ИмяОтчета + ".МодульОбъекта.txt", "Модуль объекта: " + ИмяОтчета);
	СвойстваОтчета.Модули.Добавить(
		"Документ." + ИмяОтчета + ".МодульМенеджера.txt", "Модуль менеджера: " + ИмяОтчета);

	Возврат СвойстваОтчета;

КонецФункции

&НаСервереБезКонтекста
Функция СвойстваОбработки(ИмяОбработки)

	СвойстваОбработки = Новый Структура;

	ОбъектМетаданных = Метаданные.Обработки[ИмяОбработки];

	СвойстваОбработки.Вставить("Описание", Новый Структура);
	СвойстваОбработки.Описание.Вставить("Комментарий", ОбъектМетаданных.Комментарий);
	СвойстваОбработки.Описание.Вставить("Пояснение", ОбъектМетаданных.Пояснение);

	СвойстваОбработки.Вставить("ГруппаПредставление", "Представление");
	СвойстваОбработки.Вставить("РасширенноеПредставление", ОбъектМетаданных.РасширенноеПредставление);

	ЗаполнитьФормыОбъекта(ОбъектМетаданных, "Обработка", СвойстваОбработки);

	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваОбработки);

	СвойстваОбработки.Вставить("Модули", Новый СписокЗначений);
	СвойстваОбработки.Модули.Добавить(
		"Обработка." + ИмяОбработки + ".МодульОбъекта.txt", "Модуль объекта: " + ИмяОбработки);
	СвойстваОбработки.Модули.Добавить(
		"Обработка." + ИмяОбработки + ".МодульМенеджера.txt", "Модуль менеджера: " + ИмяОбработки);

	Возврат СвойстваОбработки;

КонецФункции

&НаСервереБезКонтекста
Функция СвойстваПланаВидовХарактеристик(ИмяПланаВидовХарактеристик)

	СвойстваПланаВидовХарактеристик = Новый Структура;

	ОбъектМетаданных = Метаданные.ПланыВидовХарактеристик[ИмяПланаВидовХарактеристик];

	СвойстваПланаВидовХарактеристик.Вставить("Описание", Новый Структура);
	СвойстваПланаВидовХарактеристик.Описание.Вставить("Комментарий", ОбъектМетаданных.Комментарий);
	СвойстваПланаВидовХарактеристик.Описание.Вставить("Пояснение", ОбъектМетаданных.Пояснение);

	СвойстваПланаВидовХарактеристик.Вставить("ГруппаОсновные", "Основные");
	СвойстваПланаВидовХарактеристик.Вставить("ДлинаКода", ОбъектМетаданных.ДлинаКода);
	СвойстваПланаВидовХарактеристик.Вставить("ДопустимаяДлинаКода", ОбъектМетаданных.ДопустимаяДлинаКода);
	СвойстваПланаВидовХарактеристик.Вставить("ДлинаНаименования", ОбъектМетаданных.ДлинаНаименования);

	ПредставлениеТипов = "";
	ОписаниеТипов = ОбъектМетаданных.Тип.Типы();
	Для Каждого ТипПланаВидовХарактеристик Из ОписаниеТипов Цикл
		ПредставлениеТипов = ПредставлениеТипов + ?(ПустаяСтрока(ПредставлениеТипов), "", ", ");
		ПредставлениеТипов = ПредставлениеТипов + СтрЗаменить(ПредставлениеТипа(ТипПланаВидовХарактеристик), "_", "\_");
	КонецЦикла;
	СвойстваПланаВидовХарактеристик.Вставить("Тип", ПредставлениеТипов);

	СвойстваПланаВидовХарактеристик.Вставить("ДополнительныеЗначенияХарактеристик",
		ОбъектМетаданных.ДополнительныеЗначенияХарактеристик);

	СвойстваПланаВидовХарактеристик.Вставить("ГруппаНумерация", "Нумерация");
	СвойстваПланаВидовХарактеристик.Вставить("КонтрольУникальности", ОбъектМетаданных.КонтрольУникальности);
	СвойстваПланаВидовХарактеристик.Вставить("Автонумерация", ОбъектМетаданных.Автонумерация);
	СвойстваПланаВидовХарактеристик.Вставить("СерииКодов", ОбъектМетаданных.СерииКодов);

	СвойстваПланаВидовХарактеристик.Вставить("ГруппаИерархия", "Иерархия");
	СвойстваПланаВидовХарактеристик.Вставить("Иерархический", ОбъектМетаданных.Иерархический);
	Если СвойстваПланаВидовХарактеристик.Иерархический Тогда
		СвойстваПланаВидовХарактеристик.Вставить("РазмещатьГруппыСверху", ОбъектМетаданных.ГруппыСверху);
	КонецЕсли;

	СвойстваПланаВидовХарактеристик.Вставить("ГруппаПолеВвода", "Поле ввода");
	СвойстваПланаВидовХарактеристик.Вставить("БыстрыйВыбор", ОбъектМетаданных.БыстрыйВыбор);
	СвойстваПланаВидовХарактеристик.Вставить("СпособВыбора", ОбъектМетаданных.СпособВыбора);
	СвойстваПланаВидовХарактеристик.Вставить("ВводПоСтроке", ОбъектМетаданных.ВводПоСтроке);

	СвойстваПланаВидовХарактеристик.Вставить("ГруппаОснованиеВладельцы", "Связь с объектами");
	СвойстваПланаВидовХарактеристик.Вставить("ВводитсяНаОсновании", ОбъектМетаданных.ВводитсяНаОсновании);

	СвойстваПланаВидовХарактеристик.Вставить("ГруппаПредставление", "Представление");
	СвойстваПланаВидовХарактеристик.Вставить("ПредставлениеОбъекта", ОбъектМетаданных.ПредставлениеОбъекта);
	СвойстваПланаВидовХарактеристик.Вставить("РасширенноеПредставлениеОбъекта",
		ОбъектМетаданных.РасширенноеПредставлениеОбъекта);
	СвойстваПланаВидовХарактеристик.Вставить("ПредставлениеСписка", ОбъектМетаданных.ПредставлениеСписка);
	СвойстваПланаВидовХарактеристик.Вставить("РасширенноеПредставлениеСписка",
		ОбъектМетаданных.РасширенноеПредставлениеСписка);

	СвойстваПланаВидовХарактеристик.Вставить("ГруппаПрочее", "Прочее");
	СвойстваПланаВидовХарактеристик.Вставить("ОбновлениеПредопределенныхДанных",
		ОбъектМетаданных.ОбновлениеПредопределенныхДанных);
	СвойстваПланаВидовХарактеристик.Вставить("ПоляБлокировкиДанных", ОбъектМетаданных.ПоляБлокировкиДанных);
	СвойстваПланаВидовХарактеристик.Вставить("ПолнотекстовыйПоиск", ОбъектМетаданных.ПолнотекстовыйПоиск);
	СвойстваПланаВидовХарактеристик.Вставить("ИсторияДанных", ОбъектМетаданных.ИсторияДанных);

	ЗаполнитьФормыОбъекта(ОбъектМетаданных, "ПланВидовХарактеристик", СвойстваПланаВидовХарактеристик);

	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваПланаВидовХарактеристик);

	СвойстваПланаВидовХарактеристик.Вставить("Модули", Новый СписокЗначений);
	СвойстваПланаВидовХарактеристик.Модули.Добавить("ПланВидовХарактеристик." + ИмяПланаВидовХарактеристик
		+ ".МодульОбъекта.txt", "Модуль объекта: " + ИмяПланаВидовХарактеристик);
	СвойстваПланаВидовХарактеристик.Модули.Добавить("ПланВидовХарактеристик." + ИмяПланаВидовХарактеристик
		+ ".МодульМенеджера.txt", "Модуль менеджера: " + ИмяПланаВидовХарактеристик);

	Возврат СвойстваПланаВидовХарактеристик;

КонецФункции

&НаСервереБезКонтекста
Функция СвойстваПланаСчетов(ИмяПланаСчетов)

	СвойстваПланаСчетов = Новый Структура;

	ОбъектМетаданных = Метаданные.ПланыСчетов[ИмяПланаСчетов];

	СвойстваПланаСчетов.Вставить("Описание", Новый Структура);
	СвойстваПланаСчетов.Описание.Вставить("Комментарий", ОбъектМетаданных.Комментарий);
	СвойстваПланаСчетов.Описание.Вставить("Пояснение", ОбъектМетаданных.Пояснение);

	СвойстваПланаСчетов.Вставить("ГруппаОсновные", "Основные");
	СвойстваПланаСчетов.Вставить("ДлинаКода", ОбъектМетаданных.ДлинаКода);
	СвойстваПланаСчетов.Вставить("ДлинаНаименования", ОбъектМетаданных.ДлинаНаименования);
	СвойстваПланаСчетов.Вставить("МаскаКода", ОбъектМетаданных.МаскаКода);
	СвойстваПланаСчетов.Вставить("АвтоПорядокПоКоду", ОбъектМетаданных.АвтоПорядокПоКоду);
	СвойстваПланаСчетов.Вставить("ДлинаПорядка", ОбъектМетаданных.ДлинаПорядка);
	СвойстваПланаСчетов.Вставить("ВидыСубконто", ОбъектМетаданных.ВидыСубконто);
	СвойстваПланаСчетов.Вставить("МаксКоличествоСубконто", ОбъектМетаданных.МаксКоличествоСубконто);

	СвойстваПланаСчетов.Вставить("ГруппаНумерация", "Нумерация");
	СвойстваПланаСчетов.Вставить("КонтрольУникальности", ОбъектМетаданных.КонтрольУникальности);
	СвойстваПланаСчетов.Вставить("СерииКодов", ОбъектМетаданных.СерииКодов);

	СвойстваПланаСчетов.Вставить("ГруппаПолеВвода", "Поле ввода");
	СвойстваПланаСчетов.Вставить("БыстрыйВыбор", ОбъектМетаданных.БыстрыйВыбор);
	СвойстваПланаСчетов.Вставить("СозданиеПриВводе", ОбъектМетаданных.СозданиеПриВводе);
	СвойстваПланаСчетов.Вставить("ВводПоСтроке", ОбъектМетаданных.ВводПоСтроке);

	СвойстваПланаСчетов.Вставить("ГруппаОснованиеВладельцы", "Связь с объектами");
	СвойстваПланаСчетов.Вставить("ВводитсяНаОсновании", ОбъектМетаданных.ВводитсяНаОсновании);

	СвойстваПланаСчетов.Вставить("ГруппаПредставление", "Представление");
	СвойстваПланаСчетов.Вставить("ПредставлениеОбъекта", ОбъектМетаданных.ПредставлениеОбъекта);
	СвойстваПланаСчетов.Вставить("РасширенноеПредставлениеОбъекта", ОбъектМетаданных.РасширенноеПредставлениеОбъекта);
	СвойстваПланаСчетов.Вставить("ПредставлениеСписка", ОбъектМетаданных.ПредставлениеСписка);
	СвойстваПланаСчетов.Вставить("РасширенноеПредставлениеСписка", ОбъектМетаданных.РасширенноеПредставлениеСписка);

	СвойстваПланаСчетов.Вставить("ГруппаПрочее", "Прочее");
	СвойстваПланаСчетов.Вставить("ПоляБлокировкиДанных", ОбъектМетаданных.ПоляБлокировкиДанных);
	СвойстваПланаСчетов.Вставить("ПолнотекстовыйПоиск", ОбъектМетаданных.ПолнотекстовыйПоиск);
	СвойстваПланаСчетов.Вставить("ИсторияДанных", ОбъектМетаданных.ИсторияДанных);

	ЗаполнитьФормыОбъекта(ОбъектМетаданных, "ПланСчетов", СвойстваПланаСчетов);

	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваПланаСчетов);

	СвойстваПланаСчетов.Вставить("Модули", Новый СписокЗначений);
	СвойстваПланаСчетов.Модули.Добавить("ПланСчетов." + ИмяПланаСчетов + ".МодульОбъекта.txt", "Модуль объекта: "
		+ ИмяПланаСчетов);
	СвойстваПланаСчетов.Модули.Добавить("ПланСчетов." + ИмяПланаСчетов + ".МодульМенеджера.txt", "Модуль менеджера: "
		+ ИмяПланаСчетов);

	Возврат СвойстваПланаСчетов;

КонецФункции

&НаСервереБезКонтекста
Функция СвойстваРегистраСведений(ИмяРегистраСведений)

	СвойстваРегистраСведений = Новый Структура;

	ОбъектМетаданных = Метаданные.РегистрыСведений[ИмяРегистраСведений];

	СвойстваРегистраСведений.Вставить("Описание", Новый Структура);
	СвойстваРегистраСведений.Описание.Вставить("Комментарий", ОбъектМетаданных.Комментарий);
	СвойстваРегистраСведений.Описание.Вставить("Пояснение", ОбъектМетаданных.Пояснение);

	СвойстваРегистраСведений.Вставить("ГруппаДанные", "Данные");
	СвойстваРегистраСведений.Вставить("Периодичность", ОбъектМетаданных.ПериодичностьРегистраСведений);
	СвойстваРегистраСведений.Вставить("РежимЗаписи", ОбъектМетаданных.РежимЗаписи);
	СвойстваРегистраСведений.Вставить("ОсновнойОтборПоПериоду", ОбъектМетаданных.ОсновнойОтборПоПериоду);
	СвойстваРегистраСведений.Вставить("РазрешитьИтогиСрезПервых", ОбъектМетаданных.РазрешитьИтогиСрезПервых);
	СвойстваРегистраСведений.Вставить("РазрешитьИтогиСрезПоследних", ОбъектМетаданных.РазрешитьИтогиСрезПоследних);
	СвойстваРегистраСведений.Вставить("ИсторияДанных", ОбъектМетаданных.ИсторияДанных);

	СвойстваРегистраСведений.Вставить("ГруппаПредставление", "Представление");
	СвойстваРегистраСведений.Вставить("ПредставлениеЗаписи", ОбъектМетаданных.ПредставлениеЗаписи);
	СвойстваРегистраСведений.Вставить("РасширенноеПредставлениеЗаписи", ОбъектМетаданных.РасширенноеПредставлениеЗаписи);
	СвойстваРегистраСведений.Вставить("ПредставлениеСписка", ОбъектМетаданных.ПредставлениеСписка);
	СвойстваРегистраСведений.Вставить("РасширенноеПредставлениеСписка", ОбъектМетаданных.РасширенноеПредставлениеСписка);

	СвойстваРегистраСведений.Вставить("ГруппаПрочее", "Прочее");
	СвойстваРегистраСведений.Вставить("РежимУправленияБлокировкойДанных",
		ОбъектМетаданных.РежимУправленияБлокировкойДанных);
	СвойстваРегистраСведений.Вставить("ПолнотекстовыйПоиск", ОбъектМетаданных.ПолнотекстовыйПоиск);

	СвойстваРегистраСведений.Вставить("ГруппаРегистраторы", "Связь с объектами");
	СвойстваРегистраСведений.Вставить("Регистраторы", РегистраторыЗаписейРегистра("РегистрыСведений",
		ИмяРегистраСведений));

	ЗаполнитьФормыОбъекта(ОбъектМетаданных, "РегистрСведений", СвойстваРегистраСведений);

	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваРегистраСведений);

	СвойстваРегистраСведений.Вставить("Модули", Новый СписокЗначений);
	СвойстваРегистраСведений.Модули.Добавить("РегистрСведений." + ИмяРегистраСведений + ".МодульНабораЗаписей.txt",
		"Модуль набора записей: " + ИмяРегистраСведений);
	СвойстваРегистраСведений.Модули.Добавить("РегистрСведений." + ИмяРегистраСведений + ".МодульМенеджера.txt",
		"Модуль менеджера: " + ИмяРегистраСведений);

	Возврат СвойстваРегистраСведений;

КонецФункции

&НаСервереБезКонтекста
Функция СвойстваРегистраНакопления(ИмяРегистраНакопления)

	СвойстваРегистраНакопления = Новый Структура;

	ОбъектМетаданных = Метаданные.РегистрыНакопления[ИмяРегистраНакопления];

	СвойстваРегистраНакопления.Вставить("Описание", Новый Структура);
	СвойстваРегистраНакопления.Описание.Вставить("Комментарий", ОбъектМетаданных.Комментарий);
	СвойстваРегистраНакопления.Описание.Вставить("Пояснение", ОбъектМетаданных.Пояснение);

	СвойстваРегистраНакопления.Вставить("ГруппаОсновные", "Основные");
	СвойстваРегистраНакопления.Вставить("Периодичность", ОбъектМетаданных.ВидРегистра);

	СвойстваРегистраНакопления.Вставить("ГруппаПредставление", "Представление");
	СвойстваРегистраНакопления.Вставить("ПредставлениеСписка", ОбъектМетаданных.ПредставлениеСписка);
	СвойстваРегистраНакопления.Вставить("РасширенноеПредставлениеСписка",
		ОбъектМетаданных.РасширенноеПредставлениеСписка);

	СвойстваРегистраНакопления.Вставить("ГруппаПрочее", "Прочее");
	СвойстваРегистраНакопления.Вставить("РежимУправленияБлокировкойДанных",
		ОбъектМетаданных.РежимУправленияБлокировкойДанных);
	СвойстваРегистраНакопления.Вставить("ПолнотекстовыйПоиск", ОбъектМетаданных.ПолнотекстовыйПоиск);
	СвойстваРегистраНакопления.Вставить("РазрешитьРазделениеИтогов", ОбъектМетаданных.РазрешитьРазделениеИтогов);

	СвойстваРегистраНакопления.Вставить("ГруппаРегистраторы", "Связь с объектами");
	СвойстваРегистраНакопления.Вставить("Регистраторы", РегистраторыЗаписейРегистра("РегистрыНакопления",
		ИмяРегистраНакопления));

	ЗаполнитьФормыОбъекта(ОбъектМетаданных, "РегистрНакопления", СвойстваРегистраНакопления);

	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваРегистраНакопления);

	СвойстваРегистраНакопления.Вставить("Модули", Новый СписокЗначений);
	СвойстваРегистраНакопления.Модули.Добавить("РегистрНакопления." + ИмяРегистраНакопления + ".МодульНабораЗаписей.txt",
		"Модуль набора записей: " + ИмяРегистраНакопления);
	СвойстваРегистраНакопления.Модули.Добавить("РегистрНакопления." + ИмяРегистраНакопления + ".МодульМенеджера.txt",
		"Модуль менеджера: " + ИмяРегистраНакопления);

	Возврат СвойстваРегистраНакопления;

КонецФункции

&НаСервереБезКонтекста
Функция СвойстваРегистраБухгалтерии(ИмяРегистраБухгалтерии)

	СвойстваРегистраБухгалтерии = Новый Структура;

	ОбъектМетаданных = Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии];

	СвойстваРегистраБухгалтерии.Вставить("Описание", Новый Структура);
	СвойстваРегистраБухгалтерии.Описание.Вставить("Комментарий", ОбъектМетаданных.Комментарий);
	СвойстваРегистраБухгалтерии.Описание.Вставить("Пояснение", ОбъектМетаданных.Пояснение);

	СвойстваРегистраБухгалтерии.Вставить("ГруппаОсновные", "Основные");
	СвойстваРегистраБухгалтерии.Вставить("ПланСчетов", ОбъектМетаданных.ПланСчетов);
	СвойстваРегистраБухгалтерии.Вставить("Корреспонденция", ОбъектМетаданных.Корреспонденция);
	СвойстваРегистраБухгалтерии.Вставить("ДлинаУточненияПериода", ОбъектМетаданных.ДлинаУточненияПериода);

	СвойстваРегистраБухгалтерии.Вставить("ГруппаПредставление", "Представление");
	СвойстваРегистраБухгалтерии.Вставить("ПредставлениеСписка", ОбъектМетаданных.ПредставлениеСписка);
	СвойстваРегистраБухгалтерии.Вставить("РасширенноеПредставлениеСписка",
		ОбъектМетаданных.РасширенноеПредставлениеСписка);

	СвойстваРегистраБухгалтерии.Вставить("ГруппаПрочее", "Прочее");
	СвойстваРегистраБухгалтерии.Вставить("РежимУправленияБлокировкойДанных",
		ОбъектМетаданных.РежимУправленияБлокировкойДанных);
	СвойстваРегистраБухгалтерии.Вставить("ПолнотекстовыйПоиск", ОбъектМетаданных.ПолнотекстовыйПоиск);
	СвойстваРегистраБухгалтерии.Вставить("РазрешитьРазделениеИтогов", ОбъектМетаданных.РазрешитьРазделениеИтогов);

	СвойстваРегистраБухгалтерии.Вставить("ГруппаРегистраторы", "Связь с объектами");
	СвойстваРегистраБухгалтерии.Вставить("Регистраторы", РегистраторыЗаписейРегистра("РегистрыБухгалтерии",
		ИмяРегистраБухгалтерии));

	ЗаполнитьФормыОбъекта(ОбъектМетаданных, "РегистрБухгалтерии", СвойстваРегистраБухгалтерии);

	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваРегистраБухгалтерии);

	СвойстваРегистраБухгалтерии.Вставить("Модули", Новый СписокЗначений);
	СвойстваРегистраБухгалтерии.Модули.Добавить("РегистрБухгалтерии." + ИмяРегистраБухгалтерии
		+ ".МодульНабораЗаписей.txt", "Модуль набора записей: " + ИмяРегистраБухгалтерии);
	СвойстваРегистраБухгалтерии.Модули.Добавить("РегистрБухгалтерии." + ИмяРегистраБухгалтерии + ".МодульМенеджера.txt",
		"Модуль менеджера: " + ИмяРегистраБухгалтерии);

	Возврат СвойстваРегистраБухгалтерии;

КонецФункции

&НаСервереБезКонтекста
Функция РегистраторыЗаписейРегистра(КлассРегистра, ИмяРегистра)

	Регистраторы = Новый СписокЗначений;
	ОбъектРегистр = Метаданные[КлассРегистра][ИмяРегистра];

	Для Каждого ДокументРегистратор Из Метаданные.Документы Цикл
		Если ДокументРегистратор.Движения.Содержит(ОбъектРегистр) Тогда
			Регистраторы.Добавить(СтрЗаменить(ДокументРегистратор.Имя, "_", "\_"));
		КонецЕсли;
	КонецЦикла;

	Возврат Регистраторы;

КонецФункции

&НаСервереБезКонтекста
Функция СвойстваБизнесПроцесса(ИмяБизнесПроцесса)

	СвойстваБизнесПроцесса = Новый Структура;

	ОбъектМетаданных = Метаданные.БизнесПроцессы[ИмяБизнесПроцесса];

	СвойстваБизнесПроцесса.Вставить("Описание", Новый Структура);
	СвойстваБизнесПроцесса.Описание.Вставить("Комментарий", ОбъектМетаданных.Комментарий);
	СвойстваБизнесПроцесса.Описание.Вставить("Пояснение", ОбъектМетаданных.Пояснение);

	СвойстваБизнесПроцесса.Вставить("ГруппаОсновные", "Основные");
	СвойстваБизнесПроцесса.Вставить("ТипНомера", ОбъектМетаданных.ТипНомера);
	СвойстваБизнесПроцесса.Вставить("ДлинаНомера", ОбъектМетаданных.ДлинаНомера);
	СвойстваБизнесПроцесса.Вставить("ДопустимаяДлинаНомера", ОбъектМетаданных.ДопустимаяДлинаНомера);
	СвойстваБизнесПроцесса.Вставить("Задача", ОбъектМетаданных.Задача);

	СвойстваБизнесПроцесса.Вставить("ГруппаНумерация", "Нумерация");
	СвойстваБизнесПроцесса.Вставить("Автонумерация", ОбъектМетаданных.Автонумерация);
	СвойстваБизнесПроцесса.Вставить("КонтрольУникальности", ОбъектМетаданных.КонтрольУникальности);
	СвойстваБизнесПроцесса.Вставить("ПериодичностьНомера", ОбъектМетаданных.ПериодичностьНомера);

	СвойстваБизнесПроцесса.Вставить("ГруппаПолеВвода", "Поле ввода");
	СвойстваБизнесПроцесса.Вставить("СозданиеПриВводе", ОбъектМетаданных.СозданиеПриВводе);
	СвойстваБизнесПроцесса.Вставить("ВводПоСтроке", ОбъектМетаданных.ВводПоСтроке);

	СвойстваБизнесПроцесса.Вставить("ГруппаОснованиеВладельцы", "Связь с объектами");
	СвойстваБизнесПроцесса.Вставить("ВводитсяНаОсновании", ОбъектМетаданных.ВводитсяНаОсновании);

	СвойстваБизнесПроцесса.Вставить("ГруппаПредставление", "Представление");
	СвойстваБизнесПроцесса.Вставить("ПредставлениеОбъекта", ОбъектМетаданных.ПредставлениеОбъекта);
	СвойстваБизнесПроцесса.Вставить("РасширенноеПредставлениеОбъекта", ОбъектМетаданных.РасширенноеПредставлениеОбъекта);
	СвойстваБизнесПроцесса.Вставить("ПредставлениеСписка", ОбъектМетаданных.ПредставлениеСписка);
	СвойстваБизнесПроцесса.Вставить("РасширенноеПредставлениеСписка", ОбъектМетаданных.РасширенноеПредставлениеСписка);

	СвойстваБизнесПроцесса.Вставить("ГруппаПрочее", "Прочее");
	СвойстваБизнесПроцесса.Вставить("ПоляБлокировкиДанных", ОбъектМетаданных.ПоляБлокировкиДанных);
	СвойстваБизнесПроцесса.Вставить("РежимУправленияБлокировкойДанных",
		ОбъектМетаданных.РежимУправленияБлокировкойДанных);
	СвойстваБизнесПроцесса.Вставить("ПолнотекстовыйПоиск", ОбъектМетаданных.ПолнотекстовыйПоиск);
	СвойстваБизнесПроцесса.Вставить("ИсторияДанных", ОбъектМетаданных.ИсторияДанных);

	ЗаполнитьФормыОбъекта(ОбъектМетаданных, "БизнесПроцесс", СвойстваБизнесПроцесса);

	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваБизнесПроцесса);

	СвойстваБизнесПроцесса.Вставить("Модули", Новый СписокЗначений);
	СвойстваБизнесПроцесса.Модули.Добавить("БизнесПроцесс." + ИмяБизнесПроцесса + ".МодульОбъекта.txt",
		"Модуль объекта: " + ИмяБизнесПроцесса);
	СвойстваБизнесПроцесса.Модули.Добавить("БизнесПроцессы." + ИмяБизнесПроцесса + ".МодульМенеджера.txt",
		"Модуль менеджера: " + ИмяБизнесПроцесса);

	Возврат СвойстваБизнесПроцесса;

КонецФункции

&НаСервереБезКонтекста
Функция СвойстваЗадачи(ИмяЗадачи)

	СвойстваЗадачи = Новый Структура;

	ОбъектМетаданных = Метаданные.Задачи[ИмяЗадачи];

	СвойстваЗадачи.Вставить("Описание", Новый Структура);
	СвойстваЗадачи.Описание.Вставить("Комментарий", ОбъектМетаданных.Комментарий);
	СвойстваЗадачи.Описание.Вставить("Пояснение", ОбъектМетаданных.Пояснение);

	СвойстваЗадачи.Вставить("ГруппаНумерация", "Нумерация");
	СвойстваЗадачи.Вставить("Автонумерация", ОбъектМетаданных.Автонумерация);
	СвойстваЗадачи.Вставить("КонтрольУникальности", ОбъектМетаданных.КонтрольУникальности);
	СвойстваЗадачи.Вставить("АвтоПрефиксНомераЗадачи", ОбъектМетаданных.АвтоПрефиксНомераЗадачи);

	СвойстваЗадачи.Вставить("ГруппаПолеВвода", "Поле ввода");
	СвойстваЗадачи.Вставить("СозданиеПриВводе", ОбъектМетаданных.СозданиеПриВводе);
	СвойстваЗадачи.Вставить("ВводПоСтроке", ОбъектМетаданных.ВводПоСтроке);

	СвойстваЗадачи.Вставить("ГруппаОснованиеВладельцы", "Связь с объектами");
	СвойстваЗадачи.Вставить("ВводитсяНаОсновании", ОбъектМетаданных.ВводитсяНаОсновании);

	СвойстваЗадачи.Вставить("ГруппаПредставление", "Представление");
	СвойстваЗадачи.Вставить("ПредставлениеОбъекта", ОбъектМетаданных.ПредставлениеОбъекта);
	СвойстваЗадачи.Вставить("РасширенноеПредставлениеОбъекта", ОбъектМетаданных.РасширенноеПредставлениеОбъекта);
	СвойстваЗадачи.Вставить("ПредставлениеСписка", ОбъектМетаданных.ПредставлениеСписка);
	СвойстваЗадачи.Вставить("РасширенноеПредставлениеСписка", ОбъектМетаданных.РасширенноеПредставлениеСписка);

	СвойстваЗадачи.Вставить("ГруппаПрочее", "Прочее");
	СвойстваЗадачи.Вставить("ПоляБлокировкиДанных", ОбъектМетаданных.ПоляБлокировкиДанных);
	СвойстваЗадачи.Вставить("РежимУправленияБлокировкойДанных", ОбъектМетаданных.РежимУправленияБлокировкойДанных);
	СвойстваЗадачи.Вставить("ПолнотекстовыйПоиск", ОбъектМетаданных.ПолнотекстовыйПоиск);
	СвойстваЗадачи.Вставить("ИсторияДанных", ОбъектМетаданных.ИсторияДанных);

	ЗаполнитьФормыОбъекта(ОбъектМетаданных, "Задача", СвойстваЗадачи);

	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваЗадачи);

	СвойстваЗадачи.Вставить("Модули", Новый СписокЗначений);
	СвойстваЗадачи.Модули.Добавить("Задача." + ИмяЗадачи + ".МодульОбъекта.txt", "Модуль объекта: " + ИмяЗадачи);
	СвойстваЗадачи.Модули.Добавить("Задача." + ИмяЗадачи + ".МодульМенеджера.txt", "Модуль менеджера: " + ИмяЗадачи);

	Возврат СвойстваЗадачи;

КонецФункции

&НаСервереБезКонтекста
Функция СвойстваВнешнийИсточникДанных(ИмяВнешнегоИсточникаДанных)

	СвойстваВнешнегоИсточника = Новый Структура;

	ОбъектМетаданных = Метаданные.ВнешниеИсточникиДанных[ИмяВнешнегоИсточникаДанных];

	СвойстваВнешнегоИсточника.Вставить("Описание", Новый Структура);
	СвойстваВнешнегоИсточника.Описание.Вставить("Комментарий", ОбъектМетаданных.Комментарий);
	СвойстваВнешнегоИсточника.Описание.Вставить("Пояснение", "");

	СвойстваВнешнегоИсточника.Вставить("ГруппаПрочее", "Прочее");
	СвойстваВнешнегоИсточника.Вставить("РежимУправленияБлокировкойДанных",
		ОбъектМетаданных.РежимУправленияБлокировкойДанных);

	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваВнешнегоИсточника);

	Возврат СвойстваВнешнегоИсточника;

КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьФормыОбъекта(ОбъектМетаданных, КлассаМенеджераОбъекта, СвойстваОбъетка)

	СвойстваОбъетка.Вставить("ГруппаОсновныеФормы", "Основные формы");
	ВидыПредназначенияФорм = ВидыПредназначенияФормОбъекта(КлассаМенеджераОбъекта);
	Для Каждого ВидПрезназначенияФормы Из ВидыПредназначенияФорм Цикл
		ФормаОбъекта = ОбъектМетаданных[ВидПрезназначенияФормы.Значение];
		Если Не ФормаОбъекта = Неопределено Тогда
			СвойстваОбъетка.Вставить(ВидПрезназначенияФормы.Значение, ФормаОбъекта.Имя);
		КонецЕсли;
		
//		Если ФормаОбъеОбъектМетаданных[ВидПрезназначенияФормы.Значение] Тогда
//			ЭлементФорма.Описание = ?(ПустаяСтрока(ЭлементФорма.Описание), "", ", ")
//				+ ВидПрезназначенияФормы.Представление + ".";
//		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидыПредназначенияФормОбъекта(КлассаМенеджераОбъекта)

	ВидыПредназначенияФорм = Новый СписокЗначений;

	Если КлассаМенеджераОбъекта = "Справочник" Тогда

		ВидыПредназначенияФорм.Добавить("ОсновнаяФормаГруппы", "Основная форма группы");
		ВидыПредназначенияФорм.Добавить("ОсновнаяФормаДляВыбора", "Основная форма для выбора");
		ВидыПредназначенияФорм.Добавить("ОсновнаяФормаДляВыбораГруппы", "Основная форма для выбора группы");
		ВидыПредназначенияФорм.Добавить("ОсновнаяФормаОбъекта", "Основная форма объекта");
		ВидыПредназначенияФорм.Добавить("ОсновнаяФормаСписка", "Основная форма списка");
		ВидыПредназначенияФорм.Добавить("ДополнительнаяФормаГруппы", "Дополнительная форма группы");
		ВидыПредназначенияФорм.Добавить("ДополнительнаяФормаДляВыбора", "Дополнительная форма для выбора");
		ВидыПредназначенияФорм.Добавить("ДополнительнаяФормаДляВыбораГруппы", "Дополнительная форма для выбора группы");
		ВидыПредназначенияФорм.Добавить("ДополнительнаяФормаОбъекта", "Дополнительная форма объекта");
		ВидыПредназначенияФорм.Добавить("ДополнительнаяФормаСписка", "Дополнительная форма списка");

	ИначеЕсли КлассаМенеджераОбъекта = "Документ" Тогда

		ВидыПредназначенияФорм.Добавить("ОсновнаяФормаДляВыбора", "Основная форма для выбора");
		ВидыПредназначенияФорм.Добавить("ОсновнаяФормаОбъекта", "Основная форма объекта");
		ВидыПредназначенияФорм.Добавить("ОсновнаяФормаСписка", "Основная форма списка");
		ВидыПредназначенияФорм.Добавить("ДополнительнаяФормаДляВыбора", "Дополнительная форма для выбора");
		ВидыПредназначенияФорм.Добавить("ДополнительнаяФормаОбъекта", "Дополнительная форма объекта");
		ВидыПредназначенияФорм.Добавить("ДополнительнаяФормаСписка", "Дополнительная форма списка");

	ИначеЕсли КлассаМенеджераОбъекта = "ЖурналДокументов" Тогда

		ВидыПредназначенияФорм.Добавить("ОсновнаяФорма", "Основная форма");

	ИначеЕсли КлассаМенеджераОбъекта = "Перечисление" Тогда

		ВидыПредназначенияФорм.Добавить("ОсновнаяФормаСписка", "Основная форма списка");
		ВидыПредназначенияФорм.Добавить("ОсновнаяФормаДляВыбора", "Основная форма для выбора");

	ИначеЕсли КлассаМенеджераОбъекта = "Отчет" Тогда

		ВидыПредназначенияФорм.Добавить("ОсновнаяФорма", "Основная форма");
		ВидыПредназначенияФорм.Добавить("ОсновнаяФормаНастроек", "Основная форма настроек");
		ВидыПредназначенияФорм.Добавить("ОсновнаяФормаВарианта", "Основная форма варианта");

	ИначеЕсли КлассаМенеджераОбъекта = "Обработка" Тогда

		ВидыПредназначенияФорм.Добавить("ОсновнаяФорма", "Основная форма");

	ИначеЕсли КлассаМенеджераОбъекта = "ПланВидовХарактеристик" Тогда

		ВидыПредназначенияФорм.Добавить("ОсновнаяФормаОбъекта", "Основная форма объекта");
		ВидыПредназначенияФорм.Добавить("ОсновнаяФормаГруппы", "Основная форма группы");
		ВидыПредназначенияФорм.Добавить("ОсновнаяФормаСписка", "Основная форма списка");
		ВидыПредназначенияФорм.Добавить("ОсновнаяФормаДляВыбора", "Основная форма для выбора");
		ВидыПредназначенияФорм.Добавить("ОсновнаяФормаДляВыбораГруппы", "Основная форма для выбора группы");

	ИначеЕсли КлассаМенеджераОбъекта = "ПланСчетов" Тогда

		ВидыПредназначенияФорм.Добавить("ОсновнаяФормаОбъекта", "Основная форма объекта");
		ВидыПредназначенияФорм.Добавить("ОсновнаяФормаСписка", "Основная форма списка");
		ВидыПредназначенияФорм.Добавить("ОсновнаяФормаДляВыбора", "Основная форма для выбора");

	ИначеЕсли КлассаМенеджераОбъекта = "РегистрСведений" Тогда

		ВидыПредназначенияФорм.Добавить("ОсновнаяФормаЗаписи", "Основная форма записи");
		ВидыПредназначенияФорм.Добавить("ОсновнаяФормаСписка", "Основная форма списка");

	ИначеЕсли КлассаМенеджераОбъекта = "РегистрНакопления" Или КлассаМенеджераОбъекта = "РегистрБухгалтерии" Тогда

		ВидыПредназначенияФорм.Добавить("ОсновнаяФормаСписка", "Основная форма списка");

	ИначеЕсли КлассаМенеджераОбъекта = "БизнеcПроцесс" Или КлассаМенеджераОбъекта = "Задача" Тогда

		ВидыПредназначенияФорм.Добавить("ОсновнаяФормаОбъекта", "Основная форма объекта");
		ВидыПредназначенияФорм.Добавить("ОсновнаяФормаСписка", "Основная форма списка");
		ВидыПредназначенияФорм.Добавить("ОсновнаяФормаДляВыбора", "Основная форма для выбора");

	КонецЕсли;

	Возврат ВидыПредназначенияФорм;

КонецФункции

&НаКлиенте
Процедура ЗаполнитьСвойстваПодчиненногоЭлемента(ОбъектМетаданныхСтруктуры, МенеджерЭлементовОбъекта, ЭлементОбъекта)

	ИмяМенеджераОбъекта = ИмяМенеджераОбъектов(ОбъектМетаданныхСтруктуры);
	Если ЭлементОбъекта.Класс = "Реквизит" Тогда

		ИмяТабличнойЧасти = "";
		Если МенеджерЭлементовОбъекта.Класс = "ТабличнаяЧасть" Тогда
			ИмяТабличнойЧасти = МенеджерЭлементовОбъекта.Имя;
		КонецЕсли;

		ЭлементОбъекта.Свойства = СвойстваРеквизита(
			ИмяМенеджераОбъекта, ОбъектМетаданныхСтруктуры.Имя, ЭлементОбъекта.Имя, ИмяТабличнойЧасти);

	ИначеЕсли ЭлементОбъекта.Класс = "РеквизитАдресации" Тогда

		ЭлементОбъекта.Свойства = СвойстваРеквизитаАдресации(
			ИмяМенеджераОбъекта, ОбъектМетаданныхСтруктуры.Имя, ЭлементОбъекта.Имя);

	ИначеЕсли ЭлементОбъекта.Класс = "Граф" Тогда

		ЭлементОбъекта.Свойства = СвойстваГрафа(
			ИмяМенеджераОбъекта, ОбъектМетаданныхСтруктуры.Имя, ЭлементОбъекта.Имя);

	ИначеЕсли ЭлементОбъекта.Класс = "Значение" Тогда

		ЭлементОбъекта.Свойства = СвойстваЗначенияПеречисления(
			ИмяМенеджераОбъекта, ОбъектМетаданныхСтруктуры.Имя, ЭлементОбъекта.Имя);

	ИначеЕсли ЭлементОбъекта.Класс = "ПризнакУчета" Или ЭлементОбъекта.Класс = "ПризнакУчетаСубконто" Тогда

		ЭлементОбъекта.Свойства = СвойстваПризнакаУчета(
			ИмяМенеджераОбъекта, ОбъектМетаданныхСтруктуры.Имя, ЭлементОбъекта.Имя, ЭлементОбъекта.Класс
			= "ПризнакУчетаСубконто");

	ИначеЕсли ЭлементОбъекта.Класс = "Измерение" Тогда

		ЭлементОбъекта.Свойства = СвойстваИзмерения(
			ИмяМенеджераОбъекта, ОбъектМетаданныхСтруктуры.Имя, ЭлементОбъекта.Имя);

	ИначеЕсли ЭлементОбъекта.Класс = "Ресурс" Тогда

		ЭлементОбъекта.Свойства = СвойстваРесурса(
			ИмяМенеджераОбъекта, ОбъектМетаданныхСтруктуры.Имя, ЭлементОбъекта.Имя);

	ИначеЕсли ЭлементОбъекта.Класс = "Форма" Тогда

		ЭлементОбъекта.Свойства = СвойстваФормы(
			ИмяМенеджераОбъекта, ОбъектМетаданныхСтруктуры.Имя, ОбъектМетаданныхСтруктуры.Класс, ЭлементОбъекта.Имя);

	ИначеЕсли ЭлементОбъекта.Класс = "Команда" Тогда

		ЭлементОбъекта.Свойства = СвойстваКоманды(
			ИмяМенеджераОбъекта, ОбъектМетаданныхСтруктуры.Имя, ОбъектМетаданныхСтруктуры.Класс, ЭлементОбъекта.Имя);

	ИначеЕсли ЭлементОбъекта.Класс = "Макет" Тогда

		ЭлементОбъекта.Свойства = СвойстваМакета(
			ИмяМенеджераОбъекта, ОбъектМетаданныхСтруктуры.Имя, ЭлементОбъекта.Имя);

	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция СвойстваРеквизита(ИмяМенеджераОбъекта, ИмяОбъектаРодителя, ИмяРеквизита, ИмяТабличнойЧасти = "")

	ЭтоРеквизитОбъекта = Ложь;
	Если ПустаяСтрока(ИмяТабличнойЧасти) Тогда
		ОбъектМетаданных = Метаданные[ИмяМенеджераОбъекта][ИмяОбъектаРодителя];
		ЭтоРеквизитОбъекта = Ложь;
	Иначе
		ОбъектМетаданных = Метаданные[ИмяМенеджераОбъекта][ИмяОбъектаРодителя].ТабличныеЧасти[ИмяТабличнойЧасти];
	КонецЕсли;

	РеквизитОбъекта = ОбъектМетаданных.Реквизиты[ИмяРеквизита];

	СвойстваРеквизита = Новый Структура;

	СвойстваРеквизита.Вставить("Описание", Новый Структура);
	СвойстваРеквизита.Описание.Вставить("Комментарий", РеквизитОбъекта.Комментарий);
	СвойстваРеквизита.Описание.Вставить("Пояснение", РеквизитОбъекта.Подсказка);

	СвойстваРеквизита.Вставить("Тип", РеквизитОбъекта.Тип);

	СвойстваРеквизита.Вставить("ГруппаИспользование", "Использование");
	Если ЭтоРеквизитОбъекта Тогда
		СвойстваРеквизита.Вставить("Использование", РеквизитОбъекта.Использование);
	КонецЕсли;

	СвойстваРеквизита.Вставить("Индексирование", РеквизитОбъекта.Индексирование);
	СвойстваРеквизита.Вставить("ПолнотекстовыйПоиск", РеквизитОбъекта.ПолнотекстовыйПоиск);
	Если Не ИмяМенеджераОбъекта = "РегистрыНакопления" Тогда
		СвойстваРеквизита.Вставить("ИсторияДанных", РеквизитОбъекта.ИсторияДанных);
	КонецЕсли;

	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваРеквизита);

	Возврат СвойстваРеквизита;

КонецФункции

&НаСервереБезКонтекста
Функция СвойстваРеквизитаАдресации(ИмяМенеджераОбъекта, ИмяОбъектаРодителя, ИмяРеквизитаАдресации)

	ОбъектМетаданных = Метаданные[ИмяМенеджераОбъекта][ИмяОбъектаРодителя];
	РеквизитАдресацииОбъекта = ОбъектМетаданных.РеквизитыАдресации[ИмяРеквизитаАдресации];

	СвойстваРеквизитаАдресации = Новый Структура;

	СвойстваРеквизитаАдресации.Вставить("Описание", Новый Структура);
	СвойстваРеквизитаАдресации.Описание.Вставить("Комментарий", РеквизитАдресацииОбъекта.Комментарий);
	СвойстваРеквизитаАдресации.Описание.Вставить("Пояснение", РеквизитАдресацииОбъекта.Подсказка);

	СвойстваРеквизитаАдресации.Вставить("Тип", РеквизитАдресацииОбъекта.Тип);

	СвойстваРеквизитаАдресации.Вставить("Индексирование", РеквизитАдресацииОбъекта.Индексирование);
	СвойстваРеквизитаАдресации.Вставить("ПолнотекстовыйПоиск", РеквизитАдресацииОбъекта.ПолнотекстовыйПоиск);
	Если Не ИмяМенеджераОбъекта = "РегистрыНакопления" Тогда
		СвойстваРеквизитаАдресации.Вставить("ИсторияДанных", РеквизитАдресацииОбъекта.ИсторияДанных);
	КонецЕсли;

	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваРеквизитаАдресации);

	Возврат СвойстваРеквизитаАдресации;

КонецФункции

&НаСервереБезКонтекста
Функция СвойстваГрафа(ИмяМенеджераОбъекта, ИмяОбъектаРодителя, ИмяГрафа)

	ОбъектМетаданных = Метаданные[ИмяМенеджераОбъекта][ИмяОбъектаРодителя];
	ГрафОбъекта = ОбъектМетаданных.Графы[ИмяГрафа];

	СвойстваГрафа = Новый Структура;

	СвойстваГрафа.Вставить("Описание", Новый Структура);
	СвойстваГрафа.Описание.Вставить("Комментарий", ГрафОбъекта.Комментарий);
	СвойстваГрафа.Описание.Вставить("Пояснение", "");

	СвойстваГрафа.Вставить("Ссылки", ГрафОбъекта.Ссылки);

	СвойстваГрафа.Вставить("ГруппаИспользование", "Использование");
	СвойстваГрафа.Вставить("Индексирование", ГрафОбъекта.Индексирование);

	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваГрафа);

	Возврат СвойстваГрафа;

КонецФункции

&НаСервереБезКонтекста
Функция СвойстваИзмерения(ИмяМенеджераОбъекта, ИмяОбъектаРодителя, ИмяИзмерения)

	ОбъектМетаданных = Метаданные[ИмяМенеджераОбъекта][ИмяОбъектаРодителя];
	ИзмерениеОбъекта = ОбъектМетаданных.Измерения[ИмяИзмерения];

	СвойстваИзмерения = Новый Структура;

	СвойстваИзмерения.Вставить("Описание", Новый Структура);
	СвойстваИзмерения.Описание.Вставить("Комментарий", ИзмерениеОбъекта.Комментарий);
	СвойстваИзмерения.Описание.Вставить("Пояснение", ИзмерениеОбъекта.Подсказка);

	СвойстваИзмерения.Вставить("Тип", ИзмерениеОбъекта.Тип);

	СвойстваИзмерения.Вставить("ГруппаОсновные", "Основные");
	Если ИмяМенеджераОбъекта = "РегистрыСведений" Тогда
		СвойстваИзмерения.Вставить("Ведущее", ИзмерениеОбъекта.Ведущее);
		СвойстваИзмерения.Вставить("ОсновнойОтбора", ИзмерениеОбъекта.ОсновнойОтбор);
	КонецЕсли;
	СвойстваИзмерения.Вставить("ЗапрещатьНезаполненныеЗначения", ИзмерениеОбъекта.ЗапрещатьНезаполненныеЗначения);

	СвойстваИзмерения.Вставить("ГруппаИспользование", "Использование");
	СвойстваИзмерения.Вставить("Индексирование", ИзмерениеОбъекта.Индексирование);
	СвойстваИзмерения.Вставить("ПолнотекстовыйПоиск", ИзмерениеОбъекта.ПолнотекстовыйПоиск);

	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваИзмерения);

	Возврат СвойстваИзмерения;

КонецФункции

&НаСервереБезКонтекста
Функция СвойстваРесурса(ИмяМенеджераОбъекта, ИмяОбъектаРодителя, ИмяРесурса)

	ОбъектМетаданных = Метаданные[ИмяМенеджераОбъекта][ИмяОбъектаРодителя];
	РесурсОбъекта = ОбъектМетаданных.Ресурсы[ИмяРесурса];

	СвойстваРесурса = Новый Структура;

	СвойстваРесурса.Вставить("Описание", Новый Структура);
	СвойстваРесурса.Описание.Вставить("Комментарий", РесурсОбъекта.Комментарий);
	СвойстваРесурса.Описание.Вставить("Пояснение", РесурсОбъекта.Подсказка);

	СвойстваРесурса.Вставить("Тип", РесурсОбъекта.Тип);

	СвойстваРесурса.Вставить("ГруппаИспользование", "Использование");
	Если ИмяМенеджераОбъекта = "РегистрыСведений" Тогда
		СвойстваРесурса.Вставить("Индексирование", РесурсОбъекта.Индексирование);
		СвойстваРесурса.Вставить("ИсторияДанных", РесурсОбъекта.ИсторияДанных);
	КонецЕсли;
	СвойстваРесурса.Вставить("ПолнотекстовыйПоиск", РесурсОбъекта.ПолнотекстовыйПоиск);
	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваРесурса);

	Возврат СвойстваРесурса;

КонецФункции

&НаСервереБезКонтекста
Функция СвойстваПризнакаУчета(ИмяМенеджераОбъекта, ИмяОбъектаРодителя, ИмяПризнакаУчета, ЭтоПризнакСубконто = Ложь)

	Если ЭтоПризнакСубконто Тогда
		ПризнакУчета = Метаданные[ИмяМенеджераОбъекта][ИмяОбъектаРодителя].ПризнакиУчетаСубконто[ИмяПризнакаУчета];
	Иначе
		ПризнакУчета = Метаданные[ИмяМенеджераОбъекта][ИмяОбъектаРодителя].ПризнакиУчета[ИмяПризнакаУчета];
	КонецЕсли;

	СвойстваПризнакаУчета = Новый Структура;

	СвойстваПризнакаУчета.Вставить("Описание", Новый Структура);
	СвойстваПризнакаУчета.Описание.Вставить("Комментарий", ПризнакУчета.Комментарий);
	СвойстваПризнакаУчета.Описание.Вставить("Пояснение", ПризнакУчета.Подсказка);

	СвойстваПризнакаУчета.Вставить("Тип", ПризнакУчета.Тип);

	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваПризнакаУчета);

	Возврат СвойстваПризнакаУчета;

КонецФункции

&НаСервереБезКонтекста
Функция СвойстваЗначенияПеречисления(ИмяМенеджераОбъекта, ИмяОбъектаРодителя, ИмяЗначения)

	ОбъектМетаданных = Метаданные[ИмяМенеджераОбъекта][ИмяОбъектаРодителя];
	ЗначениеПеречисления = ОбъектМетаданных.ЗначенияПеречисления[ИмяЗначения];

	СвойстваЗначенияПеречисления = Новый Структура;

	СвойстваЗначенияПеречисления.Вставить("Описание", Новый Структура);
	СвойстваЗначенияПеречисления.Описание.Вставить("Комментарий", ЗначениеПеречисления.Комментарий);

	Возврат СвойстваЗначенияПеречисления;

КонецФункции

&НаСервереБезКонтекста
Функция СвойстваФормы(ИмяМенеджераОбъекта, ИмяОбъектаРодителя, КлассаМенеджераОбъекта, ИмяФормы)

	ОбъектМетаданных = Метаданные[ИмяМенеджераОбъекта][ИмяОбъектаРодителя];
	ФормаОбъекта = ОбъектМетаданных.Формы[ИмяФормы];

	СвойстваФормы = Новый Структура;

	СвойстваФормы.Вставить("Описание", Новый Структура);
	СвойстваФормы.Описание.Вставить("Комментарий", ФормаОбъекта.Комментарий);

	ТипФормыОбъекта = Новый СписокЗначений;
	ТипФормыОбъекта.Добавить(Строка(ФормаОбъекта.ТипФормы));
	СвойстваФормы.Вставить("Тип", ТипФормыОбъекта);

	ВидыПредназначенияФорм = ВидыПредназначенияФормОбъекта(КлассаМенеджераОбъекта);
	Для Каждого ВидПрезназначенияФормы Из ВидыПредназначенияФорм Цикл
		Если ФормаОбъекта = ОбъектМетаданных[ВидПрезназначенияФормы.Значение] Тогда
			СвойстваФормы.Вставить(ВидПрезназначенияФормы.Значение, "Да");
		КонецЕсли;
	КонецЦикла;

	СвойстваФормы.Вставить("Модули", Новый СписокЗначений);
	СвойстваФормы.Модули.Добавить(
		КлассаМенеджераОбъекта + "." + ИмяОбъектаРодителя + ".Форма." + ИмяФормы + ".Форма.Модуль.txt",
		"Модуль формы: " + ИмяФормы);

	Возврат СвойстваФормы;

КонецФункции

&НаСервереБезКонтекста
Функция СвойстваКоманды(ИмяМенеджераОбъекта, ИмяОбъектаРодителя, КлассаМенеджераОбъекта, ИмяКоманды)

	ОбъектМетаданныхКоманда = Метаданные[ИмяМенеджераОбъекта][ИмяОбъектаРодителя].Команды[ИмяКоманды];

	СвойстваКоманды = Новый Структура;

	СвойстваКоманды.Вставить("Описание", Новый Структура);
	СвойстваКоманды.Описание.Вставить("Комментарий", ОбъектМетаданныхКоманда.Комментарий);
	СвойстваКоманды.Описание.Вставить("Пояснение", ОбъектМетаданныхКоманда.Подсказка);

	СвойстваКоманды.Вставить("Группа", "Группа");
	СвойстваКоманды.Вставить("РасположениеКоманды", ОбъектМетаданныхКоманда.Группа);
	СвойстваКоманды.Вставить("ТипПараметраКоманды", ОбъектМетаданныхКоманда.ТипПараметраКоманды);
	СвойстваКоманды.Вставить("РежимИспользованияПараметра", ОбъектМетаданныхКоманда.РежимИспользованияПараметра);
	СвойстваКоманды.Вставить("ИзменяетДанные", ОбъектМетаданныхКоманда.ИзменяетДанные);

	СвойстваКоманды.Вставить("ГруппаПредставление", "Представление");
	СвойстваКоманды.Вставить("Отображение", ОбъектМетаданныхКоманда.Отображение);

	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваКоманды);

	СвойстваКоманды.Вставить("Модули", Новый СписокЗначений);
	СвойстваКоманды.Модули.Добавить(
		КлассаМенеджераОбъекта + "." + ИмяОбъектаРодителя + ".Команда." + ИмяКоманды + ".МодульКоманды.txt",
		"Модуль команды: " + ИмяКоманды);

	Возврат СвойстваКоманды;

КонецФункции

&НаСервереБезКонтекста
Функция СвойстваМакета(ИмяМенеджераОбъекта, ИмяОбъектаРодителя, ИмяМакета)

	ОбъектМетаданныхМакет = Метаданные[ИмяМенеджераОбъекта][ИмяОбъектаРодителя].Макеты[ИмяМакета];

	СвойстваМакета = Новый Структура;

	СвойстваМакета.Вставить("Описание", Новый Структура);
	СвойстваМакета.Описание.Вставить("Комментарий", ОбъектМетаданныхМакет.Комментарий);

	СвойстваМакета.Вставить("Тип", ОбъектМетаданныхМакет.ТипМакета);

	ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваМакета);

	Возврат СвойстваМакета;

КонецФункции

&НаСервереБезКонтекста
Процедура ПреобразоватьЗначенияСвойствВСтроковоеПредставление(СвойстваОбъекта)

	Для Каждого СвойствоОбъекта Из СвойстваОбъекта Цикл
		Если СвойствоОбъекта.Ключ = "Описание" Или СтрНайти(СвойствоОбъекта.Ключ, "Группа") Тогда
			Продолжить;
		КонецЕсли;

		СвойстваОбъекта[СвойствоОбъекта.Ключ] = ПредставлениеСвойстваОбъекта(СвойствоОбъекта.Значение);

	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеСвойстваОбъекта(ЗначениеСвойства)

	Представление = "";
	Если ТипЗнч(ЗначениеСвойства) = Тип("Булево") Тогда
		Представление = ?(ЗначениеСвойства, "Да", "Нет");
	ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("СписокПолей") Тогда
		Для Каждого Поле Из ЗначениеСвойства Цикл
			Представление = Представление + ?(ПустаяСтрока(Представление), "", ", ") + Поле.Имя;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("КоллекцияЗначенийСвойстваОбъектаМетаданных") 
		Или ТипЗнч(ЗначениеСвойства) = Тип("СоставПланаОбмена") Тогда

		Для Каждого ОбъектМетаданных Из ЗначениеСвойства Цикл

			Если ТипЗнч(ЗначениеСвойства) = Тип("СоставПланаОбмена") Тогда
				ОбъектМетаданных = ОбъектМетаданных.Метаданные;
			КонецЕсли;

			Представление = Представление + ?(ПустаяСтрока(Представление), "", ", ") + СтрЗаменить(
				ОбъектМетаданных.Имя, "_", "\_");

			ПредставлениеТипаОбъектаКоллекции = ПредставлениеОбъектаМетаданных(ОбъектМетаданных);
			Представление = Представление + ?(ПустаяСтрока(ПредставлениеТипаОбъектаКоллекции), "", "{"
				+ ПредставлениеТипаОбъектаКоллекции + "}");

		КонецЦикла;

	ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("ОписаниеТипов") Тогда
		Представление = ТипыОбъектаМетаданных(ЗначениеСвойства);
	ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("ОбъектМетаданных") Тогда

		Представление = СтрЗаменить(ЗначениеСвойства.Имя, "_", "\_");
		ПредставлениеТипаОбъектаКоллекции = ПредставлениеОбъектаМетаданных(ЗначениеСвойства);
		Представление = Представление + ?(ПустаяСтрока(ПредставлениеТипаОбъектаКоллекции), "", "{"
			+ ПредставлениеТипаОбъектаКоллекции + "}");

	Иначе
		Представление = Строка(ЗначениеСвойства);
	КонецЕсли;

	Возврат Представление;

КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеОбъектаМетаданных(ОбъектМетаданных)

	Если Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных) Тогда
		Возврат "ПланОбмена";
	ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		Возврат "Справочник";
	ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		Возврат "Документ";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
		Возврат "ПланВидовХарактеристик";
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных) Тогда
		Возврат "ПланСчетов";
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
		Возврат "РегистрыСведений";
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
		Возврат "РегистрыНакопления";
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) Тогда
		Возврат "РегистрыБухгалтерии";
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных) Тогда
		Возврат "РегистрыРасчета";
	ИначеЕсли Метаданные.Задачи.Содержит(ОбъектМетаданных) Тогда
		Возврат "Задача";
	КонецЕсли;

	Возврат "";

КонецФункции

&НаСервере
Процедура ЗаполнитьТипыОбъектаМетаданных(ЭлементОбъектаМетаданных, ОбъектМетаданных)

	ОписаниеТипов = ОбъектМетаданных.Тип;
	ЭлементОбъектаМетаданных.Тип = ТипыОбъектаМетаданных(ОписаниеТипов.Типы());

	Если ЭлементОбъектаМетаданных.Тип = "Строка" Тогда
		ЭлементОбъектаМетаданных.Тип = ЭлементОбъектаМетаданных.Тип + "(" + ОписаниеТипов.КвалификаторыСтроки.Длина
			+ ")";
	ИначеЕсли ЭлементОбъектаМетаданных.Тип = "Число" Тогда
		ЭлементОбъектаМетаданных.Тип = ЭлементОбъектаМетаданных.Тип + "("
			+ ОписаниеТипов.КвалификаторыЧисла.Разрядность + ","
			+ ОписаниеТипов.КвалификаторыЧисла.РазрядностьДробнойЧасти + ")";
	ИначеЕсли ЭлементОбъектаМетаданных.Тип = "Дата" Тогда
		ЭлементОбъектаМетаданных.Тип = ЭлементОбъектаМетаданных.Тип + "(" + ОписаниеТипов.КвалификаторыДаты.ЧастиДаты
			+ ")";
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТипыОбъектаМетаданных()

&НаСервереБезКонтекста
Функция ТипыОбъектаМетаданных(ОписаниеТиповОбъекта)

	ТипыОбъектаМетаданных = Новый СписокЗначений;

	Для Каждого ТипОбъекта Из ОписаниеТиповОбъекта.Типы() Цикл

		ПредставлениеТипа = ПредставлениеТипа(ТипОбъекта);

		Если ПредставлениеТипа = "Строка" Тогда
			ПредставлениеТипа = ПредставлениеТипа + "(" + ОписаниеТиповОбъекта.КвалификаторыСтроки.Длина + ")";
		ИначеЕсли ПредставлениеТипа = "Число" Тогда
			ПредставлениеТипа = ПредставлениеТипа + "(" + ОписаниеТиповОбъекта.КвалификаторыЧисла.Разрядность + ","
				+ ОписаниеТиповОбъекта.КвалификаторыЧисла.РазрядностьДробнойЧасти + ")";
		ИначеЕсли ПредставлениеТипа = "Дата" Тогда
			ПредставлениеТипа = ПредставлениеТипа + "(" + ОписаниеТиповОбъекта.КвалификаторыДаты.ЧастиДаты + ")";
		КонецЕсли;

		ТипыОбъектаМетаданных.Добавить(ПредставлениеТипа);

	КонецЦикла;

	Возврат ТипыОбъектаМетаданных;

КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеТипа(ТипМетаданных)

	Если ТипМетаданных = Тип("Число") Или ТипМетаданных = Тип("Строка") Или ТипМетаданных = Тип("Булево")
		Или ТипМетаданных = Тип("Дата") Или ТипМетаданных = Тип("ХранилищеЗначения") 
		Или ТипМетаданных = Тип("ПостроительОтчета") Или ТипМетаданных = Тип("ВидСравнения") 
		Или ТипМетаданных = Тип("Отбор") Или ТипМетаданных = Тип("ПоляНастройки") 
		Или ТипМетаданных = Тип("НаправлениеСортировки") Тогда

		ПредставлениеТипа = Строка(ТипМетаданных);

	Иначе
		СсылкаТипа = Новый (ТипМетаданных);
		Если Перечисления.ТипВсеСсылки().СодержитТип(ТипМетаданных) Тогда
			ПредставлениеТипа = "ПеречислениеСсылка." + СсылкаТипа.Метаданные().Имя;
		ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипМетаданных) Тогда
			ПредставлениеТипа = "СправочникСсылка." + СсылкаТипа.Метаданные().Имя;
		ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипМетаданных) Тогда
			ПредставлениеТипа = "ДокументСсылка." + СсылкаТипа.Метаданные().Имя;
		ИначеЕсли ПланыОбмена.ТипВсеСсылки().СодержитТип(ТипМетаданных) Тогда
			ПредставлениеТипа = "ПланОбменаСсылка." + СсылкаТипа.Метаданные().Имя;
		КонецЕсли;

	КонецЕсли;

	Возврат ПредставлениеТипа;

КонецФункции

#КонецОбласти

#Область ВРазработке

&НаКлиенте
Процедура ДобавитьКартинкуВТекст()

	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);

	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Фильтр = НСтр("ru = 'Картинка'; en = 'Image'") + "(*.png)|*.png|(*.jpg)|*.jpg|(*.bmp)|*.bmp|(*.gif)|*.gif";

	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выберите файлы";
	Если ДиалогОткрытияФайла.Выбрать() Тогда

		МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
		ИмяФайла = МассивФайлов[0];

	Иначе

		Предупреждение(НСтр("ru = 'МодульОбъекта не выбран!'; en = 'File not selected!'"));

		Возврат;

	КонецЕсли;

	МаркерФорматирования = Новый Структура("Маркер, Представление", "![%%](" + ИмяФайла + ")", "Описание картинки");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКолонкиСиноним()
	Элементы.ПоказатьСинонимОбъектаМетаданных.Пометка = Не Элементы.ПоказатьСинонимОбъектаМетаданных.Пометка;
	Элементы.СтруктураМетаданныхСиноним.Видимость = Элементы.ПоказатьСинонимОбъектаМетаданных.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовыйОбъектВМенеджерОбъектов()

	ОбъектМетаданных = ТекущийОбъектМетаданных();
	УзелРазмещенияНовогоОбъекта = УзелРазмещенияНовогоОбъекта(ОбъектМетаданных);

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИдентификаторВладельца", УзелРазмещенияНовогоОбъекта.ПолучитьИдентификатор());
	Если Не ПустаяСтрока(ОбъектМетаданных.ПолноеИмя) Тогда
		ПараметрыФормы.Вставить("ПолноеИмяВладельца", ОбъектМетаданных.ПолноеИмя);
	Иначе
		ПараметрыФормы.Вставить("ПолноеИмяВладельца", ОбъектМетаданных.Класс);
	КонецЕсли;

	ПараметрыФормы.Вставить("Класс", ОбъектМетаданных.Класс);
	ПараметрыФормы.Вставить("УстановитьТип", ТребуетсяУстановитьТип(ОбъектМетаданных));

	ОткрытьФормуРедактораОбъекта(ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Функция УзелРазмещенияНовогоОбъекта(ОбъектМетаданных)

	Если ОбъектМетаданных.Класс = "Подсистема" Тогда
		Возврат ОбъектМетаданных;
	КонецЕсли;

	РодительОбъекта = ОбъектМетаданных.ПолучитьРодителя();
	Если ОбъектМетаданных.МенеджерОбъектов Тогда
		Возврат ОбъектМетаданных;
	ИначеЕсли РодительОбъекта.МенеджерОбъектов Тогда
		Возврат РодительОбъекта;
	ИначеЕсли ОбъектМетаданных.МенеджерПодчиненныхЭлементов Тогда
		Возврат ОбъектМетаданных;
	ИначеЕсли РодительОбъекта.МенеджерПодчиненныхЭлементов Тогда
		Возврат РодительОбъекта;
	КонецЕсли;

КонецФункции

&НаКлиенте
Функция ТребуетсяУстановитьТип(ОбъектМетаданных)

	ТипизированныеОбъекты = Новый СписокЗначений;
	ТипизированныеОбъекты.Добавить("ПараметрСеанса");
	ТипизированныеОбъекты.Добавить("ОбщийРеквизит");
	ТипизированныеОбъекты.Добавить("Константа");
	ТипизированныеОбъекты.Добавить("Реквизит");
	ТипизированныеОбъекты.Добавить("РеквизитАдресации");
	ТипизированныеОбъекты.Добавить("Измерение");
	ТипизированныеОбъекты.Добавить("Ресурс");

	ТипизированныйОбъект = ТипизированныеОбъекты.НайтиПоЗначению(ОбъектМетаданных.Класс);
	Если ТипизированныйОбъект = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ОткрытьФормуРедактораОбъекта(ПараметрыФормы)

	ОткрытьФорму("ВнешняяОбработка.doc_editor_1C.Форма.РедакторОбъектов", ПараметрыФормы);

КонецПроцедуры

// Функционал добавления нового объекта в структуру
&НаКлиенте
Процедура ДобавитьНовыйОбъектВСтруктуруМетаданных(ДанныеНовогоОбъекта)

	ОбъектМетаданных = СтруктураМетаданных.НайтиПоИдентификатору(ДанныеНовогоОбъекта.ИдентификаторВладельца);
	НовыйОбъект = ОбъектМетаданных.ПолучитьЭлементы().Добавить();
	НовыйОбъект.Класс = ДанныеНовогоОбъекта.Класс;
	НовыйОбъект.Имя = ДанныеНовогоОбъекта.Имя;
	НовыйОбъект.Синоним = ДанныеНовогоОбъекта.Имя;
	НовыйОбъект.ПолноеИмя = ДанныеНовогоОбъекта.ПолноеИмя;
	НовыйОбъект.Новый = Истина;

	НастроитьСвойстваНовогоОбъекта(НовыйОбъект, ДанныеНовогоОбъекта);

	ПереместитьВИзбранное(НовыйОбъект);
	Элементы.СтруктураМетаданных.Развернуть(НовыйОбъект.ПолучитьИдентификатор());

КонецПроцедуры

&НаКлиенте
Процедура НастроитьСвойстваНовогоОбъекта(НовыйОбъект, ДанныеНовогоОбъекта)

	Если (НовыйОбъект.Класс = "ПараметрСеанса" Или НовыйОбъект.Класс = "ОбщийРеквизит" Или НовыйОбъект.Класс
		= "Реквизит") Или (НовыйОбъект.Класс = "Константа") Тогда

		НовыйОбъект.Тип = ДанныеНовогоОбъекта.Типы;

	ИначеЕсли (НовыйОбъект.Класс = "Справочник" Или НовыйОбъект.Класс = "Документ" Или НовыйОбъект.Класс = "Отчет"
		Или НовыйОбъект.Класс = "Обработка" Или НовыйОбъект.Класс = "ПланВидовХарактеристик" Или НовыйОбъект.Класс = "ПланСчетов"
		Или НовыйОбъект.Класс = "ПланВидовРасчета" Или НовыйОбъект.Класс = "БизнесПроцесс" Или НовыйОбъект.Класс
		= "Задача") Тогда

		Если (НовыйОбъект.Класс = "Задача") Тогда
			ДобавитьМенеджерРеквизитовАдресации(НовыйОбъект);
		КонецЕсли;

		ДобавитьМенеджерРеквизитов(НовыйОбъект);
		ДобавитьМенеджерТабличныхЧастей(НовыйОбъект);
		ДобавитьМенеджерФорм(НовыйОбъект);
		ДобавитьМенеджерКоманд(НовыйОбъект);
		ДобавитьМенеджерМакетов(НовыйОбъект);

	ИначеЕсли (НовыйОбъект.Класс = "Перечисление") Тогда

		ДобавитьМенеджерЗначений(НовыйОбъект);
		ДобавитьМенеджерФорм(НовыйОбъект);
		ДобавитьМенеджерКоманд(НовыйОбъект);
		ДобавитьМенеджерМакетов(НовыйОбъект);

	ИначеЕсли (НовыйОбъект.Класс = "РегистрСведений" Или НовыйОбъект.Класс = "РегистрНакопления" Или НовыйОбъект.Класс
		= "РегистрБухгалтерии" Или НовыйОбъект.Класс = "РегистрРасчета") Тогда

		ДобавитьМенеджерИзмерений(НовыйОбъект);
		ДобавитьМенеджерРесурсов(НовыйОбъект);
		ДобавитьМенеджерРеквизитов(НовыйОбъект);
		ДобавитьМенеджерФорм(НовыйОбъект);
		ДобавитьМенеджерКоманд(НовыйОбъект);
		ДобавитьМенеджерМакетов(НовыйОбъект);

	ИначеЕсли НовыйОбъект.Класс = "Реквизит" Тогда
		НовыйОбъект.Тип = ДанныеНовогоОбъекта.Типы;
	КонецЕсли;

	УстановитьИконкуОбъектаМетаданных(НовыйОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВИзбранное(НовыйОбъект)

	СкопироватьДанныеОбъектаМетаданныхВБуфер(НовыйОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТипыМетаданных(ФормаРедактор)

	ФормаРедактор.ЗаполнитьТипыДанных(СтруктураМетаданных);

КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьСтруктуруМетаданныхИзКэша()
	 
//	ИмяФайлаКэша = КаталогВременныхФайлов() + "edit_structurebase.xml";
//	НайденныеФайлы = НайтиФайлы(ИмяФайлаКэша);
//	Если НайденныеФайлы.Количество() Тогда
//		
//		ПотокЧтения = Новый ЧтениеXML();
//		ПотокЧтения.ОткрытьФайл(ИмяФайлаКэша);
//		
//		СтруктураБазы = СериализаторXDTO.ПрочитатьXML(ПотокЧтения);
//		
//		ЗначениеВДанныеФормы(СтруктураБазы, СтруктураМетаданных);
//		
//	Иначе
//		
//	КонецЕсли;
//	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьСтруктуруМетаданныхВКэш()
//	
//	ИмяФайлаКэша = КаталогВременныхФайлов() + "edit_structurebase.xml";
//	
//	СтруктураБазы = ДанныеФормыВЗначение(СтруктураМетаданных, Тип("ДеревоЗначений"));
//	Если СтруктураБазы.Строки.Количество() Тогда
//		СтруктураБазы.Строки[0].Строки.Очистить();
//	КонецЕсли; 
//
//	ПотокЗаписи = Новый ЗаписьXML();
//	ПотокЗаписи.ОткрытьФайл(ИмяФайлаКэша, "UTF-8");
//	
//	СериализаторXDTO.ЗаписатьXML(ПотокЗаписи, СтруктураБазы);
//	ПотокЗаписи.Закрыть();
//	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРасширениеВСтруктуруМетаданных()
	
//	Фильтр = "МодульОбъекта обработки, отчета (*.epf;*.erf)|*.epf;*.erf";
//
//	Режим = РежимДиалогаВыбораФайла.Открытие;
//	ДиалогЗагрузкиФайла = Новый ДиалогВыбораФайла(Режим);
//	
//	ДиалогЗагрузкиФайла.Фильтр = Фильтр;
//	ДиалогЗагрузкиФайла.Заголовок = "Выбирите МодульОбъекта внешней обработки или внешнего отчета.";
//	
//	Если ДиалогЗагрузкиФайла.Выбрать() Тогда
//		
//		АдресХранилища = "";
//		ПоместитьФайл(АдресХранилища, ДиалогЗагрузкиФайла.ПолноеИмяФайла,, Ложь);
//		ДобавитьМетаданныеРасширенияВСтруктуруМетаданных(АдресХранилища, ДиалогЗагрузкиФайла.ПолноеИмяФайла);
//		
//	КонецЕсли;
//	
КонецПроцедуры

&НаСервере
Процедура ДобавитьМетаданныеРасширенияВСтруктуруМетаданных(АдресХранилища, ФайлРасширения)

	РасширениеФайла = Прав(ФайлРасширения, 3);
	Если НРег(РасширениеФайла) = "epf" Тогда
		КлассРасширения = "Обработка";
		ИмяМенеджераКласса = "Обработки";
	ИначеЕсли НРег(РасширениеФайла) = "erf" Тогда
		КлассРасширения = "Отчет";
		ИмяМенеджераКласса = "Отчеты";
	КонецЕсли;

	ОбъектРасширения = Неопределено;
	Если КлассРасширения = "Обработка" Тогда
		ИмяРасширения = ВнешниеОбработки.Подключить(АдресХранилища);
		ОбъектРасширения = ВнешниеОбработки.Создать(ИмяРасширения);
	Иначе
		ИмяРасширения = ВнешниеОтчеты.Подключить(АдресХранилища);
		ОбъектРасширения = ВнешниеОтчеты.Создать(ИмяРасширения);
	КонецЕсли;

	УзелРасшериний = Неопределено;
	УзелВыбранныеОбъекты = СтруктураМетаданных.ПолучитьЭлементы()[0];
	Для Каждого УзелМенеджеров Из УзелВыбранныеОбъекты.ПолучитьЭлементы() Цикл

		Если УзелМенеджеров.Имя = "Расширения" Тогда
			УзелРасшериний = УзелМенеджеров;
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Если УзелРасшериний = Неопределено Тогда

		УзелРасшериний = УзелВыбранныеОбъекты.ПолучитьЭлементы().Добавить();
		УзелРасшериний.Имя = "Расширения";
		УзелРасшериний.Синоним = "Расширения";
		УзелРасшериний.Класс   = "Расширения";
		УзелРасшериний.ИндексКартинки = 59;

	КонецЕсли;

	ОбъектМетаданных = ОбъектРасширения.Метаданные();

	ЭлементОбъектМетаданных = УзелРасшериний.ПолучитьЭлементы().Добавить();
	ЭлементОбъектМетаданных.Класс = КлассРасширения;
	ЭлементОбъектМетаданных.Имя = ОбъектМетаданных.Имя;
	ЭлементОбъектМетаданных.Синоним = ОбъектМетаданных.Синоним;
	ЭлементОбъектМетаданных.ИндексКартинки = ?(КлассРасширения = "Обработка", 41, 39);
	ЭлементОбъектМетаданных.АдресХранилищаОбработки = АдресХранилища;
	ЭлементОбъектМетаданных.ФайлРасширения = ФайлРасширения;
	ЭлементОбъектМетаданных.ПолноеИмя = ОбъектМетаданных.ПолноеИмя();

	ДобавитьРеквизитыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
	ДобавитьТабличныеЧастиОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
	ДобавитьФормуОбъектаМетаданных(ИмяМенеджераКласса, ЭлементОбъектМетаданных, ОбъектМетаданных);
	ДобавитьМакетыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);

КонецПроцедуры

#КонецОбласти

#Область СтарыйФункционал

&НаСервере
Процедура ДобавитьГрафыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных)

	ЭлементИзмерения = ДобавитьМенеджерГрафов(ЭлементОбъектМетаданных);

	Графы = ОбъектМетаданных.Графы;
	Если Графы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для Каждого Граф Из Графы Цикл

		ЭлементИзмерение = ЭлементИзмерения.ПолучитьЭлементы().Добавить();
		ЭлементИзмерение.Класс = "Граф";
		ЭлементИзмерение.Имя = Граф.Имя;
		ЭлементИзмерение.Синоним = Граф.Имя;
		ЭлементИзмерение.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя + "." + Граф.Имя;
//		ЗаполнитьТипыОбъектаМетаданных(ЭлементИзмерение, Граф);

		УстановитьИконкуОбъектаМетаданных(ЭлементИзмерение);

	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ДобавитьМенеджерГрафов(ЭлементОбъектМетаданных)

	ЭлементРеквизитыАдресации = ЭлементОбъектМетаданных.ПолучитьЭлементы().Добавить();
	ЭлементРеквизитыАдресации.Класс = "Граф";
	ЭлементРеквизитыАдресации.Имя = "Графы";
	ЭлементРеквизитыАдресации.Синоним = "Графы";
	ЭлементРеквизитыАдресации.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя;
	ЭлементРеквизитыАдресации.МенеджерПодчиненныхЭлементов = Истина;

	УстановитьИконкуОбъектаМетаданных(ЭлементРеквизитыАдресации);

	Возврат ЭлементРеквизитыАдресации;

КонецФункции // ДобавитьСвойстваОбъектаМетаданных()

&НаСервере
Процедура ДобавитьРеквизитыАдресацииОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных)

	ЭлементРеквизитыАдресации = ДобавитьМенеджерРеквизитовАдресации(ЭлементОбъектМетаданных);

	РеквизитыАдресации = ОбъектМетаданных.РеквизитыАдресации;
	Если РеквизитыАдресации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для Каждого РеквизитАдресации Из РеквизитыАдресации Цикл

		ЭлементРеквизитАдресации = ЭлементРеквизитыАдресации.ПолучитьЭлементы().Добавить();
		ЭлементРеквизитАдресации.Класс = "РеквизитАдресации";
		ЭлементРеквизитАдресации.Имя = РеквизитАдресации.Имя;
		ЭлементРеквизитАдресации.Синоним = РеквизитАдресации.Имя;
		ЭлементРеквизитАдресации.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя + "." + РеквизитАдресации.Имя;

		ЗаполнитьТипыОбъектаМетаданных(ЭлементРеквизитАдресации, РеквизитАдресации);
		УстановитьИконкуОбъектаМетаданных(ЭлементРеквизитАдресации);

	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьМенеджерРеквизитовАдресации(ЭлементОбъектМетаданных)

	ЭлементРеквизитыАдресации = ЭлементОбъектМетаданных.ПолучитьЭлементы().Добавить();
	ЭлементРеквизитыАдресации.Класс = "РеквизитАдресации";
	ЭлементРеквизитыАдресации.Имя = "РеквизитыАдресации";
	ЭлементРеквизитыАдресации.Синоним = "РеквизитыАдресации";
	ЭлементРеквизитыАдресации.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя;
	ЭлементРеквизитыАдресации.МенеджерПодчиненныхЭлементов = Истина;

	УстановитьИконкуОбъектаМетаданных(ЭлементРеквизитыАдресации);

	Возврат ЭлементРеквизитыАдресации;

КонецФункции

&НаСервере
Процедура ДобавитьИзмеренияОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных)

	ЭлементИзмерения = ДобавитьМенеджерИзмерений(ЭлементОбъектМетаданных);

	Измерения = ОбъектМетаданных.Измерения;
	Если Измерения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для Каждого Измерение Из Измерения Цикл

		ЭлементИзмерение = ЭлементИзмерения.ПолучитьЭлементы().Добавить();
		ЭлементИзмерение.Класс = "Измерение";
		ЭлементИзмерение.Имя = Измерение.Имя;
		ЭлементИзмерение.Синоним = Измерение.Имя;
		ЭлементИзмерение.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя + "." + Измерение.Имя;
		ЗаполнитьТипыОбъектаМетаданных(ЭлементИзмерение, Измерение);

		УстановитьИконкуОбъектаМетаданных(ЭлементИзмерение);

	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьМенеджерИзмерений(ЭлементОбъектМетаданных)

	ЭлементИзмерения = ЭлементОбъектМетаданных.ПолучитьЭлементы().Добавить();
	ЭлементИзмерения.Класс = "Измерение";
	ЭлементИзмерения.Имя = "Измерения";
	ЭлементИзмерения.Синоним = "Измерения";
	ЭлементИзмерения.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя;
	ЭлементИзмерения.МенеджерПодчиненныхЭлементов = Истина;

	УстановитьИконкуОбъектаМетаданных(ЭлементИзмерения);

	Возврат ЭлементИзмерения;

КонецФункции

&НаСервере
Процедура ДобавитьРесурсыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных)

	ЭлементРесурсы = ДобавитьМенеджерРесурсов(ЭлементОбъектМетаданных);

	Ресурсы = ОбъектМетаданных.Ресурсы;
	Если Ресурсы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для Каждого Ресурс Из Ресурсы Цикл

		ЭлементРесурс = ЭлементРесурсы.ПолучитьЭлементы().Добавить();
		ЭлементРесурс.Класс = "Ресурс";
		ЭлементРесурс.Имя = Ресурс.Имя;
		ЭлементРесурс.Синоним = Ресурс.Синоним;
		ЭлементРесурс.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя + "." + Ресурс.Имя;

		ЗаполнитьТипыОбъектаМетаданных(ЭлементРесурс, Ресурс);
		УстановитьИконкуОбъектаМетаданных(ЭлементРесурс);

	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьМенеджерРесурсов(ЭлементОбъектМетаданных)

	ЭлементРесурсы = ЭлементОбъектМетаданных.ПолучитьЭлементы().Добавить();
	ЭлементРесурсы.Класс = "Ресурс";
	ЭлементРесурсы.Имя = "Ресурсы";
	ЭлементРесурсы.Синоним = "Ресурсы";
	ЭлементРесурсы.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя;
	ЭлементРесурсы.МенеджерПодчиненныхЭлементов = Истина;

	УстановитьИконкуОбъектаМетаданных(ЭлементРесурсы);

	Возврат ЭлементРесурсы;

КонецФункции

&НаСервере
Процедура ДобавитьЗначенияОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных)

	ЭлементЗначения = ДобавитьМенеджерЗначений(ЭлементОбъектМетаданных);

	Значения = ОбъектМетаданных.ЗначенияПеречисления;
	Если Значения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для Каждого Значение Из Значения Цикл

		ЭлементЗначение = ЭлементЗначения.ПолучитьЭлементы().Добавить();
		ЭлементЗначение.Класс = "Значение";
		ЭлементЗначение.Имя = Значение.Имя;
		ЭлементЗначение.Синоним = Значение.Синоним;
		ЭлементЗначение.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя + "." + Значение.Имя;

		УстановитьИконкуОбъектаМетаданных(ЭлементЗначение);

	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьМенеджерЗначений(ЭлементОбъектМетаданных)

	ЭлементЗначения = ЭлементОбъектМетаданных.ПолучитьЭлементы().Добавить();
	ЭлементЗначения.Класс = "Значение";
	ЭлементЗначения.Имя = "Значения";
	ЭлементЗначения.Синоним = "Значения";
	ЭлементЗначения.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя;
	ЭлементЗначения.МенеджерПодчиненныхЭлементов = Истина;

	УстановитьИконкуОбъектаМетаданных(ЭлементЗначения);

	Возврат ЭлементЗначения;

КонецФункции

&НаСервере
Процедура ДобавитьТабличныеЧастиОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных)

	ЭлементТабличныеЧасти = ДобавитьМенеджерТабличныхЧастей(ЭлементОбъектМетаданных);

	ТабличныеЧасти = ОбъектМетаданных.ТабличныеЧасти;
	Если ТабличныеЧасти.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл

		ЭлементТабличнаяЧасть = ЭлементТабличныеЧасти.ПолучитьЭлементы().Добавить();
		ЭлементТабличнаяЧасть.Класс = "ТабличнаяЧасть";
		ЭлементТабличнаяЧасть.Имя = ТабличнаяЧасть.Имя;
		ЭлементТабличнаяЧасть.Синоним = ТабличнаяЧасть.Синоним;
		ЭлементТабличнаяЧасть.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя + "." + ТабличнаяЧасть.Имя;
		ЭлементТабличнаяЧасть.ТабличнаяЧасть = Истина;

		УстановитьИконкуОбъектаМетаданных(ЭлементТабличнаяЧасть);
		ДобавитьРеквизитыОбъектаМетаданных(ЭлементТабличнаяЧасть, ТабличнаяЧасть);

	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьМенеджерТабличныхЧастей(ЭлементОбъектМетаданных)

	ЭлементТабличныеЧасти = ЭлементОбъектМетаданных.ПолучитьЭлементы().Добавить();
	ЭлементТабличныеЧасти.Класс = "ТабличнаяЧасть";
	ЭлементТабличныеЧасти.Имя = "ТабличныеЧасти";
	ЭлементТабличныеЧасти.Синоним = "ТабличныеЧасти";
	ЭлементТабличныеЧасти.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя;
	ЭлементТабличныеЧасти.МенеджерПодчиненныхЭлементов = Истина;

	УстановитьИконкуОбъектаМетаданных(ЭлементТабличныеЧасти);

	Возврат ЭлементТабличныеЧасти;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьМенеджерРеквизитов(ЭлементОбъектМетаданных)

	Если Не ЭлементОбъектМетаданных.ТабличнаяЧасть Тогда

		ЭлементРеквизиты = ЭлементОбъектМетаданных.ПолучитьЭлементы().Добавить();
		ЭлементРеквизиты.Класс = "Реквизит";
		ЭлементРеквизиты.Имя = "Реквизиты";
		ЭлементРеквизиты.Синоним = "Реквизиты";
		ЭлементРеквизиты.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя;
		ЭлементРеквизиты.МенеджерПодчиненныхЭлементов = Истина;

	Иначе
		ЭлементРеквизиты = ЭлементОбъектМетаданных;
	КонецЕсли;

	УстановитьИконкуОбъектаМетаданных(ЭлементРеквизиты);

	Возврат ЭлементРеквизиты;

КонецФункции

&НаСервере
Процедура ДобавитьРеквизитыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных)

	ЭлементРеквизиты = ДобавитьМенеджерРеквизитов(ЭлементОбъектМетаданных);

	РеквизитыОбъекта = ОбъектМетаданных.Реквизиты;
	Если РеквизитыОбъекта.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	// TODO: Добавить вывод стандартных реквизитов
	Для Каждого Реквизит Из РеквизитыОбъекта Цикл

		ЭлементРеквизит = ЭлементРеквизиты.ПолучитьЭлементы().Добавить();
		ЭлементРеквизит.Класс = "Реквизит";
		ЭлементРеквизит.Имя = Реквизит.Имя;
		ЭлементРеквизит.Синоним = Реквизит.Имя;
		ЭлементРеквизит.Описание = Реквизит.Комментарий;
		ЭлементРеквизит.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя + "." + Реквизит.Имя;
		ЗаполнитьТипыОбъектаМетаданных(ЭлементРеквизит, Реквизит);

		УстановитьИконкуОбъектаМетаданных(ЭлементРеквизит);

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных)

	ЭлементКоманды = ДобавитьМенеджерКоманд(ЭлементОбъектМетаданных);

	КомандыОбъекта = ОбъектМетаданных.Команды;
	Если КомандыОбъекта.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для Каждого Команда Из КомандыОбъекта Цикл

		ЭлементКоманда = ЭлементКоманды.ПолучитьЭлементы().Добавить();
		ЭлементКоманда.Класс = "Команда";
		ЭлементКоманда.Имя = Команда.Имя;
		ЭлементКоманда.Синоним = Команда.Синоним;
		ЭлементКоманда.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя + "." + Команда.Имя;
		УстановитьИконкуОбъектаМетаданных(ЭлементКоманда);

	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьМенеджерКоманд(ЭлементОбъектМетаданных)

	ЭлементКоманды = ЭлементОбъектМетаданных.ПолучитьЭлементы().Добавить();
	ЭлементКоманды.Класс = "Команда";
	ЭлементКоманды.Имя = "Команды";
	ЭлементКоманды.Синоним = "Команды";
	ЭлементКоманды.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя;
	ЭлементКоманды.МенеджерПодчиненныхЭлементов = Истина;

	УстановитьИконкуОбъектаМетаданных(ЭлементКоманды);

	Возврат ЭлементКоманды;

КонецФункции

&НаСервере
Процедура ДобавитьМакетыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных)

	ЭлементМакеты = ДобавитьМенеджерМакетов(ЭлементОбъектМетаданных);

	Макеты = ОбъектМетаданных.Макеты;
	Если Макеты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для Каждого Макет Из Макеты Цикл

		ЭлементМакет = ЭлементМакеты.ПолучитьЭлементы().Добавить();
		ЭлементМакет.Класс = "Макет";
		ЭлементМакет.Имя = Макет.Имя;
		ЭлементМакет.Синоним = Макет.Синоним;
		ЭлементМакет.ПолноеИмя = ОбъектМетаданных.ПолноеИмя() + "." + Макет.Имя;
		ЭлементМакет.Тип = Макет.ТипМакета;
		ЭлементМакет.ИндексКартинки = 23;

	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьМенеджерМакетов(ЭлементОбъектМетаданных)

	ЭлементМакеты = ЭлементОбъектМетаданных.ПолучитьЭлементы().Добавить();
	ЭлементМакеты.Класс = "Макет";
	ЭлементМакеты.Имя = "Макеты";
	ЭлементМакеты.Синоним = "Макеты";
	ЭлементМакеты.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя;
	ЭлементМакеты.МенеджерПодчиненныхЭлементов = Истина;

	УстановитьИконкуОбъектаМетаданных(ЭлементМакеты);

	Возврат ЭлементМакеты;

КонецФункции

#КонецОбласти

#Область РаботаСПрограммнымМодулем

&НаКлиенте
Процедура ПоказатьМодульОбъекта(Команда)

	ОбъектМетаданныхСтруктуры = ТекущийОбъектМетаданных();
	ПоказатьПрограммныйМодульВФорма(ОбъектМетаданныхСтруктуры, "МодульОбъекта");

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПрограммныйМодульВФорма(ОбъектМетаданныхСтруктуры, ТипМодуля)

	ДанныеМодуляОбъекта = Новый Структура("ОбъектВладелец, МодульОбъект, КонтекстМодуля");
	Если Не ЗначениеЗаполнено(ОбъектМетаданныхСтруктуры.Свойства) Тогда
		ЗаполнитьСвойстваОбъектаМетаданных(ОбъектМетаданныхСтруктуры);
	КонецЕсли;

	МодулиОбъекта = ОбъектМетаданныхСтруктуры.Свойства.Модули;

	Если ТипМодуля = "МодульОбъекта" Тогда
		ИмяМодуля = МодулиОбъекта[0].Значение;
	КонецЕсли;

	ПрограммныйМодуль = ПрограммныйМодульОбъекта(ИмяМодуля);
	Если Не ПрограммныйМодуль = Неопределено Тогда

		КонтекстМодуля = СтруктураКонтекстМодуляОбъекта(ПрограммныйМодуль.ТекстМодуля);
		ДанныеМодуляОбъекта.МодульОбъект = ПрограммныйМодуль;
		ДанныеМодуляОбъекта.КонтекстМодуля = КонтекстМодуля;

		ОткрытьФормуМодуляОбъекта(ДанныеМодуляОбъекта);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуМодуляОбъекта(ДанныеМодуляОбъекта)

	ПараметрыФормы = Новый Структура("ДанныеМодуляОбъекта", ДанныеМодуляОбъекта);
	ОткрытьФорму("ВнешняяОбработка.doc_editor_1C.Форма.ФормаПрограммногоМодуля", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьМодульМенеджера(Команда)
	//TODO: Вставить содержимое обработчика
КонецПроцедуры

&НаКлиенте
Функция ИмяФайлаМодуляОбъекта(ЭлементОбъектМетаданных)

	ИмяФайла = "";
	ИмяФайла = ЭлементОбъектМетаданных.Класс + "." + ЭлементОбъектМетаданных.Имя + ".Модуль.txt";

	Возврат ИмяФайла;

КонецФункции

&НаКлиенте
Процедура ОткрытьМодульОбъекта(ИмяМодульОбъекта)

	ПрограммныйМодуль = ПрограммныйМодульОбъекта(ИмяМодульОбъекта);
	ПрограммныйМодуль.ТекстМодуля.Показать();

КонецПроцедуры

&НаКлиенте
Функция ПрограммныйМодульОбъекта(ИмяПрограммногоМодуля)

	ПрограммныйМодуль = Новый Структура("ИмяФайлаМодуля, ТекстМодуля");
	КаталогПрограммныхМодулей = КаталогПроекта + "\DumpConfig\";
	НайденныеФайлы = НайтиФайлы(КаталогПрограммныхМодулей + ИмяПрограммногоМодуля);
	Если НайденныеФайлы.Количество() > 0 Тогда
		МодульОбъекта = Новый ТекстовыйДокумент;
		МодульОбъекта.Прочитать(НайденныеФайлы[0].ПолноеИмя);

		ПрограммныйМодуль.ИмяФайлаМодуля = НайденныеФайлы[0].ПолноеИмя;
		ПрограммныйМодуль.ТекстМодуля = МодульОбъекта;

		Возврат ПрограммныйМодуль;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

&НаКлиенте
Функция СтруктураКонтекстМодуляОбъекта(ТекстМодульОбъекта)

	ТипыБлоковМодуля = ТипыБлоковМодуля();
	РазделыМодуля = РазделыПрограммногоМодуля();

	БлокиМодуля = БлокиПрограммногоМодуля(ТипыБлоковМодуля, ТекстМодульОбъекта);

// TODO: Возможно это не нужно
//	ОписаниеМодуля = Новый Структура("Назначение, Разделы", "", Новый Массив);

	ОбластиМодуля = Новый Массив;

	ПоследнийБлокКомментария = Неопределено;
	ПоследнийБлокМетода = Неопределено;
//	ЭтоНачзначениеМодуля = Истина;

	Для Каждого Блок Из БлокиМодуля Цикл

		Если Блок.ТипБлока = ТипыБлоковМодуля.ПустаяСтрока Тогда
			Продолжить;
		КонецЕсли;

		Если Блок.ТипБлока = ТипыБлоковМодуля.Комментарий Тогда

//			Если ЭтоНачзначениеМодуля Тогда
//
//				// первый комментарий считаем описанием модуля	
//				НазначениеМодуляПрошли = Истина;
//				Назначение = ПолучитьНазначениеБлока(ТекстМодульОбъекта, Блок.НачальнаяСтрока, Блок.КонечнаяСтрока);
//
//				Блок.ТипБлока = ТипыБлоковМодуля.Описание;
//				ОписаниеМодуля.ЕстьНазначениеМодуля = НЕ ПустаяСтрока(Назначение);
//				ОписаниеМодуля.Назначение = Назначение;
//
//			Иначе

			ПоследнийБлокКомментария = Блок;
				
//			КонецЕсли; 

		ИначеЕсли Блок.ТипБлока = ТипыБлоковМодуля.НачалоОбласти Тогда

			СтрокаМодуля = СокрЛП(ТекстМодульОбъекта.ПолучитьСтроку(Блок.НачальнаяСтрока));
			ИмяОбласти = СокрЛП(Сред(СтрокаМодуля, СтрДлина("#Область") + 1));

			ЭтоРаздел = Не РазделыМодуля.Найти(ИмяОбласти) = Неопределено;
			Если ЭтоРаздел И (ОбластиМодуля.Количество()) Тогда

				// кривая структура модуля
				ЭтоРаздел = Ложь;

			КонецЕсли;

			ТекущаяОбластьРодитель = "";
			Если ОбластиМодуля.Количество() Тогда
				ТекущаяОбластьРодитель = ОбластиМодуля[ОбластиМодуля.ВГраница()];
			КонецЕсли;

			Блок.ОписаниеБлока.ЭтоРаздел = ЭтоРаздел;
			Блок.ОписаниеБлока.ИмяОбласти = ИмяОбласти;
			Блок.ОписаниеБлока.ИмяОбластиРодителя = ТекущаяОбластьРодитель;
			Блок.ОписаниеБлока.НазначениеРаздела = "";

// TODO: Если комментарий идущий перед первым разделом считаем назначением модуля.

			Если ЭтоРаздел Тогда

				// Заполним описание раздела
				Если ПоследнийБлокКомментария <> Неопределено Тогда

					Назначение = ПолучитьНазначениеБлока(
						ТекстМодульОбъекта, ПоследнийБлокКомментария.НачальнаяСтрока,
						ПоследнийБлокКомментария.КонечнаяСтрока, ИмяОбласти);

					Блок.ОписаниеБлока.НазначениеРаздела = Назначение;
					Если Не ПустаяСтрока(Назначение) Тогда
						ПоследнийБлокКомментария.ТипБлока = ТипыБлоковМодуля.Описание;
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;
			
			// Открываем новую область модуля
			ОбластиМодуля.Добавить(ИмяОбласти);
			ПоследнийБлокКомментария = Неопределено;

		ИначеЕсли Блок.ТипБлока = ТипыБлоковМодуля.КонецОбласти Тогда
			
			// Закрываем область модуля	
			ОбластиМодуля.Удалить(ОбластиМодуля.ВГраница());

		ИначеЕсли Блок.ТипБлока = ТипыБлоковМодуля.ЗаголовокМетода Тогда

			ПоследнийБлокМетода = Блок;
			Если ОбластиМодуля.Количество() Тогда
				Блок.ОписаниеБлока.ИмяОбластиРодителя = ОбластиМодуля[ОбластиМодуля.ВГраница()];
			КонецЕсли;

			ЗаполнитьДанныеМетода(Блок);
			Если ПоследнийБлокКомментария <> Неопределено Тогда
				ЗаполнитьОписаниеПараметровМетода(ТекстМодульОбъекта, ПоследнийБлокКомментария, Блок);
				ПоследнийБлокКомментария.ТипБлока = ТипыБлоковМодуля.Описание;
			КонецЕсли;

			ПоследнийБлокКомментария = Неопределено;

		ИначеЕсли Блок.ТипБлока = ТипыБлоковМодуля.ОкончаниеМетода Тогда

			ПоследнийБлокМетода.ОписаниеБлока.Тело = ПолучитьСодержимоеБлока(ТекстМодульОбъекта,
				ПоследнийБлокМетода.КонечнаяСтрока + 1, Блок.НачальнаяСтрока - 1);
			ПоследнийБлокМетода = Неопределено;

		Иначе

			// забываем последний комментарий-блок
			ПоследнийБлокКомментария = Неопределено;

		КонецЕсли;

	КонецЦикла;

	УдалитьНеЗначимыеОбласти(ТипыБлоковМодуля, БлокиМодуля);

	Возврат БлокиМодуля;

КонецФункции

&НаКлиенте
Функция ТипыБлоковМодуля()

	Перем ТипыБлоковМодуля;

	ТипыБлоковМодуля = Новый Структура;
	ТипыБлоковМодуля.Вставить("НачалоОбласти", "НачалоОбласти");
	ТипыБлоковМодуля.Вставить("КонецОбласти", "КонецОбласти");
	ТипыБлоковМодуля.Вставить("ОписаниеПеременной", "ОписаниеПеременной");
	ТипыБлоковМодуля.Вставить("ЗаголовокМетода", "ЗаголовокМетода");
	ТипыБлоковМодуля.Вставить("ОкончаниеМетода", "ОкончаниеМетода");
	ТипыБлоковМодуля.Вставить("Операторы", "Операторы");
	ТипыБлоковМодуля.Вставить("Комментарий", "Комментарий");
	ТипыБлоковМодуля.Вставить("СтрокаТекста", "СтрокаТекста");
	ТипыБлоковМодуля.Вставить("ДирективаКомпиляции", "ДирективаКомпиляции");
	ТипыБлоковМодуля.Вставить("ПустаяСтрока", "ПустаяСтрока");
	ТипыБлоковМодуля.Вставить("Описание", "Описание");

	Возврат ТипыБлоковМодуля

КонецФункции

&НаКлиенте
Функция РазделыПрограммногоМодуля()

	РазделыМодуля = Новый Массив;
	РазделыМодуля.Добавить("ПрограммныйИнтерфейс");
	РазделыМодуля.Добавить("СлужебныйПрограммныйИнтерфейс");
	РазделыМодуля.Добавить("СлужебныеПроцедурыИФункции");
	РазделыМодуля.Добавить("ОбработчикиСобытий");

	Возврат РазделыМодуля;

КонецФункции

// Блоки программного модуля.
// 
// Параметры:
//  ТекстМодульОбъекта - ТекстовыйДокумент - Содержание модуля объекта
// 
// Возвращаемое значение:
//  
&НаКлиенте
Функция БлокиПрограммногоМодуля(ТипыБлоковМодуля, ТекстМодульОбъекта)

	БлокиМодуля = Новый Массив;

	КоличествоСтрокМодуля = ТекстМодульОбъекта.КоличествоСтрок();

	ПредыдущийБлок = Неопределено;
	БлокНеЗакрыт = Ложь;

	Для НомерСтроки = 1 По КоличествоСтрокМодуля Цикл

		СтрокаМодуля = ВРег(СокрЛП(ТекстМодульОбъекта.ПолучитьСтроку(НомерСтроки)));

		Если БлокНеЗакрыт Тогда

			ТекущийБлок = ПредыдущийБлок;
			Если ТекущийБлок = ТипыБлоковМодуля.ОписаниеПеременной Тогда

				УдалитьКомментарийИзСтроки(СтрокаМодуля);
				БлокНеЗакрыт = СтрНайти(СтрокаМодуля, ";") = 0;

			ИначеЕсли ТекущийБлок = ТипыБлоковМодуля.ЗаголовокМетода Тогда

				УдалитьКомментарийИзСтроки(СтрокаМодуля);
				БлокНеЗакрыт = СтрНайти(СтрокаМодуля, ")") = 0;

			КонецЕсли;

		ИначеЕсли СтрНачинаетсяС(СтрокаМодуля, "#ОБЛАСТЬ") Или СтрНачинаетсяС(СтрокаМодуля, "// #ОБЛАСТЬ") Тогда

			ТекущийБлок = ТипыБлоковМодуля.НачалоОбласти;
			Если СтрНачинаетсяС(СтрокаМодуля, "//") Тогда
				СтрокаМодуля = Сред(СтрокаМодуля, 4);
			КонецЕсли;

			БлокНеЗакрыт = Ложь;

		ИначеЕсли СтрНачинаетсяС(СтрокаМодуля, "#КОНЕЦОБЛАСТИ") Или СтрНачинаетсяС(СтрокаМодуля, "// #КОНЕЦОБЛАСТИ") Тогда

			ТекущийБлок = ТипыБлоковМодуля.КонецОбласти;
			Если СтрНачинаетсяС(СтрокаМодуля, "//") Тогда
				СтрокаМодуля = Сред(СтрокаМодуля, 4);
			КонецЕсли;

			БлокНеЗакрыт = Ложь;

		ИначеЕсли СтрНачинаетсяС(СтрокаМодуля, "//") Тогда

			ТекущийБлок = ТипыБлоковМодуля.Комментарий;
			БлокНеЗакрыт = Ложь;

		ИначеЕсли СтрНачинаетсяС(СтрокаМодуля, "&") Тогда

			ТекущийБлок = ТипыБлоковМодуля.ДирективаКомпиляции;
			БлокНеЗакрыт = Ложь;

		ИначеЕсли СтрНачинаетсяС(СтрокаМодуля, "ПЕРЕМ") Тогда

			ТекущийБлок = ТипыБлоковМодуля.ОписаниеПеременной;
			УдалитьКомментарийИзСтроки(СтрокаМодуля);
			БлокНеЗакрыт = СтрНайти(СтрокаМодуля, ";") = 0;

		ИначеЕсли СтрНачинаетсяС(СтрокаМодуля, "ПРОЦЕДУРА ") Или СтрНачинаетсяС(СтрокаМодуля, "ФУНКЦИЯ ")
			Или СтрНачинаетсяС(СтрокаМодуля, "FUNCTION ") Или СтрНачинаетсяС(СтрокаМодуля, "PROCEDURE ") Тогда

			ТекущийБлок = ТипыБлоковМодуля.ЗаголовокМетода;
			УдалитьКомментарийИзСтроки(СтрокаМодуля);
			БлокНеЗакрыт = СтрНайти(СтрокаМодуля, ")") = 0;

		ИначеЕсли СтрНачинаетсяС(СтрокаМодуля, "КОНЕЦПРОЦЕДУРЫ") Или СтрНачинаетсяС(СтрокаМодуля, "КОНЕЦФУНКЦИИ")
			Или СтрНачинаетсяС(СтрокаМодуля, "ENDFUNCTION") Или СтрНачинаетсяС(СтрокаМодуля, "ENDPROCEDURE") Тогда

			ТекущийБлок = ТипыБлоковМодуля.ОкончаниеМетода;
			УдалитьКомментарийИзСтроки(СтрокаМодуля);
			БлокНеЗакрыт = Ложь;

		ИначеЕсли ПустаяСтрока(СтрокаМодуля) И ПредыдущийБлок <> ТипыБлоковМодуля.Операторы Тогда

			ТекущийБлок = ТипыБлоковМодуля.ПустаяСтрока;
			БлокНеЗакрыт = Ложь;

		Иначе

			ТекущийБлок = ТипыБлоковМодуля.Операторы;
			БлокНеЗакрыт = Ложь;

		КонецЕсли;

		Если Не ТекущийБлок = ПредыдущийБлок Тогда

			ДанныеБлока = ДанныеБлокаМодуля();
			ДанныеБлока.ТипБлока = ТекущийБлок;
			ДанныеБлока.НачальнаяСтрока = НомерСтроки;
			ДанныеБлока.КонечнаяСтрока  = НомерСтроки;

			ЗаполнитьСодержимоеБлокаМодуля(ТекстМодульОбъекта, ДанныеБлока, ТипыБлоковМодуля);
			БлокиМодуля.Добавить(ДанныеБлока);

			ПредыдущийБлок  = ТекущийБлок;

		Иначе

			ДанныеБлока.КонечнаяСтрока  = НомерСтроки;
			ЗаполнитьСодержимоеБлокаМодуля(ТекстМодульОбъекта, ДанныеБлока, ТипыБлоковМодуля);

		КонецЕсли;

	КонецЦикла;

	Возврат БлокиМодуля;

КонецФункции

&НаКлиенте
Функция ДанныеБлокаМодуля()

	ДанныеБлока = Новый Структура("ТипБлока, НачальнаяСтрока, КонечнаяСтрока");

	ОписаниеБлока   = Новый Структура;
	ОписаниеБлока.Вставить("ЭтоРаздел", Ложь);
	ОписаниеБлока.Вставить("ИмяОбластиРодителя", "");
	ОписаниеБлока.Вставить("ИмяОбласти", "");
	ОписаниеБлока.Вставить("НазначениеРаздела", "");
	ОписаниеБлока.Вставить("ТипМетода", "");
	ОписаниеБлока.Вставить("ИмяМетода", "");
	ОписаниеБлока.Вставить("Экспортный", Ложь);
	ОписаниеБлока.Вставить("Назначение", "");
	ОписаниеБлока.Вставить("ПараметрыМетода", Неопределено);
	ОписаниеБлока.Вставить("ВозвращаемыеЗначения", Неопределено);
	ОписаниеБлока.Вставить("ПроизвольноеОписаниеВозвращаемыеЗначения", "");
	ОписаниеБлока.Вставить("Примеры", "");
	ОписаниеБлока.Вставить("Тело", "");

	ДанныеБлока.Вставить("ОписаниеБлока", ОписаниеБлока);
	ДанныеБлока.Вставить("Содержимое", "");

	Возврат ДанныеБлока;

КонецФункции

&НаКлиенте
Процедура ЗаполнитьСодержимоеБлокаМодуля(ТекстМодульОбъекта, ДанныеБлока, ТипыБлоковМодуля)

	УдалятьКомментарии = ДанныеБлока.ТипБлока = ТипыБлоковМодуля.ЗаголовокМетода;
	ДанныеБлока.Содержимое = ПолучитьСодержимоеБлока(
		ТекстМодульОбъекта, ДанныеБлока.НачальнаяСтрока, ДанныеБлока.КонечнаяСтрока, УдалятьКомментарии);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьСодержимоеБлока(ТекстМодульОбъекта, НачальнаяСтрока, КонечнаяСтрока, УдалятьКомментарии = Ложь)

	Строки = Новый Массив;

	Для Ит = НачальнаяСтрока По КонечнаяСтрока Цикл

		СтрокаМодуля = ТекстМодульОбъекта.ПолучитьСтроку(Ит);

		Если УдалятьКомментарии Тогда

			УдалитьКомментарийИзСтроки(СтрокаМодуля);

		КонецЕсли;

		Строки.Добавить(СтрокаМодуля);

	КонецЦикла;

	Возврат СтрСоединить(Строки, Символы.ПС);

КонецФункции

&НаКлиенте
Процедура УдалитьКомментарийИзСтроки(СтрокаМодуля)

	ПозицияКомментария = СтрНайти(СтрокаМодуля, "//");
	Если ПозицияКомментария > 0 Тогда

		СтрокаМодуля = СокрП(Лев(СтрокаМодуля, ПозицияКомментария - 1));

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьНазначениеБлока(ТекстМодульОбъекта, Знач НачальнаяСтрока, Знач КонечнаяСтрока, ИмяБлока = "")

	Назначение = "";
	Если НачальнаяСтрока + 1 < КонечнаяСтрока Тогда

		СтрокаМодуляНач = СокрЛП(ТекстМодульОбъекта.ПолучитьСтроку(НачальнаяСтрока));
		СтрокаМодуляКон = СокрЛП(ТекстМодульОбъекта.ПолучитьСтроку(КонечнаяСтрока));
		Если СтрНачинаетсяС(СтрокаМодуляНач, "////") И СтрНачинаетсяС(СтрокаМодуляКон, "////") Тогда // да, это описание

			Если Не ПустаяСтрока(ИмяБлока) Тогда

				СтрокаМодуля2 = СокрЛП(ТекстМодульОбъекта.ПолучитьСтроку(НачальнаяСтрока + 1));
				Если СтрНачинаетсяС(СтрокаМодуля2, "// " + ИмяБлока) Тогда

					НачальнаяСтрока = НачальнаяСтрока + 1;

				Иначе

					// имени блока нет, пропускаем
					НачальнаяСтрока = КонечнаяСтрока;

				КонецЕсли;

			КонецЕсли;

			Для Ит = НачальнаяСтрока + 1 По КонечнаяСтрока - 1 Цикл

				СтрокаМодуля = СокрЛП(Сред(ТекстМодульОбъекта.ПолучитьСтроку(Ит), 3));
				Назначение = Назначение + ?(ПустаяСтрока(Назначение), "", Символы.ПС) + СтрокаМодуля;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	Возврат Назначение;

КонецФункции

&НаКлиенте
Процедура ЗаполнитьДанныеМетода(БлокМетода)

	ТипМетода = "Процедура";
	
	// Получим имя метода
	Заголовок = СтрЗаменить(БлокМетода.Содержимое, Символы.ПС, " ");
	Заголовок = СокрЛП(СтрЗаменить(Заголовок, Символы.Таб, " "));
	Заголовок = СокрЛП(СтрЗаменить(Заголовок, "Процедура", ""));
	Заголовок = СокрЛП(СтрЗаменить(Заголовок, "Ppocedure", ""));

	Если СтрНачинаетсяС(Заголовок, "Функция") Или СтрНачинаетсяС(Заголовок, "Function") Тогда

		ТипМетода = "Функция";
		Заголовок = СокрЛП(СтрЗаменить(Заголовок, "Функция", ""));
		Заголовок = СокрЛП(СтрЗаменить(Заголовок, "Function", ""));

	КонецЕсли;
	
	// Получим параметры метода
	ПозицияОткрытойСкобки = СтрНайти(Заголовок, "(");
	ПозицияЗакрытойСкобки = СтрНайти(Заголовок, ")", НаправлениеПоиска.СКонца);
	ИмяМетода = Лев(Заголовок, ПозицияОткрытойСкобки - 1);
	СтрокаПараметров = СокрЛП(
		Сред(Заголовок, ПозицияОткрытойСкобки + 1, ПозицияЗакрытойСкобки - ПозицияОткрытойСкобки - 1));
	Заголовок = СокрЛП(Сред(Заголовок, СтрНайти(Заголовок, ")", НаправлениеПоиска.СКонца) + 1));

	БлокМетода.ОписаниеБлока.ТипМетода = ТипМетода;
	БлокМетода.ОписаниеБлока.ИмяМетода = ИмяМетода;
	БлокМетода.ОписаниеБлока.ПараметрыМетода = ПолучитьПараметрыМетода(СтрокаПараметров);
	БлокМетода.ОписаниеБлока.Экспортный = СтрЗаканчиваетсяНа(ВРег(Заголовок), "ЭКСПОРТ");

КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыМетода(СтрокаПараметров)

	ПараметрыМетода = Новый Структура;

	Пока Истина Цикл

		Если ПустаяСтрока(СтрокаПараметров) Тогда
			Прервать;
		КонецЕсли;

		СтрокаПараметров = СокрЛП(СтрокаПараметров);
		ИмяПараметра   = "";

		ДаныеПараметра = ДанныеПараметраМетода();

		// Отделим ЗНАЧ
		Если СтрНачинаетсяС(ВРег(СтрокаПараметров), "ЗНАЧ ") Тогда

			ДаныеПараметра.Знач = Истина;
			СтрокаПараметров = СокрЛП(Сред(СтрокаПараметров, 5));

		КонецЕсли;

		// Отделим имя
		ПозицияРавно = СтрНайти(СтрокаПараметров, "=");
		ПозицияЗапятая = СтрНайти(СтрокаПараметров, ",");

		Если ПозицияЗапятая + ПозицияРавно = 0 Тогда
			
			//  вся строка параметр
			ИмяПараметра = СокрЛП(СтрокаПараметров);
			СтрокаПараметров = "";

		ИначеЕсли ПозицияРавно = 0 Или ПозицияРавно > ПозицияЗапятая И ПозицияЗапятая > 0 Тогда        
			
			// значения по умолчанию нет        
			ИмяПараметра = СокрЛП(Лев(СтрокаПараметров, ПозицияЗапятая - 1));
			СтрокаПараметров = СокрЛП(Сред(СтрокаПараметров, ПозицияЗапятая + 1));

		Иначе // есть значение по умолчанию

			ИмяПараметра = СокрЛП(Лев(СтрокаПараметров, ПозицияРавно - 1));
			СтрокаПараметров = СокрЛП(Сред(СтрокаПараметров, ПозицияРавно + 1));
			ПозицияЗапятая = СтрНайти(СтрокаПараметров, ",");
			Если ПозицияЗапятая = 0 Тогда 
				
				// до конца строки - это значение по умолчанию
				ДаныеПараметра.ЗначениеПоУмолчанию = СтрокаПараметров;
				СтрокаПараметров = "";

			Иначе

				// надо отделить значение по умолчанию от следующего параметра
				// варианты значения - число, строка, булево, Неопределено  
				ПозицияКавычки = СтрНайти(СтрокаПараметров, """");
				Если ПозицияКавычки = 0 Или ПозицияКавычки > ПозицияЗапятая Тогда

					// текущее значение по умолчанию не строковое
					ДаныеПараметра.ЗначениеПоУмолчанию = СокрЛП(Лев(СтрокаПараметров, ПозицияЗапятая - 1));
					СтрокаПараметров = СокрЛП(Сред(СтрокаПараметров, ПозицияЗапятая + 1));

				Иначе

					ЗначениеПараметра = "";
					КавычкаОткрыта = Истина;
					Пока Истина Цикл

						ПозицияКавычки = СтрНайти(СтрокаПараметров, """",, 2);
						КавычкаОткрыта = Не КавычкаОткрыта;
						ЗначениеПараметра = ЗначениеПараметра + Лев(СтрокаПараметров, ПозицияКавычки);
						СтрокаПараметров = Сред(СтрокаПараметров, ПозицияКавычки + 1);

						Если ПустаяСтрока(СтрокаПараметров) Тогда
							Прервать;
						Иначе

							ПозицияЗапятая = СтрНайти(СтрокаПараметров, ",");
							ПозицияКавычки = СтрНайти(СтрокаПараметров, """",, 2);

							Если ПозицияКавычки = 0 Или ПозицияКавычки > ПозицияЗапятая Или Не КавычкаОткрыта Тогда

								ЗначениеПараметра = СокрЛП(ЗначениеПараметра + Лев(СтрокаПараметров, ПозицияЗапятая
									- 1));
								СтрокаПараметров = СокрЛП(Сред(СтрокаПараметров, ПозицияЗапятая + 1));
								Прервать;

							КонецЕсли;

						КонецЕсли;

					КонецЦикла;

					ДаныеПараметра.ЗначениеПоУмолчанию = ЗначениеПараметра;

				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		ПараметрыМетода.Вставить(ИмяПараметра, ДаныеПараметра);

	КонецЦикла;

	Возврат ПараметрыМетода;
	
//КонецЕсли;

КонецФункции

// Возвращает пустую структуру для заполнения данными параметра метода.
// 
// Возвращаемое значение:
//  Структура - Данные параметра метода:
// * Знач - Булево - Признак того что параметр передается по значению.
// * ЗначениеПоУмолчанию - Неопределено - Дефолтное значение не обязательного параметра.
// * ТипыПараметра - Неопределено - В случае если у параметра будет описание будет заполнен массивом типов параметра.
// * ПроизвольноеОписание - Строка - В случае если описание параметра сделано не по шаблону будет заполнен строкой
//	 описывающей тип параметра.
&НаКлиенте
Функция ДанныеПараметраМетода()

	ДаныеПараметра = Новый Структура;
	ДаныеПараметра.Вставить("Знач", Ложь);
	ДаныеПараметра.Вставить("ЗначениеПоУмолчанию", Неопределено);
	ДаныеПараметра.Вставить("ТипыПараметра", Неопределено);
	ДаныеПараметра.Вставить("ПроизвольноеОписание", "");

	Возврат ДаныеПараметра

КонецФункции

&НаКлиенте
Процедура ЗаполнитьОписаниеПараметровМетода(ТекстМодульОбъекта, БлокКомментарияМетода, БлокМетода)

	ОписаниеБлока = БлокМетода.ОписаниеБлока;
	ПараметрыМетода = ОписаниеБлока.ПараметрыМетода;
	ИмяРазделаОписания = "Назначение";
	ТекущийПараметр = Неопределено;

	Для НомерСтроки = БлокКомментарияМетода.НачальнаяСтрока По БлокКомментарияМетода.КонечнаяСтрока Цикл

		СтрокаКомментария = ТекстМодульОбъекта.ПолучитьСтроку(НомерСтроки);
		СтрокаКомментария = СокрЛП(Сред(СтрокаКомментария, 3));
		Если ПустаяСтрока(СтрокаКомментария) Тогда
			Продолжить;
		КонецЕсли;

		Если СтрНачинаетсяС(СтрокаКомментария, "Параметры:") Тогда

			ИмяРазделаОписания = "Параметры";
			Продолжить;

		ИначеЕсли СтрНачинаетсяС(СтрокаКомментария, "Возвращаемое значение:") Тогда

			ИмяРазделаОписания = "Возвращаемое значение";
			Продолжить;

		ИначеЕсли СтрНачинаетсяС(СтрокаКомментария, "Примеры:") Или СтрНачинаетсяС(СтрокаКомментария, "Пример:") Тогда

			ИмяРазделаОписания = "Примеры";
			Продолжить;

		КонецЕсли;

		Если ИмяРазделаОписания = "Назначение" Тогда

			ОписаниеБлока.Назначение = ОписаниеБлока.Назначение + ?(ПустаяСтрока(ОписаниеБлока.Назначение), "",
				Символы.ПС) + СтрокаКомментария;

		ИначеЕсли ИмяРазделаОписания = "Параметры" Тогда

			Для Каждого ПараметрМетода Из ПараметрыМетода Цикл
				Если СтрНачинаетсяС(СтрокаКомментария, ПараметрМетода.Ключ) Тогда

					ТекущийПараметр = ПараметрМетода.Значение;
					ТекущийПараметр.ТипыПараметра = Новый Массив;
					ПозицияИмениПараметра = СтрНайти(СтрокаКомментария, ПараметрМетода.Ключ);
					СтрокаКомментария = СокрЛП(Сред(СтрокаКомментария, ПозицияИмениПараметра + СтрДлина(
						ПараметрМетода.Ключ) + 1));

					Прервать;

				КонецЕсли;
			КонецЦикла;

			Если Не ТекущийПараметр = Неопределено Тогда

				СоставСтрокиКомментария = СтрРазделить(СтрокаКомментария, "-", Ложь);
				Если СоставСтрокиКомментария.Количество() Тогда

					ОписаниеТекущегоПараметра = Неопределено;
					Если СтрНачинаетсяС(СтрокаКомментария, "-") Тогда

						ОписаниеТекущегоПараметра = Новый Структура("Тип, Описание");
						ОписаниеТекущегоПараметра.Тип = СокрЛП(СоставСтрокиКомментария[0]);
						ОписаниеТекущегоПараметра.Описание = "";

						ТекущийПараметр.ТипыПараметра.Добавить(ОписаниеТекущегоПараметра);

						СоставСтрокиКомментария.Удалить(0);

					Иначе
						// Получаем параметр метода для текущей строки комментария
						Если ТекущийПараметр.ТипыПараметра.Количество() Тогда
							ОписаниеТекущегоПараметра = ТекущийПараметр.ТипыПараметра[ТекущийПараметр.ТипыПараметра.ВГраница()];
						КонецЕсли;
					КонецЕсли;

					Если Не ОписаниеТекущегоПараметра = Неопределено Тогда

						ОписаниеТипаЗначения = ОписаниеТипаЗначения(СоставСтрокиКомментария, ОписаниеТекущегоПараметра);
						ОписаниеТекущегоПараметра.Описание = ОписаниеТекущегоПараметра.Описание + ОписаниеТипаЗначения;

					Иначе
						ТекущийПараметр.ПроизвольноеОписание = СтрокаКомментария;
					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

		ИначеЕсли ИмяРазделаОписания = "Возвращаемое значение" Тогда

			ВозвращаемоеЗначение = Неопределено;
			СоставСтрокиКомментария = СтрРазделить(СтрокаКомментария, "-", Ложь);
			Если СтрНачинаетсяС(СтрокаКомментария, "-") Или ОписаниеБлока.ВозвращаемыеЗначения = Неопределено Тогда

				Если ОписаниеБлока.ВозвращаемыеЗначения = Неопределено Тогда
					ОписаниеБлока.ВозвращаемыеЗначения = Новый Массив;
				КонецЕсли;

				ВозвращаемоеЗначение = Новый Структура("Тип, Описание");
				ВозвращаемоеЗначение.Тип = СокрЛП(СоставСтрокиКомментария[0]);
				ВозвращаемоеЗначение.Описание = "";

				ОписаниеБлока.ВозвращаемыеЗначения.Добавить(ВозвращаемоеЗначение);

				СоставСтрокиКомментария.Удалить(0);

			Иначе
				Если ОписаниеБлока.ВозвращаемыеЗначения.Количество() Тогда
					ВозвращаемоеЗначение = ОписаниеБлока.ВозвращаемыеЗначения[ОписаниеБлока.ВозвращаемыеЗначения.ВГраница()];
				КонецЕсли;
			КонецЕсли;

			Если Не ВозвращаемоеЗначение = Неопределено Тогда

				ОписаниеВозвращаемогоТипа = ОписаниеТипаЗначения(СоставСтрокиКомментария, ВозвращаемоеЗначение);
				ВозвращаемоеЗначение.Описание = ВозвращаемоеЗначение.Описание + ОписаниеВозвращаемогоТипа;

			Иначе
				ОписаниеБлока.ПроизвольноеОписаниеВозвращаемыеЗначения = СтрокаКомментария;
			КонецЕсли;

		ИначеЕсли ИмяРазделаОписания = "Примеры" Тогда

			ОписаниеБлока.Примеры = ОписаниеБлока.Примеры + ?(ПустаяСтрока(ОписаниеБлока.Примеры), "", Символы.ПС)
				+ СтрокаКомментария;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ОписаниеТипаЗначения(СоставСтрокиОписания, ДанныеТипаЗначения)

	ОписаниеТипаЗначения = "";
	Для Итератор = 0 По СоставСтрокиОписания.ВГраница() Цикл

		Если Итератор = 0 Тогда
			Если СтрНачинаетсяС(СокрЛ(СоставСтрокиОписания[Итератор]), "*") Тогда
				ОписаниеТипаЗначения = ОписаниеТипаЗначения + Символы.ПС + " ";
			Иначе
				Если ПустаяСтрока(ДанныеТипаЗначения.Описание) Тогда
					
					// Делаем первый символ заглавным
					ДлинаСтроки = СтрДлина(СоставСтрокиОписания[Итератор]);
					Для НомерСимвола = 1 По ДлинаСтроки Цикл
						Если Сред(СоставСтрокиОписания[Итератор], НомерСимвола, 1) <> " " Тогда
							СоставСтрокиОписания[Итератор] = СокрЛ(Лев(СоставСтрокиОписания[Итератор], НомерСимвола - 1))
								+ ВРег(Сред(СоставСтрокиОписания[Итератор], НомерСимвола, 1)) + Сред(
								СоставСтрокиОписания[Итератор], НомерСимвола + 1);
							Прервать;
						КонецЕсли;
					КонецЦикла;

				Иначе
					ОписаниеТипаЗначения = ОписаниеТипаЗначения + " ";
				КонецЕсли;
			КонецЕсли;
		Иначе
			ОписаниеТипаЗначения = ОписаниеТипаЗначения + "-";
		КонецЕсли;

		СкорректированнаяЧастьОписания = СокрП(СоставСтрокиОписания[Итератор]);
		Если СтрДлина(СоставСтрокиОписания[Итератор]) <> СтрДлина(
				СкорректированнаяЧастьОписания) Тогда
			СкорректированнаяЧастьОписания = СкорректированнаяЧастьОписания + " ";
		КонецЕсли;

		ОписаниеТипаЗначения = ОписаниеТипаЗначения + СкорректированнаяЧастьОписания;

	КонецЦикла;

	Возврат ОписаниеТипаЗначения;

КонецФункции

&НаКлиенте
Процедура УдалитьНеЗначимыеОбласти(ТипыБлоковМодуля, БлокиМодуля)

	Возврат;

	КоличествоБлоков = БлокиМодуля.Количество() - 1;
	Для Ит = 0 По КоличествоБлоков Цикл

		Блок = БлокиМодуля[КоличествоБлоков - Ит];
		Если Блок.ТипБлока = ТипыБлоковМодуля.КонецОбласти Или Блок.ТипБлока = ТипыБлоковМодуля.ОкончаниеМетода
			Или Блок.ТипБлока = ТипыБлоковМодуля.Описание Или Блок.ТипБлока = ТипыБлоковМодуля.ПустаяСтрока Тогда

			БлокиМодуля.Удалить(Блок);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаПрограммныхМодулей

&НаКлиенте
Процедура КаталогПроектаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогВыборкаКаталога = Новый ДиалогВыбораФайла(Режим);
	ДиалогВыборкаКаталога.МножественныйВыбор = Ложь;
	ДиалогВыборкаКаталога.Заголовок = "Укажите каталог проекта";
	Если ДиалогВыборкаКаталога.Выбрать() Тогда
		КаталогПроекта = ДиалогВыборкаКаталога.Каталог;
	Иначе
		Предупреждение(НСтр("ru = 'Каталог не выбран!'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПрограммныеМодулиКонфигурации(Команда)
	
	ВыгрузитьМодулиКонфигурацииВПапкуПроекта();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьМодулиКонфигурацииВПапкуПроекта()
	
	ПапкаИсходниковКода = КаталогПроекта + "\DumpConfig";
	УдалитьФайлы(ПапкаИсходниковКода, "*");
	
	ВыполнитьКомандуКонфигуратора("/DumpConfigFiles """ + ПапкаИсходниковКода + """ -Module", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуКонфигуратора(Знач КомандаКонфигуратора, ПодавлятьДиалоги = Истина, ДожидатьсяВыполнения = Истина)
	
	ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
	ПолноеИмяИсполняемогоФайла = ИмяИсполняемогоФайлаКлиентаПлатформы();
	
	ДополнительныеПараметры = "/Out""" + ИмяФайлаЛога + """ " + КомандаКонфигуратора;
	ПараметрыПакетногоЗапуска = ПараметрыЗапускаПриложения1С(ДополнительныеПараметры);
	
	Если ПодавлятьДиалоги Тогда
		ПараметрыПакетногоЗапуска = ПараметрыПакетногоЗапуска + " /DisableStartupDialogs /DisableStartupMessages";
	КонецЕсли; 
	
	ЗапуститьСистему(ПараметрыПакетногоЗапуска, ДожидатьсяВыполнения);
	
	ФайлЛога = Новый Файл(ИмяФайлаЛога);
	Если ФайлЛога.Существует() Тогда
		ТекстовыйДокументЛога = Новый ТекстовыйДокумент;
		ТекстовыйДокументЛога.Прочитать(ФайлЛога.ПолноеИмя);
		выхТекстЛога = ТекстовыйДокументЛога.ПолучитьТекст();
		
		Сообщить(выхТекстЛога);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ИмяИсполняемогоФайлаКлиентаПлатформы(Полное = Истина, Тонкий = Ложь) Экспорт 
	
	Результат = "1cv8";
	Если Тонкий Тогда
		Результат = Результат + "c";
	КонецЕсли; 
	
	Если ЭтоУчебнаяПлатформа() Тогда
		Результат = Результат + "t";
	КонецЕсли; 
	
	Результат = ИмяИсполняемогоФайла(Результат);
	Если Полное Тогда
		Результат = КаталогПрограммы() + Результат;
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЭтоУчебнаяПлатформа() 

	Если Не ЭтоФайловаяБаза() Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	ВременныйФайл = ПолучитьИмяВременногоФайла("mxl");
	ТабДок = Новый ТабличныйДокумент;
	Попытка
		// В учебной версии платформы это запрещено https://www.hostedredmine.com/issues/923942
		ТабДок.Записать(ВременныйФайл, ТипФайлаТабличногоДокумента.MXL7); 
	Исключение
		// Сработает при отсутствии права "Вывод" (портативный вариант) и в учебной платформе ("Ограничение используемой лицензии")
		ОписаниеОшибки = ОписаниеОшибки();
		
		Возврат Истина;
		
	КонецПопытки; 
	
	УдалитьФайлы(ВременныйФайл);
	
	Возврат Ложь;

КонецФункции

&НаКлиенте
Функция ЭтоФайловаяБаза() 

	ФайловыйКаталог = НСтр(СтрокаСоединенияИнформационнойБазы(), "File");
	ЭтоФайловаяБаза = Не ПустаяСтрока(ФайловыйКаталог);
	
	Возврат ЭтоФайловаяБаза;

КонецФункции

&НаКлиенте
Функция ИмяИсполняемогоФайла(Знач ИмяБезРасширения)
	
	Результат = ИмяБезРасширения;
	Если ПлатформаWindows() Тогда
		Результат = Результат + ".exe";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПлатформаWindows() Экспорт
	
	СисИнфо = Новый СистемнаяИнформация;
	Результат = Ложь
		Или СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86
		Или СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64;
		
	Возврат Результат;

КонецФункции

&НаКлиенте
Функция ПараметрыЗапускаПриложения1С(ДополнительныеПараметры)
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	
	ПараметрыЗапуска = "";
	ПараметрыЗапуска = ПараметрыЗапуска + " CONFIG";
	ПараметрыЗапуска = ПараметрыЗапуска + " /IBConnectionString" + СтрокаВВыражениеВстроенногоЯзыка(СтрокаСоединения);
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		ПараметрыЗапуска = ПараметрыЗапуска + " " + ДополнительныеПараметры;
	КонецЕсли;
	
	Возврат ПараметрыЗапуска;

КонецФункции

&НаКлиенте
Функция СтрокаВВыражениеВстроенногоЯзыка(Строка)

	Результат = """" + СтрЗаменить(Строка, """", """""") + """";
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСДиаграммами

&НаКлиенте
Процедура ДобавитьДиаграммуОбъектов(Команда)

	ТекущийОбъект = ТекущийОбъектМетаданных();
	ДобавитьОпианиеОбъектаВДиаграмму(ТекущийОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОпианиеОбъектаВДиаграмму(ОбъектМетаданныхСтруктуры)
	
	СсылкиВОбъекте = НайтиСсылкиВОбъекте(
		ИмяМенеджераОбъектов(ОбъектМетаданныхСтруктуры), ОбъектМетаданныхСтруктуры.Имя);
		
	ДобавитьОписаниеСвязанныхОбъектовВДиаграмму(СсылкиВОбъекте);
	ДобавитьБлокОбъектаВДиаграмму(ОбъектМетаданныхСтруктуры);	
		
	ДобавитьБлокСвязейВДиаграмму(ОбъектМетаданныхСтруктуры, СсылкиВОбъекте);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьБлокСвязейВДиаграмму(ОбъектМетаданныхСтруктуры, СсылкиВОбъекте)

	ВыводитьПоляСвязи = ВыводитьДетальныеДанныеОбъекта(ОбъектМетаданныхСтруктуры);	
		
	ДокументДобавитьНачалоПараграфа();
	Для Каждого СсылкаВОбъекте Из СсылкиВОбъекте Цикл
		
		ОпиисаниеСвязиОбъектов = "";
		Если ВыводитьПоляСвязи Тогда
			
			ОпиисаниеСвязиОбъектов = СтрШаблон(" %1 %2 %3::%4", 
				СсылкаВОбъекте.ИмяОбъекта, СсылкаВОбъекте.НаправлениеСвязи, 
				ОбъектМетаданныхСтруктуры.Имя, СсылкаВОбъекте.ПолеСвязи);
		Иначе
			ОпиисаниеСвязиОбъектов = СтрШаблон(" %1 %2 %3", 
				СсылкаВОбъекте.ИмяОбъекта, СсылкаВОбъекте.НаправлениеСвязи, ОбъектМетаданныхСтруктуры.Имя);
		КонецЕсли;
		
		ДокументДобавитьСодержание(ОпиисаниеСвязиОбъектов);
		ДокументДобавитьПереносСтроки();
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОписаниеСвязанныхОбъектовВДиаграмму(СсылкиНаСвязанныеОбъекты)

	Для Каждого ДанныеОбъекта Из СсылкиНаСвязанныеОбъекты Цикл

		МенеджерыМетаданных = СтруктураМетаданных.ПолучитьЭлементы();
		Для Каждого МенеджерМетаданных Из МенеджерыМетаданных Цикл
			Если МенеджерМетаданных.Имя = ДанныеОбъекта.ИмяМенеджера Тогда
				
				ОбъектыМетаданных = МенеджерМетаданных.ПолучитьЭлементы();
				Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
					
					Если ОбъектМетаданных.ПолноеИмя = ДанныеОбъекта.ПолноеИмяОбъекта Тогда
						ДобавитьБлокОбъектаВДиаграмму(ОбъектМетаданных);
					КонецЕсли;

				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьБлокОбъектаВДиаграмму(ОбъектМетаданныхСтруктуры)
	
	СтрокаБлокаДиограммыОбъекта = БлокДиограммыОбъекта("_" + ОбъектМетаданныхСтруктуры.Класс, ОбъектМетаданныхСтруктуры);
	
	ДокументДобавитьНачалоПараграфа();
	ДокументДобавитьСодержание(СтрокаБлокаДиограммыОбъекта);
	Если ВыводитьДетальныеДанныеОбъекта(ОбъектМетаданныхСтруктуры) Тогда
		ДобавитьСвойстваОбъектаВДиаграмму(ОбъектМетаданныхСтруктуры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция БлокДиограммыОбъекта(ИмяМакросаОбъекта, ОбъектМетаданныхСтруктуры)

	СинонимЭкранированный = ЭкранироватьСимволы(ОбъектМетаданныхСтруктуры.Синоним);

	Возврат СтрШаблон("%1(%2, ""%3"")", 
		ИмяМакросаОбъекта, 
		ОбъектМетаданныхСтруктуры.Имя, 
		СинонимЭкранированный);

КонецФункции

&НаКлиенте
Функция ЭкранироватьСимволы(Знач СинонимОбъекта)

	Результат = "";

	КодСимволаЗнаки = 48;

	Для сч = 1 По СтрДлина(СинонимОбъекта) Цикл
    	Символ = Сред(СинонимОбъекта, сч, 1);
    	Если Символ <> " " 
    		И КодСимвола(Символ) < КодСимволаЗнаки Тогда
    		Результат = Результат + СтрШаблон("&#%1;", КодСимвола(Символ));
    	Иначе
			Результат = Результат + Символ;   			
    	КонецЕсли;
    	
	КонецЦикла;

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ДобавитьСвойстваОбъектаВДиаграмму(ОбъектМетаданныхСтруктуры)
	
	Если Не ЗначениеЗаполнено(ОбъектМетаданныхСтруктуры.Свойства) Тогда
		ЗаполнитьСвойстваОбъектаМетаданных(ОбъектМетаданныхСтруктуры);
	КонецЕсли;
	
	ОписаниеСвойствОбъекта = "";
	Для Каждого ПодчиненныйЭлемент Из ОбъектМетаданныхСтруктуры.ПолучитьЭлементы() Цикл

		Если ЭтоПодчиненныеЭлементыОбъекта(ПодчиненныйЭлемент, Истина) Тогда
			
			ДобавитьОписаниеДанныхВБлокОбъектаДиаграммы(ПодчиненныйЭлемент, ОписаниеСвойствОбъекта);
			
		ИначеЕсли (ПодчиненныйЭлемент.Класс = "ТабличнаяЧасть" И ПодчиненныйЭлемент.МенеджерПодчиненныхЭлементов) Тогда

			Для Каждого ТабличнаяЧастьОбъекта Из ПодчиненныйЭлемент.ПолучитьЭлементы() Цикл

				ОписаниеСвойствОбъекта = ОписаниеСвойствОбъекта + Символы.ПС + "--" + ТабличнаяЧастьОбъекта.Имя + "--";
				ДобавитьОписаниеДанныхВБлокОбъектаДиаграммы(ТабличнаяЧастьОбъекта, ОписаниеСвойствОбъекта);

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОписаниеСвойствОбъекта) Тогда
		
		ДокументДобавитьСодержание("{" + ОписаниеСвойствОбъекта);
		ДокументДобавитьПереносСтроки();
		ДокументДобавитьСодержание("}");
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОписаниеДанныхВБлокОбъектаДиаграммы(ОбъектМетаданныхСтруктуры, ОписаниеСвойствОбъекта)
	
	Для Каждого ЭлементДанные Из ОбъектМетаданныхСтруктуры.ПолучитьЭлементы() Цикл

		Если Не ЗначениеЗаполнено(ЭлементДанные.Свойства) Тогда
			ЗаполнитьСвойстваОбъектаМетаданных(ЭлементДанные);
		КонецЕсли;
		
		ОписаниеСвойствОбъекта = ОписаниеСвойствОбъекта + Символы.ПС
			+ СтрШаблон(" + %1", ЭлементДанные.Имя);

	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиСсылкиВОбъекте(ИмяМенеджераОбъекта, ИмяОбъекта)
	
	СсылкиНаОбъекты = Новый Массив();
	
	ОбъектМетаданных = Метаданные[ИмяМенеджераОбъекта][ИмяОбъекта];
	ВидыДанныхОбъекта = ЭлементыХраненияДанныхОбъектомМетаданных(ИмяМенеджераОбъекта);
	
	Для Каждого ВидДанныхОбъекта Из ВидыДанныхОбъекта Цикл

		Если ВидДанныхОбъекта.Значение = Ложь Или ВидДанныхОбъекта.Ключ = "СтандартныеРеквизиты" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВидДанныхОбъекта.Ключ = "ТабличныеЧасти" Тогда
			Для Каждого ТабличнаяЧасть Из ОбъектМетаданных[ВидДанныхОбъекта.Ключ] Цикл
				СсылкиНаОбъектахВДанных(ТабличнаяЧасть.Реквизиты, СсылкиНаОбъекты);
			КонецЦикла;
		Иначе
			СсылкиНаОбъектахВДанных(ОбъектМетаданных[ВидДанныхОбъекта.Ключ], СсылкиНаОбъекты);
		КонецЕсли;

	КонецЦикла;
	
	Возврат СсылкиНаОбъекты;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СсылкиНаОбъектахВДанных(ДанныеОбъекта, СсылкиВОбъекте)
	
	Для Каждого ЭлементДанных Из ДанныеОбъекта Цикл

		ТипыЭлементаДанных = ЭлементДанных.Тип.Типы();
		Для Каждого ТипДанных Из ТипыЭлементаДанных Цикл
			Если ЭтоСсылка(ТипДанных) Тогда
				
				СвязаныйОбъект = Метаданные.НайтиПоТипу(ТипДанных);
				Если Не СвязаныйОбъект = Неопределено Тогда
					
					СсылкаНаОбъект = Новый Структура();
						
					СсылкаНаОбъект.Вставить("ИмяМенеджера", ИмяМенеджераОбъектаМетаданных(СвязаныйОбъект));
					СсылкаНаОбъект.Вставить("ИмяОбъекта", СвязаныйОбъект.Имя);
					СсылкаНаОбъект.Вставить("ПолноеИмяОбъекта", СвязаныйОбъект.ПолноеИмя());
					СсылкаНаОбъект.Вставить("НаправлениеСвязи", "<--");
					СсылкаНаОбъект.Вставить("ПолеСвязи", ЭлементДанных.Имя);

					СсылкиВОбъекте.Добавить(СсылкаНаОбъект);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяМенеджераОбъектаМетаданных(ОбъектМетаданных)
	
	СоставИмениОбъекта = СтрРазделить(ОбъектМетаданных.ПолноеИмя(), ".");
	КлассОбъекта = СоставИмениОбъекта[0];
	
	Если КлассОбъекта = "ПланОбмена" Тогда
		Возврат "ПланыОбмена";
	ИначеЕсли КлассОбъекта = "Справочник" Тогда
		Возврат "Справочники";
	ИначеЕсли КлассОбъекта = "Документ" Тогда
		Возврат "Документы";
	ИначеЕсли КлассОбъекта = "Перечисление" Тогда
		Возврат "Перечисления";
	ИначеЕсли КлассОбъекта = "ПланВидовХарактеристик" Тогда
		Возврат "ПланыВидовХарактеристик";
	ИначеЕсли КлассОбъекта = "ПланСчетов" Тогда
		Возврат "ПланыСчетов";
	ИначеЕсли КлассОбъекта = "РегистрСведений" Тогда
		Возврат "РегистрыСведений";
	ИначеЕсли КлассОбъекта = "РегистрНакопления" Тогда
		Возврат "РегистрыНакопления";
	ИначеЕсли КлассОбъекта = "РегистрБухгалтерии" Тогда
		Возврат "РегистрыБухгалтерии";
	ИначеЕсли КлассОбъекта = "РегистрРасчета" Тогда
		Возврат "РегистрыРасчета";
	ИначеЕсли КлассОбъекта = "Задача" Тогда
		Возврат "Задача";
	КонецЕсли;

	Возврат "";
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиСсылкиНаОбъект(СсылкаНаОбъект)
	
	СсылкаНаОбъект = "СправочникСсылка.тест_Справочник";
	
	Для Каждого ПрикладнойОбъектМетаданых Из ПрикладныеОбъектыМетаданных() Цикл

		ДанныеОбъекта = ПодчиненныеЭлементыОбъектомМетаданных(ПрикладнойОбъектМетаданых);
		Для Каждого ОбъектМетаданных Из Метаданные[ПрикладнойОбъектМетаданых] Цикл

			Если ДанныеОбъекта.Реквизиты Тогда

				Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл

					Если Реквизит.Тип.СодержитТип(Тип(СсылкаНаОбъект)) Тогда
						Сообщить("Справочник связан с " + ОбъектМетаданных.ПолноеИмя() + " по " + Реквизит.Имя);
					КонецЕсли;

				КонецЦикла;

			КонецЕсли;
			
			Если ДанныеОбъекта.ТабличныеЧасти Тогда
				Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
					
					Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл

						Если Реквизит.Тип.СодержитТип(Тип(СсылкаНаОбъект)) Тогда
							Сообщить("Справочник связан с " + ОбъектМетаданных.ПолноеИмя() + " по " + Реквизит.Имя);
						КонецЕсли;

					КонецЦикла;
					
				КонецЦикла;
			КонецЕсли;
			

		КонецЦикла;

	КонецЦикла;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПрикладныеОбъектыМетаданных()
	
	ПрикладныеОбъекты = Новый Массив();
	ПрикладныеОбъекты.Добавить("Справочники");
	ПрикладныеОбъекты.Добавить("Документы");
	
	Возврат ПрикладныеОбъекты
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоСсылка(Тип)
	
	Если Тип = Тип("Строка")
		ИЛИ Тип = Тип("Число")
      	ИЛИ Тип = Тип("Булево")
		ИЛИ Тип = Тип("Дата")
		ИЛИ Тип = Тип("ОписаниеТипов")
		ИЛИ Тип = Тип("ВидДвиженияНакопления") Тогда
		Возврат Ложь;
	КонецЕсли;		
	
	Возврат Тип <> Тип("Неопределено") 
		И (Справочники.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Документы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(Тип)
		ИЛИ Задачи.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип));
	
КонецФункции

#КонецОбласти
